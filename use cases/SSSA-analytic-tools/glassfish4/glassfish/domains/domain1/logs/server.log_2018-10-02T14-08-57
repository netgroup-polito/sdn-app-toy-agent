[2018-10-02T10:46:04.382+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538469964382] [levelValue: 800] [[
  leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    leaf l3 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }            }            container c {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }                container a {                    leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container a {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type]]

[2018-10-02T10:46:04.382+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538469964382] [levelValue: 800] [[
  string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container b {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    list l {                                        key l1;                                        leaf l1 {                                            type int32;                                            orchestrator:advertise onchange;                                        }                                        leaf l2 {                                            type string;                                            orchestrator:advertise onchange;                                        }                                    }                                }                            }                        }                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                                container c {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    leaf l3 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container a {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                    }    			}    		}    	}}]]

[2018-10-02T10:46:10.571+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538469970571] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[77]/b/c/l1']]

[2018-10-02T10:46:26.458+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538469986458] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[77]/b/c/l1']]

[2018-10-02T10:49:16.759+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538470156759] [levelValue: 800] [[
  Setted DM for sssaLara module orchestrator{	namespace "urn:sssa:orchestrator";	prefix "orchestrator";	extension advertise{		argument advertise{			yin-element false;		}	}	extension period{		argument period{			yin-element false;		}	}	extension minthreshold{		argument minthreshold{			yin-element false;		}	}	extension maxthreshold{		argument maxthreshold{			yin-element false;		}	}	list switches{		key id;		leaf id{			type string;			orchestrator:advertise onchange;		}		leaf ip{			type string;			orchestrator:advertise onchange;		}		leaf mac{			type string;			orchestrator:advertise onchange;		}	}	list load{		key id;		leaf id{			type string;		}		leaf tp{			type int32;			orchestrator:advertise onthreshold;			orchestrator:minthreshold 500;		}	}	container a {		leaf l1 {			type int32;			orchestrator:advertise onchange;		}		leaf l2 {			type string;			orchestrator:advertise onchange;		}		container b {			leaf l1 {				type int32;				orchestrator:advertise onchange;			}			leaf l2 {				type string;				orchestrator:advertise onchange;			}			container c {				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				leaf l3 {					type string;					orchestrator:advertise onchange;				}			}			list l {				key l1;				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }				container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;]]

[2018-10-02T10:49:16.759+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538470156759] [levelValue: 800] [[
  orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }			}		}		container c {			leaf l1 {				type int32;				orchestrator:advertise onchange;			}			leaf l2 {				type string;				orchestrator:advertise onchange;			}			leaf l3 {				type string;				orchestrator:advertise onchange;			}			container a {				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				container b {					leaf l1 {						type int32;						orchestrator:advertise onchange;					}					leaf l2 {						type string;						orchestrator:advertise onchange;					}					container c {						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						leaf l3 {							type string;							orchestrator:advertise onchange;						}						container a {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}					}					list l {						key l1;						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						container b {							leaf l1 {								type int32;								orchestrator:advertise onchange;							}							leaf l2 {								type string;								orchestrator:advertise onchange;							}							list l {								key l1;								leaf l1 {									type int32;									orchestrator:advertise onchange;								}								leaf l2 {									type string;									orchestrator:advertise onchange;								}								container c {									leaf l1 {										type int32;										orchestrator:advertise onchange;									}									leaf l2 {										type string;										orchestrator:advertise onchange;									}									leaf l3 {										type string;										orchestrator:advertise onchange;									}								}							}						}						container c {							leaf l1 {								type int32;								orchestrator:advertise onchange;							}							leaf l2 {								type string;								orchestrator:advertise onchange;							}							leaf l3 {								type string;								orchestrator:advertise onchange;							}							container a {								leaf l1 {									type int32;									orchestrator:advertise onchange;								}								leaf l2 {									type string;									orchestrator:advertise onchange;								}							}						}					}				}				container c {					leaf l1 {						type int32;						orchestrator:advertise onchange;					}					leaf l2 {						type string;						orchestrator:advertise onchange;					}					leaf l3 {						type string;						orchestrator:advertise onchange;					}					container a {						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						container b {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    ty]]

[2018-10-02T10:49:16.759+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538470156759] [levelValue: 800] [[
  pe string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}						container c {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}					}				}			}			container c {			    leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }			    container a {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container b {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        list l {                            key l1;                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1]]

[2018-10-02T10:49:16.759+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538470156759] [levelValue: 800] [[
  {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }			}		}	}	container a2 {        leaf l1 {            type int32;            orchestrator:advertise onchange;        }        leaf l2 {            type string;            orchestrator:advertise onchange;        }        container b {            leaf l1 {                type int32;                orchestrator:advertise onchange;            }            leaf l2 {                type string;                orchestrator:advertise onchange;            }            container c {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }            }            list l {                key l1;                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2]]

[2018-10-02T10:49:16.759+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538470156759] [levelValue: 800] [[
  {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }            }        }        container c {            leaf l1 {                type int32;                orchestrator:advertise onchange;            }            leaf l2 {                type string;                orchestrator:advertise onchange;            }            leaf l3 {                type string;                orchestrator:advertise onchange;            }            container a {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container c {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }]]

[2018-10-02T10:49:16.759+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538470156759] [levelValue: 800] [[
  leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    leaf l3 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }            }            container c {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }                container a {                    leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container a {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type]]

[2018-10-02T10:49:16.759+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538470156759] [levelValue: 800] [[
  string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container b {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    list l {                                        key l1;                                        leaf l1 {                                            type int32;                                            orchestrator:advertise onchange;                                        }                                        leaf l2 {                                            type string;                                            orchestrator:advertise onchange;                                        }                                    }                                }                            }                        }                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                                container c {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    leaf l3 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container a {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                    }    			}    		}    	}}]]

[2018-10-02T10:49:19.273+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538470159273] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[77]/b/c/l1']]

[2018-10-02T10:50:50.320+0200] [glassfish 4.1] [INFO] [] [org.eclipse.persistence.session./file:/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/applications/ConnectionModule/WEB-INF/classes/_com.mycompany_frogsssa_war_1.0-SNAPSHOTPU.connection] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538470250320] [levelValue: 800] [[
  /file:/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/applications/ConnectionModule/WEB-INF/classes/_com.mycompany_frogsssa_war_1.0-SNAPSHOTPU logout successful]]

[2018-10-02T10:50:50.330+0200] [glassfish 4.1] [SEVERE] [] [javax.enterprise.web.util] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538470250330] [levelValue: 1000] [[
  The web application [/ConnectionModule-1.0-SNAPSHOT] created a ThreadLocal with key of type [java.lang.ThreadLocal] (value [java.lang.ThreadLocal@51481bbc]) and a value of type [zmq.ZMQ.PollSelector] (value [zmq.ZMQ$PollSelector@294a3a91]) but failed to remove it when the web application was stopped. Threads are going to be renewed over time to try and avoid a probable memory leak.]]

[2018-10-02T10:50:52.815+0200] [glassfish 4.1] [INFO] [NCLS-CORE-00092] [javax.enterprise.system.core] [tid: _ThreadID=457 _ThreadName=Thread-131] [timeMillis: 1538470252815] [levelValue: 800] [[
  Server shutdown initiated]]

[2018-10-02T10:50:52.827+0200] [glassfish 4.1] [INFO] [NCLS-BOOTSTRAP-00028] [javax.enterprise.bootstrap] [tid: _ThreadID=457 _ThreadName=Thread-131] [timeMillis: 1538470252827] [levelValue: 800] [[
  Unregistered com.sun.enterprise.glassfish.bootstrap.osgi.EmbeddedOSGiGlassFishImpl@7c3ebc6b from service registry.]]

[2018-10-02T10:50:52.827+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=457 _ThreadName=Thread-8] [timeMillis: 1538470252827] [levelValue: 800] [[
  FileMonitoring shutdown]]

[2018-10-02T10:50:52.830+0200] [glassfish 4.1] [INFO] [NCLS-JMX-00002] [javax.enterprise.system.jmx] [tid: _ThreadID=457 _ThreadName=Thread-131] [timeMillis: 1538470252830] [levelValue: 800] [[
  JMXStartupService: Stopped JMXConnectorServer: null]]

[2018-10-02T10:50:52.830+0200] [glassfish 4.1] [INFO] [NCLS-JMX-00001] [javax.enterprise.system.jmx] [tid: _ThreadID=457 _ThreadName=Thread-131] [timeMillis: 1538470252830] [levelValue: 800] [[
  JMXStartupService and JMXConnectors have been shut down.]]

[2018-10-02T10:50:52.858+0200] [glassfish 4.1] [SEVERE] [] [com.mycompany.frogsssa.service.ConnectionModule] [tid: _ThreadID=32 _ThreadName=http-listener-1(5)] [timeMillis: 1538470252858] [levelValue: 1000] [[
  
java.lang.InterruptedException
	at java.lang.Object.wait(Native Method)
	at java.lang.Object.wait(Object.java:502)
	at com.mycompany.frogsssa.service.ConnectionModule.getValue(ConnectionModule.java:127)
	at com.mycompany.frogsssa.service.serviceLayerService.getResources(serviceLayerService.java:102)
	at sun.reflect.GeneratedMethodAccessor51.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory$1.invoke(ResourceMethodInvocationHandlerFactory.java:81)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:144)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:161)
	at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:160)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:99)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:389)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:347)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:102)
	at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:309)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:315)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:297)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:267)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139)
	at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:460)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:386)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:334)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:221)
	at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1682)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:318)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:160)
	at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:734)
	at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:673)
	at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:99)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:174)
	at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:416)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:283)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:283)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:200)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:132)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:111)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:536)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571)
	at java.lang.Thread.run(Thread.java:748)
]]

[2018-10-02T10:50:52.863+0200] [glassfish 4.1] [SEVERE] [] [com.mycompany.frogsssa.service.ConnectionModule] [tid: _ThreadID=28 _ThreadName=http-listener-1(1)] [timeMillis: 1538470252863] [levelValue: 1000] [[
  
java.lang.InterruptedException
	at java.lang.Object.wait(Native Method)
	at java.lang.Object.wait(Object.java:502)
	at com.mycompany.frogsssa.service.ConnectionModule.getValue(ConnectionModule.java:127)
	at com.mycompany.frogsssa.service.serviceLayerService.getResources(serviceLayerService.java:102)
	at sun.reflect.GeneratedMethodAccessor51.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory$1.invoke(ResourceMethodInvocationHandlerFactory.java:81)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:144)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:161)
	at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:160)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:99)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:389)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:347)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:102)
	at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:309)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:315)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:297)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:267)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139)
	at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:460)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:386)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:334)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:221)
	at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1682)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:318)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:160)
	at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:734)
	at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:673)
	at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:99)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:174)
	at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:416)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:283)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:283)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:200)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:132)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:111)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:536)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571)
	at java.lang.Thread.run(Thread.java:748)
]]

[2018-10-02T10:50:52.864+0200] [glassfish 4.1] [SEVERE] [] [com.mycompany.frogsssa.service.ConnectionModule] [tid: _ThreadID=29 _ThreadName=http-listener-1(2)] [timeMillis: 1538470252864] [levelValue: 1000] [[
  
java.lang.InterruptedException
	at java.lang.Object.wait(Native Method)
	at java.lang.Object.wait(Object.java:502)
	at com.mycompany.frogsssa.service.ConnectionModule.getValue(ConnectionModule.java:127)
	at com.mycompany.frogsssa.service.serviceLayerService.getResources(serviceLayerService.java:102)
	at sun.reflect.GeneratedMethodAccessor51.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory$1.invoke(ResourceMethodInvocationHandlerFactory.java:81)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:144)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:161)
	at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:160)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:99)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:389)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:347)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:102)
	at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:309)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:315)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:297)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:267)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139)
	at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:460)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:386)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:334)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:221)
	at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1682)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:318)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:160)
	at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:734)
	at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:673)
	at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:99)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:174)
	at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:416)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:283)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:283)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:200)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:132)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:111)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:536)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571)
	at java.lang.Thread.run(Thread.java:748)
]]

[2018-10-02T10:50:52.865+0200] [glassfish 4.1] [SEVERE] [] [com.mycompany.frogsssa.service.ConnectionModule] [tid: _ThreadID=30 _ThreadName=http-listener-1(3)] [timeMillis: 1538470252865] [levelValue: 1000] [[
  
java.lang.InterruptedException
	at java.lang.Object.wait(Native Method)
	at java.lang.Object.wait(Object.java:502)
	at com.mycompany.frogsssa.service.ConnectionModule.getValue(ConnectionModule.java:127)
	at com.mycompany.frogsssa.service.serviceLayerService.getResources(serviceLayerService.java:102)
	at sun.reflect.GeneratedMethodAccessor51.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory$1.invoke(ResourceMethodInvocationHandlerFactory.java:81)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:144)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:161)
	at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:160)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:99)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:389)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:347)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:102)
	at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:309)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:315)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:297)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:267)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139)
	at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:460)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:386)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:334)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:221)
	at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1682)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:318)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:160)
	at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:734)
	at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:673)
	at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:99)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:174)
	at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:416)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:283)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:283)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:200)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:132)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:111)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:536)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571)
	at java.lang.Thread.run(Thread.java:748)
]]

[2018-10-02T10:50:52.865+0200] [glassfish 4.1] [SEVERE] [] [com.mycompany.frogsssa.service.ConnectionModule] [tid: _ThreadID=31 _ThreadName=http-listener-1(4)] [timeMillis: 1538470252865] [levelValue: 1000] [[
  
java.lang.InterruptedException
	at java.lang.Object.wait(Native Method)
	at java.lang.Object.wait(Object.java:502)
	at com.mycompany.frogsssa.service.ConnectionModule.getValue(ConnectionModule.java:127)
	at com.mycompany.frogsssa.service.serviceLayerService.getResources(serviceLayerService.java:102)
	at sun.reflect.GeneratedMethodAccessor51.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory$1.invoke(ResourceMethodInvocationHandlerFactory.java:81)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:144)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:161)
	at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:160)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:99)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:389)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:347)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:102)
	at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:309)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:315)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:297)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:267)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139)
	at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:460)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:386)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:334)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:221)
	at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1682)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:318)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:160)
	at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:734)
	at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:673)
	at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:99)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:174)
	at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:416)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:283)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:283)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:200)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:132)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:111)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:536)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571)
	at java.lang.Thread.run(Thread.java:748)
]]

[2018-10-02T10:50:52.867+0200] [glassfish 4.1] [WARNING] [] [javax.enterprise.web] [tid: _ThreadID=30 _ThreadName=http-listener-1(3)] [timeMillis: 1538470252867] [levelValue: 900] [[
  StandardWrapperValve[com.mycompany.frogsssa.service.ApplicationConfig]: Servlet.service() for servlet com.mycompany.frogsssa.service.ApplicationConfig threw exception
java.lang.IllegalStateException: ServiceLocatorImpl(__HK2_Generated_3,5,1057333671) has been shut down
	at org.jvnet.hk2.internal.ServiceLocatorImpl.checkState(ServiceLocatorImpl.java:2270)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandleImpl(ServiceLocatorImpl.java:639)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandle(ServiceLocatorImpl.java:632)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandle(ServiceLocatorImpl.java:650)
	at org.jvnet.hk2.internal.FactoryCreator.getFactoryHandle(FactoryCreator.java:103)
	at org.jvnet.hk2.internal.FactoryCreator.dispose(FactoryCreator.java:173)
	at org.jvnet.hk2.internal.SystemDescriptor.dispose(SystemDescriptor.java:526)
	at org.glassfish.jersey.process.internal.RequestScope$Instance.remove(RequestScope.java:532)
	at org.glassfish.jersey.process.internal.RequestScope$Instance.release(RequestScope.java:549)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:319)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139)
	at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:460)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:386)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:334)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:221)
	at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1682)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:318)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:160)
	at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:734)
	at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:673)
	at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:99)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:174)
	at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:416)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:283)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:283)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:200)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:132)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:111)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:536)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571)
	at java.lang.Thread.run(Thread.java:748)
]]

[2018-10-02T10:50:52.867+0200] [glassfish 4.1] [WARNING] [] [javax.enterprise.web] [tid: _ThreadID=31 _ThreadName=http-listener-1(4)] [timeMillis: 1538470252867] [levelValue: 900] [[
  StandardWrapperValve[com.mycompany.frogsssa.service.ApplicationConfig]: Servlet.service() for servlet com.mycompany.frogsssa.service.ApplicationConfig threw exception
java.lang.IllegalStateException: ServiceLocatorImpl(__HK2_Generated_3,5,1057333671) has been shut down
	at org.jvnet.hk2.internal.ServiceLocatorImpl.checkState(ServiceLocatorImpl.java:2270)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandleImpl(ServiceLocatorImpl.java:639)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandle(ServiceLocatorImpl.java:632)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandle(ServiceLocatorImpl.java:650)
	at org.jvnet.hk2.internal.FactoryCreator.getFactoryHandle(FactoryCreator.java:103)
	at org.jvnet.hk2.internal.FactoryCreator.dispose(FactoryCreator.java:173)
	at org.jvnet.hk2.internal.SystemDescriptor.dispose(SystemDescriptor.java:526)
	at org.glassfish.jersey.process.internal.RequestScope$Instance.remove(RequestScope.java:532)
	at org.glassfish.jersey.process.internal.RequestScope$Instance.release(RequestScope.java:549)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:319)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139)
	at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:460)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:386)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:334)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:221)
	at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1682)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:318)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:160)
	at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:734)
	at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:673)
	at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:99)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:174)
	at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:416)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:283)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:283)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:200)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:132)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:111)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:536)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571)
	at java.lang.Thread.run(Thread.java:748)
]]

[2018-10-02T10:50:52.868+0200] [glassfish 4.1] [WARNING] [] [javax.enterprise.web] [tid: _ThreadID=28 _ThreadName=http-listener-1(1)] [timeMillis: 1538470252868] [levelValue: 900] [[
  StandardWrapperValve[com.mycompany.frogsssa.service.ApplicationConfig]: Servlet.service() for servlet com.mycompany.frogsssa.service.ApplicationConfig threw exception
java.lang.IllegalStateException: ServiceLocatorImpl(__HK2_Generated_3,5,1057333671) has been shut down
	at org.jvnet.hk2.internal.ServiceLocatorImpl.checkState(ServiceLocatorImpl.java:2270)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandleImpl(ServiceLocatorImpl.java:639)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandle(ServiceLocatorImpl.java:632)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandle(ServiceLocatorImpl.java:650)
	at org.jvnet.hk2.internal.FactoryCreator.getFactoryHandle(FactoryCreator.java:103)
	at org.jvnet.hk2.internal.FactoryCreator.dispose(FactoryCreator.java:173)
	at org.jvnet.hk2.internal.SystemDescriptor.dispose(SystemDescriptor.java:526)
	at org.glassfish.jersey.process.internal.RequestScope$Instance.remove(RequestScope.java:532)
	at org.glassfish.jersey.process.internal.RequestScope$Instance.release(RequestScope.java:549)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:319)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139)
	at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:460)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:386)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:334)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:221)
	at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1682)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:318)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:160)
	at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:734)
	at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:673)
	at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:99)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:174)
	at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:416)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:283)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:283)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:200)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:132)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:111)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:536)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571)
	at java.lang.Thread.run(Thread.java:748)
]]

[2018-10-02T10:50:52.868+0200] [glassfish 4.1] [WARNING] [] [javax.enterprise.web] [tid: _ThreadID=32 _ThreadName=http-listener-1(5)] [timeMillis: 1538470252868] [levelValue: 900] [[
  StandardWrapperValve[com.mycompany.frogsssa.service.ApplicationConfig]: Servlet.service() for servlet com.mycompany.frogsssa.service.ApplicationConfig threw exception
java.lang.IllegalStateException: ServiceLocatorImpl(__HK2_Generated_3,5,1057333671) has been shut down
	at org.jvnet.hk2.internal.ServiceLocatorImpl.checkState(ServiceLocatorImpl.java:2270)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandleImpl(ServiceLocatorImpl.java:639)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandle(ServiceLocatorImpl.java:632)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandle(ServiceLocatorImpl.java:650)
	at org.jvnet.hk2.internal.FactoryCreator.getFactoryHandle(FactoryCreator.java:103)
	at org.jvnet.hk2.internal.FactoryCreator.dispose(FactoryCreator.java:173)
	at org.jvnet.hk2.internal.SystemDescriptor.dispose(SystemDescriptor.java:526)
	at org.glassfish.jersey.process.internal.RequestScope$Instance.remove(RequestScope.java:532)
	at org.glassfish.jersey.process.internal.RequestScope$Instance.release(RequestScope.java:549)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:319)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139)
	at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:460)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:386)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:334)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:221)
	at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1682)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:318)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:160)
	at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:734)
	at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:673)
	at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:99)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:174)
	at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:416)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:283)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:283)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:200)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:132)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:111)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:536)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571)
	at java.lang.Thread.run(Thread.java:748)
]]

[2018-10-02T10:50:52.885+0200] [glassfish 4.1] [WARNING] [] [javax.enterprise.web] [tid: _ThreadID=29 _ThreadName=http-listener-1(2)] [timeMillis: 1538470252885] [levelValue: 900] [[
  StandardWrapperValve[com.mycompany.frogsssa.service.ApplicationConfig]: Servlet.service() for servlet com.mycompany.frogsssa.service.ApplicationConfig threw exception
java.lang.IllegalStateException: ServiceLocatorImpl(__HK2_Generated_3,5,1057333671) has been shut down
	at org.jvnet.hk2.internal.ServiceLocatorImpl.checkState(ServiceLocatorImpl.java:2270)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandleImpl(ServiceLocatorImpl.java:639)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandle(ServiceLocatorImpl.java:632)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandle(ServiceLocatorImpl.java:650)
	at org.jvnet.hk2.internal.FactoryCreator.getFactoryHandle(FactoryCreator.java:103)
	at org.jvnet.hk2.internal.FactoryCreator.dispose(FactoryCreator.java:173)
	at org.jvnet.hk2.internal.SystemDescriptor.dispose(SystemDescriptor.java:526)
	at org.glassfish.jersey.process.internal.RequestScope$Instance.remove(RequestScope.java:532)
	at org.glassfish.jersey.process.internal.RequestScope$Instance.release(RequestScope.java:549)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:319)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139)
	at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:460)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:386)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:334)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:221)
	at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1682)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:318)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:160)
	at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:734)
	at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:673)
	at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:99)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:174)
	at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:416)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:283)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:283)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:200)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:132)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:111)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:536)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571)
	at java.lang.Thread.run(Thread.java:748)
]]

[2018-10-02T10:50:52.909+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=462 _ThreadName=Thread-8] [timeMillis: 1538470252909] [levelValue: 800] [[
  JdbcRuntimeExtension,  getAllSystemRAResourcesAndPools = [GlassFishConfigBean.org.glassfish.jdbc.config.JdbcResource, GlassFishConfigBean.org.glassfish.jdbc.config.JdbcResource, GlassFishConfigBean.org.glassfish.jdbc.config.JdbcConnectionPool, GlassFishConfigBean.org.glassfish.jdbc.config.JdbcConnectionPool]]]

[2018-10-02T10:50:52.915+0200] [glassfish 4.1] [INFO] [ra.stop-successful] [javax.enterprise.resource.resourceadapter.com.sun.enterprise.connectors.service] [tid: _ThreadID=468 _ThreadName=Thread-141] [timeMillis: 1538470252915] [levelValue: 800] [[
  RAR7094: __ds_jdbc_ra shutdown successful.]]

[2018-10-02T10:50:52.916+0200] [glassfish 4.1] [INFO] [] [javax.resourceadapter.mqjmsra.lifecycle] [tid: _ThreadID=471 _ThreadName=Thread-144] [timeMillis: 1538470252916] [levelValue: 800] [[
  MQJMSRA_RA1101: GlassFish MQ JMS Resource Adapter stopping...]]

[2018-10-02T10:50:55.431+0200] [glassfish 4.1] [INFO] [] [javax.resourceadapter.mqjmsra.lifecycle] [tid: _ThreadID=471 _ThreadName=Thread-144] [timeMillis: 1538470255431] [levelValue: 800] [[
  MQJMSRA_RA1101: GlassFish MQ JMS Resource Adapter stopped.]]

[2018-10-02T10:50:55.432+0200] [glassfish 4.1] [INFO] [ra.stop-successful] [javax.enterprise.resource.resourceadapter.com.sun.enterprise.connectors.service] [tid: _ThreadID=469 _ThreadName=Thread-142] [timeMillis: 1538470255432] [levelValue: 800] [[
  RAR7094: jmsra shutdown successful.]]

[2018-10-02T10:51:01.031+0200] [] [INFO] [NCLS-GFLAUNCHER-00005] [javax.enterprise.launcher] [tid: _ThreadID=1 _ThreadName=main] [timeMillis: 1538470261031] [levelValue: 800] [[
  JVM invocation command line:
/usr/lib/jvm/java-8-oracle/bin/java
-cp
/home/gabriele/Applications/glassfish4/glassfish/modules/glassfish.jar
-XX:+UnlockDiagnosticVMOptions
-XX:NewRatio=2
-XX:MaxPermSize=192m
-Xmx512m
-javaagent:/home/gabriele/Applications/glassfish4/glassfish/lib/monitor/flashlight-agent.jar
-client
-Djavax.xml.accessExternalSchema=all
-Djavax.net.ssl.trustStore=/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/config/cacerts.jks
-Djdk.corba.allowOutputStreamSubclass=true
-Dfelix.fileinstall.dir=/home/gabriele/Applications/glassfish4/glassfish/modules/autostart/
-Dorg.glassfish.additionalOSGiBundlesToStart=org.apache.felix.shell,org.apache.felix.gogo.runtime,org.apache.felix.gogo.shell,org.apache.felix.gogo.command,org.apache.felix.shell.remote,org.apache.felix.fileinstall
-Dcom.sun.aas.installRoot=/home/gabriele/Applications/glassfish4/glassfish
-Dfelix.fileinstall.poll=5000
-Djava.endorsed.dirs=/home/gabriele/Applications/glassfish4/glassfish/modules/endorsed:/home/gabriele/Applications/glassfish4/glassfish/lib/endorsed
-Djava.security.policy=/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/config/server.policy
-Dosgi.shell.telnet.maxconn=1
-Dfelix.fileinstall.bundles.startTransient=true
-Dcom.sun.enterprise.config.config_environment_factory_class=com.sun.enterprise.config.serverbeans.AppserverConfigEnvironmentFactory
-Dfelix.fileinstall.log.level=2
-Djavax.net.ssl.keyStore=/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/config/keystore.jks
-Djava.security.auth.login.config=/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/config/login.conf
-Dfelix.fileinstall.disableConfigSave=false
-Dfelix.fileinstall.bundles.new.start=true
-Dcom.sun.aas.instanceRoot=/home/gabriele/Applications/glassfish4/glassfish/domains/domain1
-Dosgi.shell.telnet.port=6666
-Dgosh.args=--nointeractive
-Dcom.sun.enterprise.security.httpsOutboundKeyAlias=s1as
-Dosgi.shell.telnet.ip=127.0.0.1
-DANTLR_USE_DIRECT_CLASS_LOADING=true
-Djava.awt.headless=true
-Dcom.ctc.wstx.returnNullForDefaultNamespace=true
-Djava.ext.dirs=/usr/lib/jvm/java-8-oracle/lib/ext:/usr/lib/jvm/java-8-oracle/jre/lib/ext:/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/lib/ext
-Djdbc.drivers=org.apache.derby.jdbc.ClientDriver
-Djava.library.path=/home/gabriele/Applications/glassfish4/glassfish/lib:/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib
com.sun.enterprise.glassfish.bootstrap.ASMain
-upgrade
false
-domaindir
/home/gabriele/Applications/glassfish4/glassfish/domains/domain1
-read-stdin
true
-asadmin-args
--host,,,localhost,,,--port,,,4848,,,--secure=false,,,--terse=false,,,--echo=false,,,--interactive=true,,,start-domain,,,--verbose=false,,,--watchdog=false,,,--debug=false,,,--domaindir,,,/home/gabriele/Applications/glassfish4/glassfish/domains,,,domain1
-domainname
domain1
-instancename
server
-type
DAS
-verbose
false
-asadmin-classpath
/home/gabriele/Applications/glassfish4/glassfish/lib/client/appserver-cli.jar
-debug
false
-asadmin-classname
com.sun.enterprise.admin.cli.AdminMain]]

[2018-10-02T10:51:02.756+0200] [glassfish 4.1] [INFO] [NCLS-LOGGING-00009] [javax.enterprise.logging] [tid: _ThreadID=17 _ThreadName=RunLevelControllerThread-1538470262694] [timeMillis: 1538470262756] [levelValue: 800] [[
  Running GlassFish Version: GlassFish Server Open Source Edition  4.1.1  (build 3)]]

[2018-10-02T10:51:02.758+0200] [glassfish 4.1] [INFO] [NCLS-LOGGING-00010] [javax.enterprise.logging] [tid: _ThreadID=17 _ThreadName=RunLevelControllerThread-1538470262694] [timeMillis: 1538470262758] [levelValue: 800] [[
  Server log file is using Formatter class: com.sun.enterprise.server.logging.ODLLogFormatter]]

[2018-10-02T10:51:02.842+0200] [glassfish 4.1] [INFO] [NCLS-SECURITY-01115] [javax.enterprise.system.core.security] [tid: _ThreadID=16 _ThreadName=RunLevelControllerThread-1538470262693] [timeMillis: 1538470262842] [levelValue: 800] [[
  Realm [admin-realm] of classtype [com.sun.enterprise.security.auth.realm.file.FileRealm] successfully created.]]

[2018-10-02T10:51:02.918+0200] [glassfish 4.1] [INFO] [NCLS-SECURITY-01115] [javax.enterprise.system.core.security] [tid: _ThreadID=16 _ThreadName=RunLevelControllerThread-1538470262693] [timeMillis: 1538470262918] [levelValue: 800] [[
  Realm [file] of classtype [com.sun.enterprise.security.auth.realm.file.FileRealm] successfully created.]]

[2018-10-02T10:51:02.920+0200] [glassfish 4.1] [INFO] [NCLS-SECURITY-01115] [javax.enterprise.system.core.security] [tid: _ThreadID=16 _ThreadName=RunLevelControllerThread-1538470262693] [timeMillis: 1538470262920] [levelValue: 800] [[
  Realm [certificate] of classtype [com.sun.enterprise.security.auth.realm.certificate.CertificateRealm] successfully created.]]

[2018-10-02T10:51:03.008+0200] [glassfish 4.1] [INFO] [SEC-SVCS-00100] [javax.enterprise.security.services] [tid: _ThreadID=19 _ThreadName=RunLevelControllerThread-1538470262699] [timeMillis: 1538470263008] [levelValue: 800] [[
  Authorization Service has successfully initialized.]]

[2018-10-02T10:51:03.131+0200] [glassfish 4.1] [INFO] [] [org.glassfish.ha.store.spi.BackingStoreFactoryRegistry] [tid: _ThreadID=19 _ThreadName=RunLevelControllerThread-1538470262699] [timeMillis: 1538470263131] [levelValue: 800] [[
  Registered org.glassfish.ha.store.adapter.cache.ShoalBackingStoreProxy for persistence-type = replicated in BackingStoreFactoryRegistry]]

[2018-10-02T10:51:03.204+0200] [glassfish 4.1] [WARNING] [] [org.glassfish.grizzly.config.Utils] [tid: _ThreadID=18 _ThreadName=RunLevelControllerThread-1538470262699] [timeMillis: 1538470263204] [levelValue: 900] [[
  Instance could not be initialized. Class=interface org.glassfish.grizzly.http.server.AddOn, name=http-listener-1, realClassName=org.glassfish.grizzly.http2.Http2AddOn]]

[2018-10-02T10:51:03.233+0200] [glassfish 4.1] [INFO] [NCLS-CORE-00087] [javax.enterprise.system.core] [tid: _ThreadID=18 _ThreadName=RunLevelControllerThread-1538470262699] [timeMillis: 1538470263233] [levelValue: 800] [[
  Grizzly Framework 2.3.23 started in: 11ms - bound to [/0.0.0.0:9090]]]

[2018-10-02T10:51:03.244+0200] [glassfish 4.1] [WARNING] [] [org.glassfish.grizzly.config.Utils] [tid: _ThreadID=18 _ThreadName=RunLevelControllerThread-1538470262699] [timeMillis: 1538470263244] [levelValue: 900] [[
  Instance could not be initialized. Class=interface org.glassfish.grizzly.http.server.AddOn, name=http-listener-2, realClassName=org.glassfish.grizzly.http2.Http2AddOn]]

[2018-10-02T10:51:03.251+0200] [glassfish 4.1] [INFO] [NCLS-CORE-00087] [javax.enterprise.system.core] [tid: _ThreadID=18 _ThreadName=RunLevelControllerThread-1538470262699] [timeMillis: 1538470263251] [levelValue: 800] [[
  Grizzly Framework 2.3.23 started in: 4ms - bound to [/0.0.0.0:8181]]]

[2018-10-02T10:51:03.253+0200] [glassfish 4.1] [WARNING] [] [org.glassfish.grizzly.config.Utils] [tid: _ThreadID=18 _ThreadName=RunLevelControllerThread-1538470262699] [timeMillis: 1538470263253] [levelValue: 900] [[
  Instance could not be initialized. Class=interface org.glassfish.grizzly.http.server.AddOn, name=admin-listener, realClassName=org.glassfish.grizzly.http2.Http2AddOn]]

[2018-10-02T10:51:03.257+0200] [glassfish 4.1] [INFO] [NCLS-CORE-00087] [javax.enterprise.system.core] [tid: _ThreadID=18 _ThreadName=RunLevelControllerThread-1538470262699] [timeMillis: 1538470263257] [levelValue: 800] [[
  Grizzly Framework 2.3.23 started in: 1ms - bound to [/0.0.0.0:4848]]]

[2018-10-02T10:51:03.287+0200] [glassfish 4.1] [INFO] [NCLS-CORE-00087] [javax.enterprise.system.core] [tid: _ThreadID=19 _ThreadName=RunLevelControllerThread-1538470262699] [timeMillis: 1538470263287] [levelValue: 800] [[
  Grizzly Framework 2.3.23 started in: 1ms - bound to [/0.0.0.0:3700]]]

[2018-10-02T10:51:03.288+0200] [glassfish 4.1] [INFO] [NCLS-CORE-00017] [javax.enterprise.system.core] [tid: _ThreadID=1 _ThreadName=main] [timeMillis: 1538470263288] [levelValue: 800] [[
  GlassFish Server Open Source Edition  4.1.1  (3) startup time : Felix (1.526ms), startup services(601ms), total(2.127ms)]]

[2018-10-02T10:51:03.351+0200] [glassfish 4.1] [INFO] [jts.startup_msg] [javax.enterprise.system.core.transaction.com.sun.jts.CosTransactions] [tid: _ThreadID=18 _ThreadName=RunLevelControllerThread-1538470262699] [timeMillis: 1538470263351] [levelValue: 800] [[
  JTS5014: Recoverable JTS instance, serverId = [100]]]

[2018-10-02T10:51:03.414+0200] [glassfish 4.1] [INFO] [NCLS-CORE-00087] [javax.enterprise.system.core] [tid: _ThreadID=16 _ThreadName=RunLevelControllerThread-1538470262693] [timeMillis: 1538470263414] [levelValue: 800] [[
  Grizzly Framework 2.3.23 started in: 9ms - bound to [/0.0.0.0:7676]]]

[2018-10-02T10:51:03.415+0200] [glassfish 4.1] [INFO] [NCLS-BOOTSTRAP-00027] [javax.enterprise.bootstrap] [tid: _ThreadID=1 _ThreadName=main] [timeMillis: 1538470263415] [levelValue: 800] [[
  Registered com.sun.enterprise.glassfish.bootstrap.osgi.EmbeddedOSGiGlassFishImpl@1cb19dba as OSGi service registration: org.apache.felix.framework.ServiceRegistrationImpl@9255c05.]]

[2018-10-02T10:51:03.430+0200] [glassfish 4.1] [INFO] [NCLS-JMX-00005] [javax.enterprise.system.jmx] [tid: _ThreadID=53 _ThreadName=Thread-13] [timeMillis: 1538470263430] [levelValue: 800] [[
  JMXStartupService has started JMXConnector on JMXService URL service:jmx:rmi://debian-gabriele-hp:8686/jndi/rmi://debian-gabriele-hp:8686/jmxrmi]]

[2018-10-02T10:51:08.923+0200] [glassfish 4.1] [INFO] [NCLS-REST-00001] [javax.enterprise.admin.rest] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470268923] [levelValue: 800] [[
  Listening to REST requests at context: /command/domain.]]

[2018-10-02T10:51:08.989+0200] [glassfish 4.1] [INFO] [] [org.hibernate.validator.internal.util.Version] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470268989] [levelValue: 800] [[
  HV000001: Hibernate Validator 5.1.2.Final]]

[2018-10-02T10:51:09.601+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470269601] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T10:51:09.994+0200] [glassfish 4.1] [SEVERE] [NCLS-SECURITY-05054] [javax.enterprise.system.security.ssl] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470269994] [levelValue: 1000] [[
  The SSL certificate has expired: [
[
  Version: V3
  Subject: OU=Equifax Secure Certificate Authority, O=Equifax, C=US
  Signature Algorithm: SHA1withRSA, OID = 1.2.840.113549.1.1.5

  Key:  Sun RSA public key, 1024 bits
  modulus: 135786214035069526348186531221551781468391756233528066061569654028671100866720352830303278016129003918213826297308054231261658522889438712013757624116391437358730449661353175673177742307421061340003741057138887918110217006515773038453829253517076741780039735595086881329494037450587568122088113584549069375417
  public exponent: 65537
  Validity: [From: Sat Aug 22 18:41:51 CEST 1998,
               To: Wed Aug 22 18:41:51 CEST 2018]
  Issuer: OU=Equifax Secure Certificate Authority, O=Equifax, C=US
  SerialNumber: [    35def4cf]

Certificate Extensions: 7
[1]: ObjectId: 1.2.840.113533.7.65.0 Criticality=false
Extension unknown: DER encoded OCTET string =
0000: 04 0D 30 0B 1B 05 56 33   2E 30 63 03 02 06 C0     ..0...V3.0c....


[2]: ObjectId: 2.5.29.35 Criticality=false
AuthorityKeyIdentifier [
KeyIdentifier [
0000: 48 E6 68 F9 2B D2 B2 95   D7 47 D8 23 20 10 4F 33  H.h.+....G.# .O3
0010: 98 90 9F D4                                        ....
]
]

[3]: ObjectId: 2.5.29.19 Criticality=false
BasicConstraints:[
  CA:true
  PathLen:2147483647
]

[4]: ObjectId: 2.5.29.31 Criticality=false
CRLDistributionPoints [
  [DistributionPoint:
     [CN=CRL1, OU=Equifax Secure Certificate Authority, O=Equifax, C=US]
]]

[5]: ObjectId: 2.5.29.15 Criticality=false
KeyUsage [
  Key_CertSign
  Crl_Sign
]

[6]: ObjectId: 2.5.29.16 Criticality=false
PrivateKeyUsage: [
To: Wed Aug 22 18:41:51 CEST 2018]

[7]: ObjectId: 2.5.29.14 Criticality=false
SubjectKeyIdentifier [
KeyIdentifier [
0000: 48 E6 68 F9 2B D2 B2 95   D7 47 D8 23 20 10 4F 33  H.h.+....G.# .O3
0010: 98 90 9F D4                                        ....
]
]

]
  Algorithm: [SHA1withRSA]
  Signature:
0000: 58 CE 29 EA FC F7 DE B5   CE 02 B9 17 B5 85 D1 B9  X.).............
0010: E3 E0 95 CC 25 31 0D 00   A6 92 6E 7F B6 92 63 9E  ....%1....n...c.
0020: 50 95 D1 9A 6F E4 11 DE   63 85 6E 98 EE A8 FF 5A  P...o...c.n....Z
0030: C8 D3 55 B2 66 71 57 DE   C0 21 EB 3D 2A A7 23 49  ..U.fqW..!.=*.#I
0040: 01 04 86 42 7B FC EE 7F   A2 16 52 B5 67 67 D3 40  ...B......R.gg.@
0050: DB 3B 26 58 B2 28 77 3D   AE 14 77 61 D6 FA 2A 66  .;&X.(w=..wa..*f
0060: 27 A0 0D FA A7 73 5C EA   70 F1 94 21 65 44 5F FA  '....s\.p..!eD_.
0070: FC EF 29 68 A9 A2 87 79   EF 79 EF 4F AC 07 77 38  ..)h...y.y.O..w8

]]]

[2018-10-02T10:51:10.000+0200] [glassfish 4.1] [SEVERE] [NCLS-SECURITY-05054] [javax.enterprise.system.security.ssl] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470270000] [levelValue: 1000] [[
  The SSL certificate has expired: [
[
  Version: V1
  Subject: CN=GTE CyberTrust Global Root, OU="GTE CyberTrust Solutions, Inc.", O=GTE Corporation, C=US
  Signature Algorithm: MD5withRSA, OID = 1.2.840.113549.1.1.4

  Key:  Sun RSA public key, 1024 bits
  modulus: 104674226241368487598835828377585222181792546532354327780214427055917513664449991602803276678454577364904540367827644455215731003386468752240014232146814457308076052176227490263634768927290191763858631579785604655038492469791381988347440106477066514204303723029602991655085187937840556671697442212352844587673
  public exponent: 65537
  Validity: [From: Thu Aug 13 02:29:00 CEST 1998,
               To: Tue Aug 14 01:59:00 CEST 2018]
  Issuer: CN=GTE CyberTrust Global Root, OU="GTE CyberTrust Solutions, Inc.", O=GTE Corporation, C=US
  SerialNumber: [    01a5]

]
  Algorithm: [MD5withRSA]
  Signature:
0000: 6D EB 1B 09 E9 5E D9 51   DB 67 22 61 A4 2A 3C 48  m....^.Q.g"a.*<H
0010: 77 E3 A0 7C A6 DE 73 A2   14 03 85 3D FB AB 0E 30  w.....s....=...0
0020: C5 83 16 33 81 13 08 9E   7B 34 4E DF 40 C8 74 D7  ...3.....4N.@.t.
0030: B9 7D DC F4 76 55 7D 9B   63 54 18 E9 F0 EA F3 5C  ....vU..cT.....\
0040: B1 D9 8B 42 1E B9 C0 95   4E BA FA D5 E2 7C F5 68  ...B....N......h
0050: 61 BF 8E EC 05 97 5F 5B   B0 D7 A3 85 34 C4 24 A7  a....._[....4.$.
0060: 0D 0F 95 93 EF CB 94 D8   9E 1F 9D 5C 85 6D C7 AA  ...........\.m..
0070: AE 4F 1F 22 B5 CD 95 AD   BA A7 CC F9 AB 0B 7A 7F  .O."..........z.

]]]

[2018-10-02T10:51:10.011+0200] [glassfish 4.1] [INFO] [NCLS-SECURITY-01002] [javax.enterprise.system.core.security] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470270011] [levelValue: 800] [[
  Java security manager is disabled.]]

[2018-10-02T10:51:10.011+0200] [glassfish 4.1] [INFO] [NCLS-SECURITY-01010] [javax.enterprise.system.core.security] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470270011] [levelValue: 800] [[
  Entering Security Startup Service.]]

[2018-10-02T10:51:10.013+0200] [glassfish 4.1] [INFO] [NCLS-SECURITY-01143] [javax.enterprise.system.core.security] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470270013] [levelValue: 800] [[
  Loading policy provider com.sun.enterprise.security.provider.PolicyWrapper.]]

[2018-10-02T10:51:10.033+0200] [glassfish 4.1] [INFO] [NCLS-SECURITY-01011] [javax.enterprise.system.core.security] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470270033] [levelValue: 800] [[
  Security Service(s) started successfully.]]

[2018-10-02T10:51:10.151+0200] [glassfish 4.1] [INFO] [AS-WEB-GLUE-00198] [javax.enterprise.web] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470270151] [levelValue: 800] [[
  Created HTTP listener http-listener-1 on host/port 0.0.0.0:9090]]

[2018-10-02T10:51:10.155+0200] [glassfish 4.1] [INFO] [AS-WEB-GLUE-00198] [javax.enterprise.web] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470270155] [levelValue: 800] [[
  Created HTTP listener http-listener-2 on host/port 0.0.0.0:8181]]

[2018-10-02T10:51:10.157+0200] [glassfish 4.1] [INFO] [AS-WEB-GLUE-00198] [javax.enterprise.web] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470270157] [levelValue: 800] [[
  Created HTTP listener admin-listener on host/port 0.0.0.0:4848]]

[2018-10-02T10:51:10.171+0200] [glassfish 4.1] [INFO] [AS-WEB-GLUE-00200] [javax.enterprise.web] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470270171] [levelValue: 800] [[
  Created virtual server server]]

[2018-10-02T10:51:10.172+0200] [glassfish 4.1] [INFO] [AS-WEB-GLUE-00200] [javax.enterprise.web] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470270172] [levelValue: 800] [[
  Created virtual server __asadmin]]

[2018-10-02T10:51:10.306+0200] [glassfish 4.1] [INFO] [AS-WEB-CORE-00306] [javax.enterprise.web.core] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470270306] [levelValue: 800] [[
  Setting JAAS app name glassfish-web]]

[2018-10-02T10:51:10.307+0200] [glassfish 4.1] [INFO] [AS-WEB-GLUE-00201] [javax.enterprise.web] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470270307] [levelValue: 800] [[
  Virtual server server loaded default web module ]]

[2018-10-02T10:51:10.671+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470270671] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T10:51:10.767+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470270767] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T10:51:10.781+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470270781] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T10:51:10.782+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470270782] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T10:51:10.783+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470270783] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T10:51:10.783+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470270783] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T10:51:10.784+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470270784] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T10:51:10.785+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470270785] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T10:51:10.785+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470270785] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T10:51:10.786+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470270786] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T10:51:10.787+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470270787] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T10:51:10.787+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470270787] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T10:51:10.788+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470270788] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T10:51:10.788+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470270788] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T10:51:10.789+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470270789] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T10:51:10.790+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470270790] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T10:51:10.791+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470270791] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T10:51:10.791+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470270791] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T10:51:10.792+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470270792] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T10:51:10.793+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470270793] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T10:51:10.793+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470270793] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T10:51:10.794+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470270794] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T10:51:10.794+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470270794] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T10:51:10.795+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470270795] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T10:51:10.796+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470270796] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T10:51:10.796+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470270796] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T10:51:10.797+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470270797] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T10:51:10.797+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470270797] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T10:51:10.798+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470270798] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T10:51:10.799+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470270799] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T10:51:10.799+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470270799] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T10:51:10.800+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470270800] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T10:51:10.920+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.dol] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470270920] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T10:51:11.851+0200] [glassfish 4.1] [WARNING] [] [org.eclipse.persistence.default] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470271851] [levelValue: 900] [[
  
java.lang.NullPointerException
	at org.eclipse.persistence.platform.server.ServerPlatformUtils.createServerPlatform(ServerPlatformUtils.java:99)
	at org.eclipse.persistence.sessions.factories.SessionManager.init(SessionManager.java:77)
	at org.eclipse.persistence.sessions.factories.SessionManager.<clinit>(SessionManager.java:71)
	at org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl.addSessionToGlobalSessionManager(EntityManagerSetupImpl.java:907)
	at org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl.initSession(EntityManagerSetupImpl.java:2671)
	at org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl.deploy(EntityManagerSetupImpl.java:675)
	at org.eclipse.persistence.internal.jpa.EntityManagerFactoryDelegate.getAbstractSession(EntityManagerFactoryDelegate.java:205)
	at org.eclipse.persistence.internal.jpa.EntityManagerFactoryDelegate.getDatabaseSession(EntityManagerFactoryDelegate.java:183)
	at org.eclipse.persistence.internal.jpa.EntityManagerFactoryImpl.getDatabaseSession(EntityManagerFactoryImpl.java:528)
	at org.eclipse.persistence.jpa.PersistenceProvider.createContainerEntityManagerFactoryImpl(PersistenceProvider.java:385)
	at org.eclipse.persistence.jpa.PersistenceProvider.createContainerEntityManagerFactory(PersistenceProvider.java:313)
	at org.glassfish.persistence.jpa.PersistenceUnitLoader.loadPU(PersistenceUnitLoader.java:199)
	at org.glassfish.persistence.jpa.PersistenceUnitLoader.<init>(PersistenceUnitLoader.java:107)
	at org.glassfish.persistence.jpa.JPADeployer$1.visitPUD(JPADeployer.java:223)
	at org.glassfish.persistence.jpa.JPADeployer$PersistenceUnitDescriptorIterator.iteratePUDs(JPADeployer.java:510)
	at org.glassfish.persistence.jpa.JPADeployer.createEMFs(JPADeployer.java:230)
	at org.glassfish.persistence.jpa.JPADeployer.prepare(JPADeployer.java:168)
	at com.sun.enterprise.v3.server.ApplicationLifecycle.prepareModule(ApplicationLifecycle.java:925)
	at com.sun.enterprise.v3.server.ApplicationLifecycle.deploy(ApplicationLifecycle.java:434)
	at com.sun.enterprise.v3.server.ApplicationLifecycle.deploy(ApplicationLifecycle.java:219)
	at org.glassfish.deployment.admin.DeployCommand.execute(DeployCommand.java:491)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$2$1.run(CommandRunnerImpl.java:539)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$2$1.run(CommandRunnerImpl.java:535)
	at java.security.AccessController.doPrivileged(Native Method)
	at javax.security.auth.Subject.doAs(Subject.java:360)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$2.execute(CommandRunnerImpl.java:534)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$3.run(CommandRunnerImpl.java:565)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$3.run(CommandRunnerImpl.java:557)
	at java.security.AccessController.doPrivileged(Native Method)
	at javax.security.auth.Subject.doAs(Subject.java:360)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl.doCommand(CommandRunnerImpl.java:556)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl.doCommand(CommandRunnerImpl.java:1464)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl.access$1300(CommandRunnerImpl.java:109)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$ExecutionContext.execute(CommandRunnerImpl.java:1846)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$ExecutionContext.execute(CommandRunnerImpl.java:1722)
	at org.glassfish.admin.rest.resources.admin.CommandResource.executeCommand(CommandResource.java:404)
	at org.glassfish.admin.rest.resources.admin.CommandResource.execCommandSimpInMultOut(CommandResource.java:234)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory$1.invoke(ResourceMethodInvocationHandlerFactory.java:81)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:144)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:161)
	at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:160)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:99)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:389)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:347)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:102)
	at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:309)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:315)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:297)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:267)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139)
	at org.glassfish.jersey.grizzly2.httpserver.GrizzlyHttpContainer.service(GrizzlyHttpContainer.java:375)
	at org.glassfish.admin.rest.adapter.JerseyContainerCommandService$3.service(JerseyContainerCommandService.java:173)
	at org.glassfish.admin.rest.adapter.RestAdapter.service(RestAdapter.java:179)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:283)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:200)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:132)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:111)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:536)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571)
	at java.lang.Thread.run(Thread.java:748)
]]

[2018-10-02T10:51:11.866+0200] [glassfish 4.1] [INFO] [] [org.eclipse.persistence.session./file:/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/applications/ConnectionModule/WEB-INF/classes/_com.mycompany_frogsssa_war_1.0-SNAPSHOTPU] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470271866] [levelValue: 800] [[
  EclipseLink, version: Eclipse Persistence Services - 2.6.1.v20150605-31e8258]]

[2018-10-02T10:51:12.456+0200] [glassfish 4.1] [INFO] [] [org.eclipse.persistence.session./file:/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/applications/ConnectionModule/WEB-INF/classes/_com.mycompany_frogsssa_war_1.0-SNAPSHOTPU.connection] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470272456] [levelValue: 800] [[
  /file:/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/applications/ConnectionModule/WEB-INF/classes/_com.mycompany_frogsssa_war_1.0-SNAPSHOTPU login successful]]

[2018-10-02T10:51:12.522+0200] [glassfish 4.1] [WARNING] [] [org.eclipse.persistence.session./file:/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/applications/ConnectionModule/WEB-INF/classes/_com.mycompany_frogsssa_war_1.0-SNAPSHOTPU] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470272522] [levelValue: 900] [[
  
Local Exception Stack: 
Exception [EclipseLink-4002] (Eclipse Persistence Services - 2.6.1.v20150605-31e8258): org.eclipse.persistence.exceptions.DatabaseException
Internal Exception: java.sql.SQLSyntaxErrorException: Errore di sintassi: Encountered "VALUES" at line 1, column 108.
Error Code: 30000
Call: CREATE TABLE RESOURCES (ID VARCHAR(255) NOT NULL, CORRESPONDENCE BLOB(2147483647), DATAMODEL VARCHAR(255), VALUES BLOB(2147483647), PRIMARY KEY (ID))
Query: DataModifyQuery(sql="CREATE TABLE RESOURCES (ID VARCHAR(255) NOT NULL, CORRESPONDENCE BLOB(2147483647), DATAMODEL VARCHAR(255), VALUES BLOB(2147483647), PRIMARY KEY (ID))")
	at org.eclipse.persistence.exceptions.DatabaseException.sqlException(DatabaseException.java:340)
	at org.eclipse.persistence.internal.databaseaccess.DatabaseAccessor.basicExecuteCall(DatabaseAccessor.java:684)
	at org.eclipse.persistence.internal.databaseaccess.DatabaseAccessor.executeCall(DatabaseAccessor.java:560)
	at org.eclipse.persistence.internal.sessions.AbstractSession.basicExecuteCall(AbstractSession.java:2055)
	at org.eclipse.persistence.sessions.server.ServerSession.executeCall(ServerSession.java:570)
	at org.eclipse.persistence.internal.queries.DatasourceCallQueryMechanism.executeCall(DatasourceCallQueryMechanism.java:242)
	at org.eclipse.persistence.internal.queries.DatasourceCallQueryMechanism.executeCall(DatasourceCallQueryMechanism.java:228)
	at org.eclipse.persistence.internal.queries.DatasourceCallQueryMechanism.executeNoSelectCall(DatasourceCallQueryMechanism.java:271)
	at org.eclipse.persistence.internal.queries.DatasourceCallQueryMechanism.executeNoSelect(DatasourceCallQueryMechanism.java:251)
	at org.eclipse.persistence.queries.DataModifyQuery.executeDatabaseQuery(DataModifyQuery.java:85)
	at org.eclipse.persistence.queries.DatabaseQuery.execute(DatabaseQuery.java:904)
	at org.eclipse.persistence.internal.sessions.AbstractSession.internalExecuteQuery(AbstractSession.java:3267)
	at org.eclipse.persistence.internal.sessions.AbstractSession.executeQuery(AbstractSession.java:1857)
	at org.eclipse.persistence.internal.sessions.AbstractSession.executeQuery(AbstractSession.java:1839)
	at org.eclipse.persistence.internal.sessions.AbstractSession.executeQuery(AbstractSession.java:1790)
	at org.eclipse.persistence.internal.sessions.AbstractSession.priviledgedExecuteNonSelectingCall(AbstractSession.java:5075)
	at org.eclipse.persistence.tools.schemaframework.DatabaseObjectDefinition.createOnDatabase(DatabaseObjectDefinition.java:202)
	at org.eclipse.persistence.tools.schemaframework.SchemaManager.createObject(SchemaManager.java:223)
	at org.eclipse.persistence.tools.schemaframework.TableCreator.createTables(TableCreator.java:165)
	at org.eclipse.persistence.tools.schemaframework.TableCreator.createTables(TableCreator.java:142)
	at org.eclipse.persistence.tools.schemaframework.TableCreator.createTables(TableCreator.java:134)
	at org.eclipse.persistence.tools.schemaframework.SchemaManager.createDefaultTables(SchemaManager.java:1032)
	at org.eclipse.persistence.internal.jpa.EntityManagerFactoryProvider.generateDefaultTables(EntityManagerFactoryProvider.java:109)
	at org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl.writeDDLToDatabase(EntityManagerSetupImpl.java:4215)
	at org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl.writeMetadataDDLToDatabase(EntityManagerSetupImpl.java:4281)
	at org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl.writeDDL(EntityManagerSetupImpl.java:4181)
	at org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl.writeDDL(EntityManagerSetupImpl.java:4054)
	at org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl.deploy(EntityManagerSetupImpl.java:777)
	at org.eclipse.persistence.internal.jpa.EntityManagerFactoryDelegate.getAbstractSession(EntityManagerFactoryDelegate.java:205)
	at org.eclipse.persistence.internal.jpa.EntityManagerFactoryDelegate.getDatabaseSession(EntityManagerFactoryDelegate.java:183)
	at org.eclipse.persistence.internal.jpa.EntityManagerFactoryImpl.getDatabaseSession(EntityManagerFactoryImpl.java:528)
	at org.eclipse.persistence.jpa.PersistenceProvider.createContainerEntityManagerFactoryImpl(PersistenceProvider.java:385)
	at org.eclipse.persistence.jpa.PersistenceProvider.createContainerEntityManagerFactory(PersistenceProvider.java:313)
	at org.glassfish.persistence.jpa.PersistenceUnitLoader.loadPU(PersistenceUnitLoader.java:199)
	at org.glassfish.persistence.jpa.PersistenceUnitLoader.<init>(PersistenceUnitLoader.java:107)
	at org.glassfish.persistence.jpa.JPADeployer$1.visitPUD(JPADeployer.java:223)
	at org.glassfish.persistence.jpa.JPADeployer$PersistenceUnitDescriptorIterator.iteratePUDs(JPADeployer.java:510)
	at org.glassfish.persistence.jpa.JPADeployer.createEMFs(JPADeployer.java:230)
	at org.glassfish.persistence.jpa.JPADeployer.prepare(JPADeployer.java:168)
	at com.sun.enterprise.v3.server.ApplicationLifecycle.prepareModule(ApplicationLifecycle.java:925)
	at com.sun.enterprise.v3.server.ApplicationLifecycle.deploy(ApplicationLifecycle.java:434)
	at com.sun.enterprise.v3.server.ApplicationLifecycle.deploy(ApplicationLifecycle.java:219)
	at org.glassfish.deployment.admin.DeployCommand.execute(DeployCommand.java:491)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$2$1.run(CommandRunnerImpl.java:539)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$2$1.run(CommandRunnerImpl.java:535)
	at java.security.AccessController.doPrivileged(Native Method)
	at javax.security.auth.Subject.doAs(Subject.java:360)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$2.execute(CommandRunnerImpl.java:534)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$3.run(CommandRunnerImpl.java:565)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$3.run(CommandRunnerImpl.java:557)
	at java.security.AccessController.doPrivileged(Native Method)
	at javax.security.auth.Subject.doAs(Subject.java:360)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl.doCommand(CommandRunnerImpl.java:556)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl.doCommand(CommandRunnerImpl.java:1464)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl.access$1300(CommandRunnerImpl.java:109)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$ExecutionContext.execute(CommandRunnerImpl.java:1846)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$ExecutionContext.execute(CommandRunnerImpl.java:1722)
	at org.glassfish.admin.rest.resources.admin.CommandResource.executeCommand(CommandResource.java:404)
	at org.glassfish.admin.rest.resources.admin.CommandResource.execCommandSimpInMultOut(CommandResource.java:234)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory$1.invoke(ResourceMethodInvocationHandlerFactory.java:81)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:144)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:161)
	at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:160)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:99)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:389)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:347)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:102)
	at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:309)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:315)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:297)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:267)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139)
	at org.glassfish.jersey.grizzly2.httpserver.GrizzlyHttpContainer.service(GrizzlyHttpContainer.java:375)
	at org.glassfish.admin.rest.adapter.JerseyContainerCommandService$3.service(JerseyContainerCommandService.java:173)
	at org.glassfish.admin.rest.adapter.RestAdapter.service(RestAdapter.java:179)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:283)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:200)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:132)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:111)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:536)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.sql.SQLSyntaxErrorException: Errore di sintassi: Encountered "VALUES" at line 1, column 108.
	at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(Unknown Source)
	at org.apache.derby.client.am.SqlException.getSQLException(Unknown Source)
	at org.apache.derby.client.am.Connection.prepareStatement(Unknown Source)
	at com.sun.gjc.spi.base.ConnectionHolder.prepareStatement(ConnectionHolder.java:586)
	at com.sun.gjc.spi.jdbc40.ConnectionWrapper40.prepareCachedStatement(ConnectionWrapper40.java:255)
	at com.sun.gjc.spi.jdbc40.ConnectionWrapper40.prepareCachedStatement(ConnectionWrapper40.java:52)
	at com.sun.gjc.spi.ManagedConnectionImpl.prepareCachedStatement(ManagedConnectionImpl.java:992)
	at com.sun.gjc.spi.jdbc40.ConnectionWrapper40.prepareStatement(ConnectionWrapper40.java:173)
	at org.eclipse.persistence.internal.databaseaccess.DatabaseAccessor.prepareStatement(DatabaseAccessor.java:1565)
	at org.eclipse.persistence.internal.databaseaccess.DatabaseAccessor.prepareStatement(DatabaseAccessor.java:1514)
	at org.eclipse.persistence.internal.databaseaccess.DatabaseCall.prepareStatement(DatabaseCall.java:778)
	at org.eclipse.persistence.internal.databaseaccess.DatabaseAccessor.basicExecuteCall(DatabaseAccessor.java:621)
	... 100 more
Caused by: org.apache.derby.client.am.SqlException: Errore di sintassi: Encountered "VALUES" at line 1, column 108.
	at org.apache.derby.client.am.Statement.completeSqlca(Unknown Source)
	at org.apache.derby.client.net.NetStatementReply.parsePrepareError(Unknown Source)
	at org.apache.derby.client.net.NetStatementReply.parsePRPSQLSTTreply(Unknown Source)
	at org.apache.derby.client.net.NetStatementReply.readPrepareDescribeOutput(Unknown Source)
	at org.apache.derby.client.net.StatementReply.readPrepareDescribeOutput(Unknown Source)
	at org.apache.derby.client.net.NetStatement.readPrepareDescribeOutput_(Unknown Source)
	at org.apache.derby.client.am.Statement.readPrepareDescribeOutput(Unknown Source)
	at org.apache.derby.client.am.PreparedStatement.readPrepareDescribeInputOutput(Unknown Source)
	at org.apache.derby.client.am.PreparedStatement.flowPrepareDescribeInputOutput(Unknown Source)
	at org.apache.derby.client.am.PreparedStatement.prepare(Unknown Source)
	at org.apache.derby.client.am.Connection.prepareStatementX(Unknown Source)
	... 110 more
]]

[2018-10-02T10:51:12.660+0200] [glassfish 4.1] [INFO] [AS-EJB-00054] [javax.enterprise.ejb.container] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470272660] [levelValue: 800] [[
  Portable JNDI names for EJB ConnectionModule: [java:global/ConnectionModule/ConnectionModule!com.mycompany.frogsssa.service.ConnectionModule, java:global/ConnectionModule/ConnectionModule]]]

[2018-10-02T10:51:12.680+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=43 _ThreadName=Thread-8] [timeMillis: 1538470272680] [levelValue: 800] [[
  ---PATH---/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/applications/ConnectionModule/WEB-INF/classes/files/keys.json]]

[2018-10-02T10:51:13.072+0200] [glassfish 4.1] [INFO] [] [org.jboss.weld.Version] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470273072] [levelValue: 800] [[
  WELD-000900: 2.2.13 (Final)]]

[2018-10-02T10:51:13.119+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=98 _ThreadName=Thread-8] [timeMillis: 1538470273119] [levelValue: 800] [[
  DD: Registered, cookie: [B@2b0f294d]]

[2018-10-02T10:51:13.119+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=98 _ThreadName=Thread-8] [timeMillis: 1538470273119] [levelValue: 800] [[
  Test DD registered: tcp://127.0.0.1:5555]]

[2018-10-02T10:51:13.462+0200] [glassfish 4.1] [WARN] [] [org.jboss.weld.Interceptor] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470273462] [levelValue: 900] [[
  WELD-001700: Interceptor annotation class javax.ejb.PostActivate not found, interception based on it is not enabled]]

[2018-10-02T10:51:13.463+0200] [glassfish 4.1] [WARN] [] [org.jboss.weld.Interceptor] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470273463] [levelValue: 900] [[
  WELD-001700: Interceptor annotation class javax.ejb.PrePassivate not found, interception based on it is not enabled]]

[2018-10-02T10:51:13.637+0200] [glassfish 4.1] [WARN] [] [org.jboss.weld.Event] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470273637] [levelValue: 900] [[
  WELD-000411: Observer method [BackedAnnotatedMethod] org.glassfish.sse.impl.ServerSentEventCdiExtension.processAnnotatedType(@Observes ProcessAnnotatedType<Object>, BeanManager) receives events for all annotated types. Consider restricting events using @WithAnnotations or a generic type with bounds.]]

[2018-10-02T10:51:13.645+0200] [glassfish 4.1] [WARN] [] [org.jboss.weld.Event] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470273645] [levelValue: 900] [[
  WELD-000411: Observer method [BackedAnnotatedMethod] public org.glassfish.jms.injection.JMSCDIExtension.processAnnotatedType(@Observes ProcessAnnotatedType<Object>) receives events for all annotated types. Consider restricting events using @WithAnnotations or a generic type with bounds.]]

[2018-10-02T10:51:13.655+0200] [glassfish 4.1] [WARN] [] [org.jboss.weld.Event] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470273655] [levelValue: 900] [[
  WELD-000411: Observer method [BackedAnnotatedMethod] private org.glassfish.jersey.ext.cdi1x.internal.CdiComponentProvider.processAnnotatedType(@Observes ProcessAnnotatedType<Object>) receives events for all annotated types. Consider restricting events using @WithAnnotations or a generic type with bounds.]]

[2018-10-02T10:51:14.418+0200] [glassfish 4.1] [SEVERE] [] [] [tid: _ThreadID=43 _ThreadName=Thread-9] [timeMillis: 1538470274418] [levelValue: 1000] [[
  SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".]]

[2018-10-02T10:51:14.418+0200] [glassfish 4.1] [SEVERE] [] [] [tid: _ThreadID=43 _ThreadName=Thread-9] [timeMillis: 1538470274418] [levelValue: 1000] [[
  SLF4J: Defaulting to no-operation (NOP) logger implementation]]

[2018-10-02T10:51:14.418+0200] [glassfish 4.1] [SEVERE] [] [] [tid: _ThreadID=43 _ThreadName=Thread-9] [timeMillis: 1538470274418] [levelValue: 1000] [[
  SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.]]

[2018-10-02T10:51:14.559+0200] [glassfish 4.1] [INFO] [AS-WEB-GLUE-00172] [javax.enterprise.web] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470274559] [levelValue: 800] [[
  Loading application [ConnectionModule] at [/ConnectionModule-1.0-SNAPSHOT]]]

[2018-10-02T10:51:14.655+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.core] [tid: _ThreadID=43 _ThreadName=admin-listener(1)] [timeMillis: 1538470274655] [levelValue: 800] [[
  ConnectionModule was successfully deployed in 5.582 milliseconds.]]

[2018-10-02T10:51:20.594+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538470280594] [levelValue: 800] [[
  Setted DM for sssaLara module orchestrator{	namespace "urn:sssa:orchestrator";	prefix "orchestrator";	extension advertise{		argument advertise{			yin-element false;		}	}	extension period{		argument period{			yin-element false;		}	}	extension minthreshold{		argument minthreshold{			yin-element false;		}	}	extension maxthreshold{		argument maxthreshold{			yin-element false;		}	}	list switches{		key id;		leaf id{			type string;			orchestrator:advertise onchange;		}		leaf ip{			type string;			orchestrator:advertise onchange;		}		leaf mac{			type string;			orchestrator:advertise onchange;		}	}	list load{		key id;		leaf id{			type string;		}		leaf tp{			type int32;			orchestrator:advertise onthreshold;			orchestrator:minthreshold 500;		}	}	container a {		leaf l1 {			type int32;			orchestrator:advertise onchange;		}		leaf l2 {			type string;			orchestrator:advertise onchange;		}		container b {			leaf l1 {				type int32;				orchestrator:advertise onchange;			}			leaf l2 {				type string;				orchestrator:advertise onchange;			}			container c {				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				leaf l3 {					type string;					orchestrator:advertise onchange;				}			}			list l {				key l1;				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }				container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;]]

[2018-10-02T10:51:20.594+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538470280594] [levelValue: 800] [[
  orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }			}		}		container c {			leaf l1 {				type int32;				orchestrator:advertise onchange;			}			leaf l2 {				type string;				orchestrator:advertise onchange;			}			leaf l3 {				type string;				orchestrator:advertise onchange;			}			container a {				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				container b {					leaf l1 {						type int32;						orchestrator:advertise onchange;					}					leaf l2 {						type string;						orchestrator:advertise onchange;					}					container c {						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						leaf l3 {							type string;							orchestrator:advertise onchange;						}						container a {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}					}					list l {						key l1;						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						container b {							leaf l1 {								type int32;								orchestrator:advertise onchange;							}							leaf l2 {								type string;								orchestrator:advertise onchange;							}							list l {								key l1;								leaf l1 {									type int32;									orchestrator:advertise onchange;								}								leaf l2 {									type string;									orchestrator:advertise onchange;								}								container c {									leaf l1 {										type int32;										orchestrator:advertise onchange;									}									leaf l2 {										type string;										orchestrator:advertise onchange;									}									leaf l3 {										type string;										orchestrator:advertise onchange;									}								}							}						}						container c {							leaf l1 {								type int32;								orchestrator:advertise onchange;							}							leaf l2 {								type string;								orchestrator:advertise onchange;							}							leaf l3 {								type string;								orchestrator:advertise onchange;							}							container a {								leaf l1 {									type int32;									orchestrator:advertise onchange;								}								leaf l2 {									type string;									orchestrator:advertise onchange;								}							}						}					}				}				container c {					leaf l1 {						type int32;						orchestrator:advertise onchange;					}					leaf l2 {						type string;						orchestrator:advertise onchange;					}					leaf l3 {						type string;						orchestrator:advertise onchange;					}					container a {						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						container b {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    ty]]

[2018-10-02T10:51:20.594+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538470280594] [levelValue: 800] [[
  pe string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}						container c {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}					}				}			}			container c {			    leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }			    container a {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container b {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        list l {                            key l1;                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1]]

[2018-10-02T10:51:20.594+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538470280594] [levelValue: 800] [[
  {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }			}		}	}	container a2 {        leaf l1 {            type int32;            orchestrator:advertise onchange;        }        leaf l2 {            type string;            orchestrator:advertise onchange;        }        container b {            leaf l1 {                type int32;                orchestrator:advertise onchange;            }            leaf l2 {                type string;                orchestrator:advertise onchange;            }            container c {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }            }            list l {                key l1;                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2]]

[2018-10-02T10:51:20.595+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538470280595] [levelValue: 800] [[
  {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }            }        }        container c {            leaf l1 {                type int32;                orchestrator:advertise onchange;            }            leaf l2 {                type string;                orchestrator:advertise onchange;            }            leaf l3 {                type string;                orchestrator:advertise onchange;            }            container a {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container c {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }]]

[2018-10-02T10:51:20.595+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538470280595] [levelValue: 800] [[
  leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    leaf l3 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }            }            container c {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }                container a {                    leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container a {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type]]

[2018-10-02T10:51:20.595+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538470280595] [levelValue: 800] [[
  string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container b {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    list l {                                        key l1;                                        leaf l1 {                                            type int32;                                            orchestrator:advertise onchange;                                        }                                        leaf l2 {                                            type string;                                            orchestrator:advertise onchange;                                        }                                    }                                }                            }                        }                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                                container c {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    leaf l3 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container a {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                    }    			}    		}    	}}]]

[2018-10-02T10:51:28.069+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=33 _ThreadName=Thread-8] [timeMillis: 1538470288069] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[77]/b/c/l1']]

[2018-10-02T10:51:28.222+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=33 _ThreadName=Thread-8] [timeMillis: 1538470288222] [levelValue: 800] [[
  {"res":null,"time":4.143942}]]

[2018-10-02T10:51:38.613+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538470298613] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[77]/b/c/l1']]

[2018-10-02T10:57:05.843+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538470625843] [levelValue: 800] [[
  {"res":null,"time":321604.353108}]]

[2018-10-02T10:57:22.610+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538470642610] [levelValue: 800] [[
  Setted DM for sssaLara module orchestrator{	namespace "urn:sssa:orchestrator";	prefix "orchestrator";	extension advertise{		argument advertise{			yin-element false;		}	}	extension period{		argument period{			yin-element false;		}	}	extension minthreshold{		argument minthreshold{			yin-element false;		}	}	extension maxthreshold{		argument maxthreshold{			yin-element false;		}	}	list switches{		key id;		leaf id{			type string;			orchestrator:advertise onchange;		}		leaf ip{			type string;			orchestrator:advertise onchange;		}		leaf mac{			type string;			orchestrator:advertise onchange;		}	}	list load{		key id;		leaf id{			type string;		}		leaf tp{			type int32;			orchestrator:advertise onthreshold;			orchestrator:minthreshold 500;		}	}	container a {		leaf l1 {			type int32;			orchestrator:advertise onchange;		}		leaf l2 {			type string;			orchestrator:advertise onchange;		}		container b {			leaf l1 {				type int32;				orchestrator:advertise onchange;			}			leaf l2 {				type string;				orchestrator:advertise onchange;			}			container c {				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				leaf l3 {					type string;					orchestrator:advertise onchange;				}			}			list l {				key l1;				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }				container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;]]

[2018-10-02T10:57:22.610+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538470642610] [levelValue: 800] [[
  orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }			}		}		container c {			leaf l1 {				type int32;				orchestrator:advertise onchange;			}			leaf l2 {				type string;				orchestrator:advertise onchange;			}			leaf l3 {				type string;				orchestrator:advertise onchange;			}			container a {				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				container b {					leaf l1 {						type int32;						orchestrator:advertise onchange;					}					leaf l2 {						type string;						orchestrator:advertise onchange;					}					container c {						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						leaf l3 {							type string;							orchestrator:advertise onchange;						}						container a {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}					}					list l {						key l1;						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						container b {							leaf l1 {								type int32;								orchestrator:advertise onchange;							}							leaf l2 {								type string;								orchestrator:advertise onchange;							}							list l {								key l1;								leaf l1 {									type int32;									orchestrator:advertise onchange;								}								leaf l2 {									type string;									orchestrator:advertise onchange;								}								container c {									leaf l1 {										type int32;										orchestrator:advertise onchange;									}									leaf l2 {										type string;										orchestrator:advertise onchange;									}									leaf l3 {										type string;										orchestrator:advertise onchange;									}								}							}						}						container c {							leaf l1 {								type int32;								orchestrator:advertise onchange;							}							leaf l2 {								type string;								orchestrator:advertise onchange;							}							leaf l3 {								type string;								orchestrator:advertise onchange;							}							container a {								leaf l1 {									type int32;									orchestrator:advertise onchange;								}								leaf l2 {									type string;									orchestrator:advertise onchange;								}							}						}					}				}				container c {					leaf l1 {						type int32;						orchestrator:advertise onchange;					}					leaf l2 {						type string;						orchestrator:advertise onchange;					}					leaf l3 {						type string;						orchestrator:advertise onchange;					}					container a {						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						container b {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    ty]]

[2018-10-02T10:57:22.610+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538470642610] [levelValue: 800] [[
  pe string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}						container c {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}					}				}			}			container c {			    leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }			    container a {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container b {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        list l {                            key l1;                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1]]

[2018-10-02T10:57:22.610+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538470642610] [levelValue: 800] [[
  {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }			}		}	}	container a2 {        leaf l1 {            type int32;            orchestrator:advertise onchange;        }        leaf l2 {            type string;            orchestrator:advertise onchange;        }        container b {            leaf l1 {                type int32;                orchestrator:advertise onchange;            }            leaf l2 {                type string;                orchestrator:advertise onchange;            }            container c {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }            }            list l {                key l1;                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2]]

[2018-10-02T10:57:22.610+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538470642610] [levelValue: 800] [[
  {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }            }        }        container c {            leaf l1 {                type int32;                orchestrator:advertise onchange;            }            leaf l2 {                type string;                orchestrator:advertise onchange;            }            leaf l3 {                type string;                orchestrator:advertise onchange;            }            container a {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container c {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }]]

[2018-10-02T10:57:22.610+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538470642610] [levelValue: 800] [[
  leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    leaf l3 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }            }            container c {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }                container a {                    leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container a {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type]]

[2018-10-02T10:57:22.610+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538470642610] [levelValue: 800] [[
  string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container b {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    list l {                                        key l1;                                        leaf l1 {                                            type int32;                                            orchestrator:advertise onchange;                                        }                                        leaf l2 {                                            type string;                                            orchestrator:advertise onchange;                                        }                                    }                                }                            }                        }                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                                container c {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    leaf l3 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container a {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                    }    			}    		}    	}}]]

[2018-10-02T10:58:59.436+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538470739436] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[77]/b/c/l1']]

[2018-10-02T11:10:36.435+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538471436435] [levelValue: 800] [[
  {"res":null,"time":666810.280641}]]

[2018-10-02T11:10:49.314+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538471449314] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/l1']]

[2018-10-02T11:11:11.678+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538471471678] [levelValue: 800] [[
  {"res":1,"time":17235.158708}]]

[2018-10-02T11:11:41.805+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=33 _ThreadName=Thread-8] [timeMillis: 1538471501805] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[77]/b/c/l1']]

[2018-10-02T11:12:27.274+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=33 _ThreadName=Thread-8] [timeMillis: 1538471547274] [levelValue: 800] [[
  {"res":null,"time":45458.408051}]]

[2018-10-02T11:23:24.828+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538472204828] [levelValue: 800] [[
  Setted DM for sssaLara module orchestrator{	namespace "urn:sssa:orchestrator";	prefix "orchestrator";	extension advertise{		argument advertise{			yin-element false;		}	}	extension period{		argument period{			yin-element false;		}	}	extension minthreshold{		argument minthreshold{			yin-element false;		}	}	extension maxthreshold{		argument maxthreshold{			yin-element false;		}	}	list switches{		key id;		leaf id{			type string;			orchestrator:advertise onchange;		}		leaf ip{			type string;			orchestrator:advertise onchange;		}		leaf mac{			type string;			orchestrator:advertise onchange;		}	}	list load{		key id;		leaf id{			type string;		}		leaf tp{			type int32;			orchestrator:advertise onthreshold;			orchestrator:minthreshold 500;		}	}	container a {		leaf l1 {			type int32;			orchestrator:advertise onchange;		}		leaf l2 {			type string;			orchestrator:advertise onchange;		}		container b {			leaf l1 {				type int32;				orchestrator:advertise onchange;			}			leaf l2 {				type string;				orchestrator:advertise onchange;			}			container c {				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				leaf l3 {					type string;					orchestrator:advertise onchange;				}			}			list l {				key l1;				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }				container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;]]

[2018-10-02T11:23:24.828+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538472204828] [levelValue: 800] [[
  orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }			}		}		container c {			leaf l1 {				type int32;				orchestrator:advertise onchange;			}			leaf l2 {				type string;				orchestrator:advertise onchange;			}			leaf l3 {				type string;				orchestrator:advertise onchange;			}			container a {				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				container b {					leaf l1 {						type int32;						orchestrator:advertise onchange;					}					leaf l2 {						type string;						orchestrator:advertise onchange;					}					container c {						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						leaf l3 {							type string;							orchestrator:advertise onchange;						}						container a {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}					}					list l {						key l1;						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						container b {							leaf l1 {								type int32;								orchestrator:advertise onchange;							}							leaf l2 {								type string;								orchestrator:advertise onchange;							}							list l {								key l1;								leaf l1 {									type int32;									orchestrator:advertise onchange;								}								leaf l2 {									type string;									orchestrator:advertise onchange;								}								container c {									leaf l1 {										type int32;										orchestrator:advertise onchange;									}									leaf l2 {										type string;										orchestrator:advertise onchange;									}									leaf l3 {										type string;										orchestrator:advertise onchange;									}								}							}						}						container c {							leaf l1 {								type int32;								orchestrator:advertise onchange;							}							leaf l2 {								type string;								orchestrator:advertise onchange;							}							leaf l3 {								type string;								orchestrator:advertise onchange;							}							container a {								leaf l1 {									type int32;									orchestrator:advertise onchange;								}								leaf l2 {									type string;									orchestrator:advertise onchange;								}							}						}					}				}				container c {					leaf l1 {						type int32;						orchestrator:advertise onchange;					}					leaf l2 {						type string;						orchestrator:advertise onchange;					}					leaf l3 {						type string;						orchestrator:advertise onchange;					}					container a {						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						container b {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    ty]]

[2018-10-02T11:23:24.828+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538472204828] [levelValue: 800] [[
  pe string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}						container c {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}					}				}			}			container c {			    leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }			    container a {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container b {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        list l {                            key l1;                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1]]

[2018-10-02T11:23:24.828+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538472204828] [levelValue: 800] [[
  {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }			}		}	}	container a2 {        leaf l1 {            type int32;            orchestrator:advertise onchange;        }        leaf l2 {            type string;            orchestrator:advertise onchange;        }        container b {            leaf l1 {                type int32;                orchestrator:advertise onchange;            }            leaf l2 {                type string;                orchestrator:advertise onchange;            }            container c {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }            }            list l {                key l1;                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2]]

[2018-10-02T11:23:24.828+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538472204828] [levelValue: 800] [[
  {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }            }        }        container c {            leaf l1 {                type int32;                orchestrator:advertise onchange;            }            leaf l2 {                type string;                orchestrator:advertise onchange;            }            leaf l3 {                type string;                orchestrator:advertise onchange;            }            container a {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container c {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }]]

[2018-10-02T11:23:24.828+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538472204828] [levelValue: 800] [[
  leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    leaf l3 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }            }            container c {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }                container a {                    leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container a {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type]]

[2018-10-02T11:23:24.828+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538472204828] [levelValue: 800] [[
  string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container b {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    list l {                                        key l1;                                        leaf l1 {                                            type int32;                                            orchestrator:advertise onchange;                                        }                                        leaf l2 {                                            type string;                                            orchestrator:advertise onchange;                                        }                                    }                                }                            }                        }                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                                container c {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    leaf l3 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container a {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                    }    			}    		}    	}}]]

[2018-10-02T11:23:34.842+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538472214842] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[77]/b/c/l1']]

[2018-10-02T11:23:50.601+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538472230601] [levelValue: 800] [[
  {"res":96,"time":15709.786521}]]

[2018-10-02T11:23:57.149+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538472237149] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[77]/b/c']]

[2018-10-02T11:24:23.555+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538472263555] [levelValue: 800] [[
  Setted DM for sssaLara module orchestrator{	namespace "urn:sssa:orchestrator";	prefix "orchestrator";	extension advertise{		argument advertise{			yin-element false;		}	}	extension period{		argument period{			yin-element false;		}	}	extension minthreshold{		argument minthreshold{			yin-element false;		}	}	extension maxthreshold{		argument maxthreshold{			yin-element false;		}	}	list switches{		key id;		leaf id{			type string;			orchestrator:advertise onchange;		}		leaf ip{			type string;			orchestrator:advertise onchange;		}		leaf mac{			type string;			orchestrator:advertise onchange;		}	}	list load{		key id;		leaf id{			type string;		}		leaf tp{			type int32;			orchestrator:advertise onthreshold;			orchestrator:minthreshold 500;		}	}	container a {		leaf l1 {			type int32;			orchestrator:advertise onchange;		}		leaf l2 {			type string;			orchestrator:advertise onchange;		}		container b {			leaf l1 {				type int32;				orchestrator:advertise onchange;			}			leaf l2 {				type string;				orchestrator:advertise onchange;			}			container c {				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				leaf l3 {					type string;					orchestrator:advertise onchange;				}			}			list l {				key l1;				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }				container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;]]

[2018-10-02T11:24:23.555+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538472263555] [levelValue: 800] [[
  orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }			}		}		container c {			leaf l1 {				type int32;				orchestrator:advertise onchange;			}			leaf l2 {				type string;				orchestrator:advertise onchange;			}			leaf l3 {				type string;				orchestrator:advertise onchange;			}			container a {				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				container b {					leaf l1 {						type int32;						orchestrator:advertise onchange;					}					leaf l2 {						type string;						orchestrator:advertise onchange;					}					container c {						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						leaf l3 {							type string;							orchestrator:advertise onchange;						}						container a {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}					}					list l {						key l1;						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						container b {							leaf l1 {								type int32;								orchestrator:advertise onchange;							}							leaf l2 {								type string;								orchestrator:advertise onchange;							}							list l {								key l1;								leaf l1 {									type int32;									orchestrator:advertise onchange;								}								leaf l2 {									type string;									orchestrator:advertise onchange;								}								container c {									leaf l1 {										type int32;										orchestrator:advertise onchange;									}									leaf l2 {										type string;										orchestrator:advertise onchange;									}									leaf l3 {										type string;										orchestrator:advertise onchange;									}								}							}						}						container c {							leaf l1 {								type int32;								orchestrator:advertise onchange;							}							leaf l2 {								type string;								orchestrator:advertise onchange;							}							leaf l3 {								type string;								orchestrator:advertise onchange;							}							container a {								leaf l1 {									type int32;									orchestrator:advertise onchange;								}								leaf l2 {									type string;									orchestrator:advertise onchange;								}							}						}					}				}				container c {					leaf l1 {						type int32;						orchestrator:advertise onchange;					}					leaf l2 {						type string;						orchestrator:advertise onchange;					}					leaf l3 {						type string;						orchestrator:advertise onchange;					}					container a {						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						container b {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    ty]]

[2018-10-02T11:24:23.555+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538472263555] [levelValue: 800] [[
  pe string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}						container c {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}					}				}			}			container c {			    leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }			    container a {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container b {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        list l {                            key l1;                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1]]

[2018-10-02T11:24:23.555+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538472263555] [levelValue: 800] [[
  {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }			}		}	}	container a2 {        leaf l1 {            type int32;            orchestrator:advertise onchange;        }        leaf l2 {            type string;            orchestrator:advertise onchange;        }        container b {            leaf l1 {                type int32;                orchestrator:advertise onchange;            }            leaf l2 {                type string;                orchestrator:advertise onchange;            }            container c {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }            }            list l {                key l1;                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2]]

[2018-10-02T11:24:23.555+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538472263555] [levelValue: 800] [[
  {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }            }        }        container c {            leaf l1 {                type int32;                orchestrator:advertise onchange;            }            leaf l2 {                type string;                orchestrator:advertise onchange;            }            leaf l3 {                type string;                orchestrator:advertise onchange;            }            container a {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container c {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }]]

[2018-10-02T11:24:23.555+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538472263555] [levelValue: 800] [[
  leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    leaf l3 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }            }            container c {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }                container a {                    leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container a {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type]]

[2018-10-02T11:24:23.555+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538472263555] [levelValue: 800] [[
  string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container b {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    list l {                                        key l1;                                        leaf l1 {                                            type int32;                                            orchestrator:advertise onchange;                                        }                                        leaf l2 {                                            type string;                                            orchestrator:advertise onchange;                                        }                                    }                                }                            }                        }                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                                container c {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    leaf l3 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container a {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                    }    			}    		}    	}}]]

[2018-10-02T11:24:28.269+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538472268269] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[77]/b/c']]

[2018-10-02T11:28:18.545+0200] [glassfish 4.1] [INFO] [] [org.eclipse.persistence.session./file:/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/applications/ConnectionModule/WEB-INF/classes/_com.mycompany_frogsssa_war_1.0-SNAPSHOTPU.connection] [tid: _ThreadID=44 _ThreadName=admin-listener(2)] [timeMillis: 1538472498545] [levelValue: 800] [[
  /file:/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/applications/ConnectionModule/WEB-INF/classes/_com.mycompany_frogsssa_war_1.0-SNAPSHOTPU logout successful]]

[2018-10-02T11:28:18.555+0200] [glassfish 4.1] [SEVERE] [] [javax.enterprise.web.util] [tid: _ThreadID=44 _ThreadName=admin-listener(2)] [timeMillis: 1538472498555] [levelValue: 1000] [[
  The web application [/ConnectionModule-1.0-SNAPSHOT] created a ThreadLocal with key of type [java.lang.ThreadLocal] (value [java.lang.ThreadLocal@aa0abf0]) and a value of type [zmq.ZMQ.PollSelector] (value [zmq.ZMQ$PollSelector@6bc0cdfc]) but failed to remove it when the web application was stopped. Threads are going to be renewed over time to try and avoid a probable memory leak.]]

[2018-10-02T11:28:20.807+0200] [glassfish 4.1] [INFO] [NCLS-CORE-00092] [javax.enterprise.system.core] [tid: _ThreadID=158 _ThreadName=Thread-57] [timeMillis: 1538472500807] [levelValue: 800] [[
  Server shutdown initiated]]

[2018-10-02T11:28:20.812+0200] [glassfish 4.1] [INFO] [NCLS-BOOTSTRAP-00028] [javax.enterprise.bootstrap] [tid: _ThreadID=158 _ThreadName=Thread-57] [timeMillis: 1538472500812] [levelValue: 800] [[
  Unregistered com.sun.enterprise.glassfish.bootstrap.osgi.EmbeddedOSGiGlassFishImpl@1cb19dba from service registry.]]

[2018-10-02T11:28:20.812+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=158 _ThreadName=Thread-8] [timeMillis: 1538472500812] [levelValue: 800] [[
  FileMonitoring shutdown]]

[2018-10-02T11:28:20.816+0200] [glassfish 4.1] [INFO] [NCLS-JMX-00002] [javax.enterprise.system.jmx] [tid: _ThreadID=158 _ThreadName=Thread-57] [timeMillis: 1538472500816] [levelValue: 800] [[
  JMXStartupService: Stopped JMXConnectorServer: null]]

[2018-10-02T11:28:20.816+0200] [glassfish 4.1] [INFO] [NCLS-JMX-00001] [javax.enterprise.system.jmx] [tid: _ThreadID=158 _ThreadName=Thread-57] [timeMillis: 1538472500816] [levelValue: 800] [[
  JMXStartupService and JMXConnectors have been shut down.]]

[2018-10-02T11:28:20.835+0200] [glassfish 4.1] [WARNING] [] [javax.enterprise.web] [tid: _ThreadID=29 _ThreadName=http-listener-1(1)] [timeMillis: 1538472500835] [levelValue: 900] [[
  StandardWrapperValve[com.mycompany.frogsssa.service.ApplicationConfig]: Servlet.service() for servlet com.mycompany.frogsssa.service.ApplicationConfig threw exception
java.lang.IllegalStateException: ServiceLocatorImpl(__HK2_Generated_3,5,1756750785) has been shut down
	at org.jvnet.hk2.internal.ServiceLocatorImpl.checkState(ServiceLocatorImpl.java:2270)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandleImpl(ServiceLocatorImpl.java:639)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandle(ServiceLocatorImpl.java:632)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandle(ServiceLocatorImpl.java:650)
	at org.jvnet.hk2.internal.FactoryCreator.getFactoryHandle(FactoryCreator.java:103)
	at org.jvnet.hk2.internal.FactoryCreator.dispose(FactoryCreator.java:173)
	at org.jvnet.hk2.internal.SystemDescriptor.dispose(SystemDescriptor.java:526)
	at org.glassfish.jersey.process.internal.RequestScope$Instance.remove(RequestScope.java:532)
	at org.glassfish.jersey.process.internal.RequestScope$Instance.release(RequestScope.java:549)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:319)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139)
	at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:460)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:386)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:334)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:221)
	at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1682)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:318)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:160)
	at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:734)
	at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:673)
	at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:99)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:174)
	at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:416)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:283)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:283)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:200)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:132)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:111)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:536)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571)
	at java.lang.Thread.run(Thread.java:748)
]]

[2018-10-02T11:28:20.835+0200] [glassfish 4.1] [WARNING] [] [javax.enterprise.web] [tid: _ThreadID=30 _ThreadName=http-listener-1(2)] [timeMillis: 1538472500835] [levelValue: 900] [[
  StandardWrapperValve[com.mycompany.frogsssa.service.ApplicationConfig]: Servlet.service() for servlet com.mycompany.frogsssa.service.ApplicationConfig threw exception
java.lang.IllegalStateException: ServiceLocatorImpl(__HK2_Generated_3,5,1756750785) has been shut down
	at org.jvnet.hk2.internal.ServiceLocatorImpl.checkState(ServiceLocatorImpl.java:2270)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandleImpl(ServiceLocatorImpl.java:639)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandle(ServiceLocatorImpl.java:632)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandle(ServiceLocatorImpl.java:650)
	at org.jvnet.hk2.internal.FactoryCreator.getFactoryHandle(FactoryCreator.java:103)
	at org.jvnet.hk2.internal.FactoryCreator.dispose(FactoryCreator.java:173)
	at org.jvnet.hk2.internal.SystemDescriptor.dispose(SystemDescriptor.java:526)
	at org.glassfish.jersey.process.internal.RequestScope$Instance.remove(RequestScope.java:532)
	at org.glassfish.jersey.process.internal.RequestScope$Instance.release(RequestScope.java:549)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:319)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139)
	at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:460)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:386)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:334)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:221)
	at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1682)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:318)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:160)
	at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:734)
	at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:673)
	at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:99)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:174)
	at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:416)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:283)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:283)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:200)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:132)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:111)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:536)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571)
	at java.lang.Thread.run(Thread.java:748)
]]

[2018-10-02T11:28:20.854+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=166 _ThreadName=Thread-8] [timeMillis: 1538472500854] [levelValue: 800] [[
  JdbcRuntimeExtension,  getAllSystemRAResourcesAndPools = [GlassFishConfigBean.org.glassfish.jdbc.config.JdbcResource, GlassFishConfigBean.org.glassfish.jdbc.config.JdbcResource, GlassFishConfigBean.org.glassfish.jdbc.config.JdbcConnectionPool, GlassFishConfigBean.org.glassfish.jdbc.config.JdbcConnectionPool]]]

[2018-10-02T11:28:20.861+0200] [glassfish 4.1] [INFO] [ra.stop-successful] [javax.enterprise.resource.resourceadapter.com.sun.enterprise.connectors.service] [tid: _ThreadID=168 _ThreadName=Thread-66] [timeMillis: 1538472500861] [levelValue: 800] [[
  RAR7094: __ds_jdbc_ra shutdown successful.]]

[2018-10-02T11:28:26.058+0200] [] [INFO] [NCLS-GFLAUNCHER-00005] [javax.enterprise.launcher] [tid: _ThreadID=1 _ThreadName=main] [timeMillis: 1538472506058] [levelValue: 800] [[
  JVM invocation command line:
/usr/lib/jvm/java-8-oracle/bin/java
-cp
/home/gabriele/Applications/glassfish4/glassfish/modules/glassfish.jar
-XX:+UnlockDiagnosticVMOptions
-XX:NewRatio=2
-XX:MaxPermSize=192m
-Xmx512m
-javaagent:/home/gabriele/Applications/glassfish4/glassfish/lib/monitor/flashlight-agent.jar
-client
-Djavax.xml.accessExternalSchema=all
-Djavax.net.ssl.trustStore=/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/config/cacerts.jks
-Djdk.corba.allowOutputStreamSubclass=true
-Dfelix.fileinstall.dir=/home/gabriele/Applications/glassfish4/glassfish/modules/autostart/
-Dorg.glassfish.additionalOSGiBundlesToStart=org.apache.felix.shell,org.apache.felix.gogo.runtime,org.apache.felix.gogo.shell,org.apache.felix.gogo.command,org.apache.felix.shell.remote,org.apache.felix.fileinstall
-Dcom.sun.aas.installRoot=/home/gabriele/Applications/glassfish4/glassfish
-Dfelix.fileinstall.poll=5000
-Djava.endorsed.dirs=/home/gabriele/Applications/glassfish4/glassfish/modules/endorsed:/home/gabriele/Applications/glassfish4/glassfish/lib/endorsed
-Djava.security.policy=/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/config/server.policy
-Dosgi.shell.telnet.maxconn=1
-Dfelix.fileinstall.bundles.startTransient=true
-Dcom.sun.enterprise.config.config_environment_factory_class=com.sun.enterprise.config.serverbeans.AppserverConfigEnvironmentFactory
-Dfelix.fileinstall.log.level=2
-Djavax.net.ssl.keyStore=/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/config/keystore.jks
-Djava.security.auth.login.config=/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/config/login.conf
-Dfelix.fileinstall.disableConfigSave=false
-Dfelix.fileinstall.bundles.new.start=true
-Dcom.sun.aas.instanceRoot=/home/gabriele/Applications/glassfish4/glassfish/domains/domain1
-Dosgi.shell.telnet.port=6666
-Dgosh.args=--nointeractive
-Dcom.sun.enterprise.security.httpsOutboundKeyAlias=s1as
-Dosgi.shell.telnet.ip=127.0.0.1
-DANTLR_USE_DIRECT_CLASS_LOADING=true
-Djava.awt.headless=true
-Dcom.ctc.wstx.returnNullForDefaultNamespace=true
-Djava.ext.dirs=/usr/lib/jvm/java-8-oracle/lib/ext:/usr/lib/jvm/java-8-oracle/jre/lib/ext:/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/lib/ext
-Djdbc.drivers=org.apache.derby.jdbc.ClientDriver
-Djava.library.path=/home/gabriele/Applications/glassfish4/glassfish/lib:/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib
com.sun.enterprise.glassfish.bootstrap.ASMain
-upgrade
false
-domaindir
/home/gabriele/Applications/glassfish4/glassfish/domains/domain1
-read-stdin
true
-asadmin-args
--host,,,localhost,,,--port,,,4848,,,--secure=false,,,--terse=false,,,--echo=false,,,--interactive=true,,,start-domain,,,--verbose=false,,,--watchdog=false,,,--debug=false,,,--domaindir,,,/home/gabriele/Applications/glassfish4/glassfish/domains,,,domain1
-domainname
domain1
-instancename
server
-type
DAS
-verbose
false
-asadmin-classpath
/home/gabriele/Applications/glassfish4/glassfish/lib/client/appserver-cli.jar
-debug
false
-asadmin-classname
com.sun.enterprise.admin.cli.AdminMain]]

[2018-10-02T11:28:27.410+0200] [glassfish 4.1] [INFO] [NCLS-LOGGING-00009] [javax.enterprise.logging] [tid: _ThreadID=17 _ThreadName=RunLevelControllerThread-1538472507340] [timeMillis: 1538472507410] [levelValue: 800] [[
  Running GlassFish Version: GlassFish Server Open Source Edition  4.1.1  (build 3)]]

[2018-10-02T11:28:27.412+0200] [glassfish 4.1] [INFO] [NCLS-LOGGING-00010] [javax.enterprise.logging] [tid: _ThreadID=17 _ThreadName=RunLevelControllerThread-1538472507340] [timeMillis: 1538472507412] [levelValue: 800] [[
  Server log file is using Formatter class: com.sun.enterprise.server.logging.ODLLogFormatter]]

[2018-10-02T11:28:27.479+0200] [glassfish 4.1] [INFO] [NCLS-SECURITY-01115] [javax.enterprise.system.core.security] [tid: _ThreadID=18 _ThreadName=RunLevelControllerThread-1538472507345] [timeMillis: 1538472507479] [levelValue: 800] [[
  Realm [admin-realm] of classtype [com.sun.enterprise.security.auth.realm.file.FileRealm] successfully created.]]

[2018-10-02T11:28:27.480+0200] [glassfish 4.1] [INFO] [NCLS-SECURITY-01115] [javax.enterprise.system.core.security] [tid: _ThreadID=18 _ThreadName=RunLevelControllerThread-1538472507345] [timeMillis: 1538472507480] [levelValue: 800] [[
  Realm [file] of classtype [com.sun.enterprise.security.auth.realm.file.FileRealm] successfully created.]]

[2018-10-02T11:28:27.482+0200] [glassfish 4.1] [INFO] [NCLS-SECURITY-01115] [javax.enterprise.system.core.security] [tid: _ThreadID=18 _ThreadName=RunLevelControllerThread-1538472507345] [timeMillis: 1538472507482] [levelValue: 800] [[
  Realm [certificate] of classtype [com.sun.enterprise.security.auth.realm.certificate.CertificateRealm] successfully created.]]

[2018-10-02T11:28:27.566+0200] [glassfish 4.1] [INFO] [SEC-SVCS-00100] [javax.enterprise.security.services] [tid: _ThreadID=19 _ThreadName=RunLevelControllerThread-1538472507345] [timeMillis: 1538472507566] [levelValue: 800] [[
  Authorization Service has successfully initialized.]]

[2018-10-02T11:28:27.748+0200] [glassfish 4.1] [INFO] [] [org.glassfish.ha.store.spi.BackingStoreFactoryRegistry] [tid: _ThreadID=18 _ThreadName=RunLevelControllerThread-1538472507345] [timeMillis: 1538472507748] [levelValue: 800] [[
  Registered org.glassfish.ha.store.adapter.cache.ShoalBackingStoreProxy for persistence-type = replicated in BackingStoreFactoryRegistry]]

[2018-10-02T11:28:27.812+0200] [glassfish 4.1] [WARNING] [] [org.glassfish.grizzly.config.Utils] [tid: _ThreadID=16 _ThreadName=RunLevelControllerThread-1538472507339] [timeMillis: 1538472507812] [levelValue: 900] [[
  Instance could not be initialized. Class=interface org.glassfish.grizzly.http.server.AddOn, name=http-listener-1, realClassName=org.glassfish.grizzly.http2.Http2AddOn]]

[2018-10-02T11:28:27.848+0200] [glassfish 4.1] [INFO] [NCLS-CORE-00087] [javax.enterprise.system.core] [tid: _ThreadID=16 _ThreadName=RunLevelControllerThread-1538472507339] [timeMillis: 1538472507848] [levelValue: 800] [[
  Grizzly Framework 2.3.23 started in: 15ms - bound to [/0.0.0.0:9090]]]

[2018-10-02T11:28:27.864+0200] [glassfish 4.1] [WARNING] [] [org.glassfish.grizzly.config.Utils] [tid: _ThreadID=16 _ThreadName=RunLevelControllerThread-1538472507339] [timeMillis: 1538472507864] [levelValue: 900] [[
  Instance could not be initialized. Class=interface org.glassfish.grizzly.http.server.AddOn, name=http-listener-2, realClassName=org.glassfish.grizzly.http2.Http2AddOn]]

[2018-10-02T11:28:27.869+0200] [glassfish 4.1] [INFO] [NCLS-CORE-00087] [javax.enterprise.system.core] [tid: _ThreadID=16 _ThreadName=RunLevelControllerThread-1538472507339] [timeMillis: 1538472507869] [levelValue: 800] [[
  Grizzly Framework 2.3.23 started in: 1ms - bound to [/0.0.0.0:8181]]]

[2018-10-02T11:28:27.870+0200] [glassfish 4.1] [WARNING] [] [org.glassfish.grizzly.config.Utils] [tid: _ThreadID=16 _ThreadName=RunLevelControllerThread-1538472507339] [timeMillis: 1538472507870] [levelValue: 900] [[
  Instance could not be initialized. Class=interface org.glassfish.grizzly.http.server.AddOn, name=admin-listener, realClassName=org.glassfish.grizzly.http2.Http2AddOn]]

[2018-10-02T11:28:27.878+0200] [glassfish 4.1] [INFO] [NCLS-CORE-00087] [javax.enterprise.system.core] [tid: _ThreadID=16 _ThreadName=RunLevelControllerThread-1538472507339] [timeMillis: 1538472507878] [levelValue: 800] [[
  Grizzly Framework 2.3.23 started in: 0ms - bound to [/0.0.0.0:4848]]]

[2018-10-02T11:28:27.911+0200] [glassfish 4.1] [INFO] [NCLS-CORE-00087] [javax.enterprise.system.core] [tid: _ThreadID=17 _ThreadName=RunLevelControllerThread-1538472507340] [timeMillis: 1538472507911] [levelValue: 800] [[
  Grizzly Framework 2.3.23 started in: 1ms - bound to [/0.0.0.0:3700]]]

[2018-10-02T11:28:27.912+0200] [glassfish 4.1] [INFO] [NCLS-CORE-00017] [javax.enterprise.system.core] [tid: _ThreadID=1 _ThreadName=main] [timeMillis: 1538472507912] [levelValue: 800] [[
  GlassFish Server Open Source Edition  4.1.1  (3) startup time : Felix (1.134ms), startup services(577ms), total(1.711ms)]]

[2018-10-02T11:28:27.988+0200] [glassfish 4.1] [INFO] [jts.startup_msg] [javax.enterprise.system.core.transaction.com.sun.jts.CosTransactions] [tid: _ThreadID=17 _ThreadName=RunLevelControllerThread-1538472507340] [timeMillis: 1538472507988] [levelValue: 800] [[
  JTS5014: Recoverable JTS instance, serverId = [100]]]

[2018-10-02T11:28:28.048+0200] [glassfish 4.1] [INFO] [NCLS-CORE-00087] [javax.enterprise.system.core] [tid: _ThreadID=18 _ThreadName=RunLevelControllerThread-1538472507345] [timeMillis: 1538472508048] [levelValue: 800] [[
  Grizzly Framework 2.3.23 started in: 1ms - bound to [/0.0.0.0:7676]]]

[2018-10-02T11:28:28.056+0200] [glassfish 4.1] [INFO] [NCLS-BOOTSTRAP-00027] [javax.enterprise.bootstrap] [tid: _ThreadID=1 _ThreadName=main] [timeMillis: 1538472508056] [levelValue: 800] [[
  Registered com.sun.enterprise.glassfish.bootstrap.osgi.EmbeddedOSGiGlassFishImpl@7c3ebc6b as OSGi service registration: org.apache.felix.framework.ServiceRegistrationImpl@5da7cee2.]]

[2018-10-02T11:28:28.071+0200] [glassfish 4.1] [INFO] [NCLS-JMX-00005] [javax.enterprise.system.jmx] [tid: _ThreadID=52 _ThreadName=Thread-13] [timeMillis: 1538472508071] [levelValue: 800] [[
  JMXStartupService has started JMXConnector on JMXService URL service:jmx:rmi://debian-gabriele-hp:8686/jndi/rmi://debian-gabriele-hp:8686/jmxrmi]]

[2018-10-02T11:28:32.638+0200] [glassfish 4.1] [INFO] [NCLS-REST-00001] [javax.enterprise.admin.rest] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472512638] [levelValue: 800] [[
  Listening to REST requests at context: /command/domain.]]

[2018-10-02T11:28:32.710+0200] [glassfish 4.1] [INFO] [] [org.hibernate.validator.internal.util.Version] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472512710] [levelValue: 800] [[
  HV000001: Hibernate Validator 5.1.2.Final]]

[2018-10-02T11:28:33.239+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472513239] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:28:33.629+0200] [glassfish 4.1] [SEVERE] [NCLS-SECURITY-05054] [javax.enterprise.system.security.ssl] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472513629] [levelValue: 1000] [[
  The SSL certificate has expired: [
[
  Version: V3
  Subject: OU=Equifax Secure Certificate Authority, O=Equifax, C=US
  Signature Algorithm: SHA1withRSA, OID = 1.2.840.113549.1.1.5

  Key:  Sun RSA public key, 1024 bits
  modulus: 135786214035069526348186531221551781468391756233528066061569654028671100866720352830303278016129003918213826297308054231261658522889438712013757624116391437358730449661353175673177742307421061340003741057138887918110217006515773038453829253517076741780039735595086881329494037450587568122088113584549069375417
  public exponent: 65537
  Validity: [From: Sat Aug 22 18:41:51 CEST 1998,
               To: Wed Aug 22 18:41:51 CEST 2018]
  Issuer: OU=Equifax Secure Certificate Authority, O=Equifax, C=US
  SerialNumber: [    35def4cf]

Certificate Extensions: 7
[1]: ObjectId: 1.2.840.113533.7.65.0 Criticality=false
Extension unknown: DER encoded OCTET string =
0000: 04 0D 30 0B 1B 05 56 33   2E 30 63 03 02 06 C0     ..0...V3.0c....


[2]: ObjectId: 2.5.29.35 Criticality=false
AuthorityKeyIdentifier [
KeyIdentifier [
0000: 48 E6 68 F9 2B D2 B2 95   D7 47 D8 23 20 10 4F 33  H.h.+....G.# .O3
0010: 98 90 9F D4                                        ....
]
]

[3]: ObjectId: 2.5.29.19 Criticality=false
BasicConstraints:[
  CA:true
  PathLen:2147483647
]

[4]: ObjectId: 2.5.29.31 Criticality=false
CRLDistributionPoints [
  [DistributionPoint:
     [CN=CRL1, OU=Equifax Secure Certificate Authority, O=Equifax, C=US]
]]

[5]: ObjectId: 2.5.29.15 Criticality=false
KeyUsage [
  Key_CertSign
  Crl_Sign
]

[6]: ObjectId: 2.5.29.16 Criticality=false
PrivateKeyUsage: [
To: Wed Aug 22 18:41:51 CEST 2018]

[7]: ObjectId: 2.5.29.14 Criticality=false
SubjectKeyIdentifier [
KeyIdentifier [
0000: 48 E6 68 F9 2B D2 B2 95   D7 47 D8 23 20 10 4F 33  H.h.+....G.# .O3
0010: 98 90 9F D4                                        ....
]
]

]
  Algorithm: [SHA1withRSA]
  Signature:
0000: 58 CE 29 EA FC F7 DE B5   CE 02 B9 17 B5 85 D1 B9  X.).............
0010: E3 E0 95 CC 25 31 0D 00   A6 92 6E 7F B6 92 63 9E  ....%1....n...c.
0020: 50 95 D1 9A 6F E4 11 DE   63 85 6E 98 EE A8 FF 5A  P...o...c.n....Z
0030: C8 D3 55 B2 66 71 57 DE   C0 21 EB 3D 2A A7 23 49  ..U.fqW..!.=*.#I
0040: 01 04 86 42 7B FC EE 7F   A2 16 52 B5 67 67 D3 40  ...B......R.gg.@
0050: DB 3B 26 58 B2 28 77 3D   AE 14 77 61 D6 FA 2A 66  .;&X.(w=..wa..*f
0060: 27 A0 0D FA A7 73 5C EA   70 F1 94 21 65 44 5F FA  '....s\.p..!eD_.
0070: FC EF 29 68 A9 A2 87 79   EF 79 EF 4F AC 07 77 38  ..)h...y.y.O..w8

]]]

[2018-10-02T11:28:33.635+0200] [glassfish 4.1] [SEVERE] [NCLS-SECURITY-05054] [javax.enterprise.system.security.ssl] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472513635] [levelValue: 1000] [[
  The SSL certificate has expired: [
[
  Version: V1
  Subject: CN=GTE CyberTrust Global Root, OU="GTE CyberTrust Solutions, Inc.", O=GTE Corporation, C=US
  Signature Algorithm: MD5withRSA, OID = 1.2.840.113549.1.1.4

  Key:  Sun RSA public key, 1024 bits
  modulus: 104674226241368487598835828377585222181792546532354327780214427055917513664449991602803276678454577364904540367827644455215731003386468752240014232146814457308076052176227490263634768927290191763858631579785604655038492469791381988347440106477066514204303723029602991655085187937840556671697442212352844587673
  public exponent: 65537
  Validity: [From: Thu Aug 13 02:29:00 CEST 1998,
               To: Tue Aug 14 01:59:00 CEST 2018]
  Issuer: CN=GTE CyberTrust Global Root, OU="GTE CyberTrust Solutions, Inc.", O=GTE Corporation, C=US
  SerialNumber: [    01a5]

]
  Algorithm: [MD5withRSA]
  Signature:
0000: 6D EB 1B 09 E9 5E D9 51   DB 67 22 61 A4 2A 3C 48  m....^.Q.g"a.*<H
0010: 77 E3 A0 7C A6 DE 73 A2   14 03 85 3D FB AB 0E 30  w.....s....=...0
0020: C5 83 16 33 81 13 08 9E   7B 34 4E DF 40 C8 74 D7  ...3.....4N.@.t.
0030: B9 7D DC F4 76 55 7D 9B   63 54 18 E9 F0 EA F3 5C  ....vU..cT.....\
0040: B1 D9 8B 42 1E B9 C0 95   4E BA FA D5 E2 7C F5 68  ...B....N......h
0050: 61 BF 8E EC 05 97 5F 5B   B0 D7 A3 85 34 C4 24 A7  a....._[....4.$.
0060: 0D 0F 95 93 EF CB 94 D8   9E 1F 9D 5C 85 6D C7 AA  ...........\.m..
0070: AE 4F 1F 22 B5 CD 95 AD   BA A7 CC F9 AB 0B 7A 7F  .O."..........z.

]]]

[2018-10-02T11:28:33.644+0200] [glassfish 4.1] [INFO] [NCLS-SECURITY-01002] [javax.enterprise.system.core.security] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472513644] [levelValue: 800] [[
  Java security manager is disabled.]]

[2018-10-02T11:28:33.645+0200] [glassfish 4.1] [INFO] [NCLS-SECURITY-01010] [javax.enterprise.system.core.security] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472513645] [levelValue: 800] [[
  Entering Security Startup Service.]]

[2018-10-02T11:28:33.647+0200] [glassfish 4.1] [INFO] [NCLS-SECURITY-01143] [javax.enterprise.system.core.security] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472513647] [levelValue: 800] [[
  Loading policy provider com.sun.enterprise.security.provider.PolicyWrapper.]]

[2018-10-02T11:28:33.668+0200] [glassfish 4.1] [INFO] [NCLS-SECURITY-01011] [javax.enterprise.system.core.security] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472513668] [levelValue: 800] [[
  Security Service(s) started successfully.]]

[2018-10-02T11:28:33.837+0200] [glassfish 4.1] [INFO] [AS-WEB-GLUE-00198] [javax.enterprise.web] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472513837] [levelValue: 800] [[
  Created HTTP listener http-listener-1 on host/port 0.0.0.0:9090]]

[2018-10-02T11:28:33.843+0200] [glassfish 4.1] [INFO] [AS-WEB-GLUE-00198] [javax.enterprise.web] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472513843] [levelValue: 800] [[
  Created HTTP listener http-listener-2 on host/port 0.0.0.0:8181]]

[2018-10-02T11:28:33.845+0200] [glassfish 4.1] [INFO] [AS-WEB-GLUE-00198] [javax.enterprise.web] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472513845] [levelValue: 800] [[
  Created HTTP listener admin-listener on host/port 0.0.0.0:4848]]

[2018-10-02T11:28:33.867+0200] [glassfish 4.1] [INFO] [AS-WEB-GLUE-00200] [javax.enterprise.web] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472513867] [levelValue: 800] [[
  Created virtual server server]]

[2018-10-02T11:28:33.869+0200] [glassfish 4.1] [INFO] [AS-WEB-GLUE-00200] [javax.enterprise.web] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472513869] [levelValue: 800] [[
  Created virtual server __asadmin]]

[2018-10-02T11:28:34.038+0200] [glassfish 4.1] [INFO] [AS-WEB-CORE-00306] [javax.enterprise.web.core] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472514038] [levelValue: 800] [[
  Setting JAAS app name glassfish-web]]

[2018-10-02T11:28:34.039+0200] [glassfish 4.1] [INFO] [AS-WEB-GLUE-00201] [javax.enterprise.web] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472514039] [levelValue: 800] [[
  Virtual server server loaded default web module ]]

[2018-10-02T11:28:34.428+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472514428] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:28:34.527+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472514527] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:28:34.541+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472514541] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:28:34.542+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472514542] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:28:34.542+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472514542] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:28:34.542+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472514542] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:28:34.543+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472514543] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:28:34.543+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472514543] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:28:34.544+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472514544] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:28:34.544+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472514544] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:28:34.545+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472514545] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:28:34.545+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472514545] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:28:34.546+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472514546] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:28:34.546+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472514546] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:28:34.547+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472514547] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:28:34.547+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472514547] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:28:34.548+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472514548] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:28:34.549+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472514549] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:28:34.549+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472514549] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:28:34.550+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472514550] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:28:34.551+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472514551] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:28:34.551+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472514551] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:28:34.552+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472514552] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:28:34.552+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472514552] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:28:34.553+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472514553] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:28:34.553+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472514553] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:28:34.554+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472514554] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:28:34.555+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472514555] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:28:34.555+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472514555] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:28:34.556+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472514556] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:28:34.557+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472514557] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:28:34.557+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472514557] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:28:34.680+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.dol] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472514680] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:28:35.705+0200] [glassfish 4.1] [WARNING] [] [org.eclipse.persistence.default] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472515705] [levelValue: 900] [[
  
java.lang.NullPointerException
	at org.eclipse.persistence.platform.server.ServerPlatformUtils.createServerPlatform(ServerPlatformUtils.java:99)
	at org.eclipse.persistence.sessions.factories.SessionManager.init(SessionManager.java:77)
	at org.eclipse.persistence.sessions.factories.SessionManager.<clinit>(SessionManager.java:71)
	at org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl.addSessionToGlobalSessionManager(EntityManagerSetupImpl.java:907)
	at org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl.initSession(EntityManagerSetupImpl.java:2671)
	at org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl.deploy(EntityManagerSetupImpl.java:675)
	at org.eclipse.persistence.internal.jpa.EntityManagerFactoryDelegate.getAbstractSession(EntityManagerFactoryDelegate.java:205)
	at org.eclipse.persistence.internal.jpa.EntityManagerFactoryDelegate.getDatabaseSession(EntityManagerFactoryDelegate.java:183)
	at org.eclipse.persistence.internal.jpa.EntityManagerFactoryImpl.getDatabaseSession(EntityManagerFactoryImpl.java:528)
	at org.eclipse.persistence.jpa.PersistenceProvider.createContainerEntityManagerFactoryImpl(PersistenceProvider.java:385)
	at org.eclipse.persistence.jpa.PersistenceProvider.createContainerEntityManagerFactory(PersistenceProvider.java:313)
	at org.glassfish.persistence.jpa.PersistenceUnitLoader.loadPU(PersistenceUnitLoader.java:199)
	at org.glassfish.persistence.jpa.PersistenceUnitLoader.<init>(PersistenceUnitLoader.java:107)
	at org.glassfish.persistence.jpa.JPADeployer$1.visitPUD(JPADeployer.java:223)
	at org.glassfish.persistence.jpa.JPADeployer$PersistenceUnitDescriptorIterator.iteratePUDs(JPADeployer.java:510)
	at org.glassfish.persistence.jpa.JPADeployer.createEMFs(JPADeployer.java:230)
	at org.glassfish.persistence.jpa.JPADeployer.prepare(JPADeployer.java:168)
	at com.sun.enterprise.v3.server.ApplicationLifecycle.prepareModule(ApplicationLifecycle.java:925)
	at com.sun.enterprise.v3.server.ApplicationLifecycle.deploy(ApplicationLifecycle.java:434)
	at com.sun.enterprise.v3.server.ApplicationLifecycle.deploy(ApplicationLifecycle.java:219)
	at org.glassfish.deployment.admin.DeployCommand.execute(DeployCommand.java:491)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$2$1.run(CommandRunnerImpl.java:539)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$2$1.run(CommandRunnerImpl.java:535)
	at java.security.AccessController.doPrivileged(Native Method)
	at javax.security.auth.Subject.doAs(Subject.java:360)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$2.execute(CommandRunnerImpl.java:534)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$3.run(CommandRunnerImpl.java:565)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$3.run(CommandRunnerImpl.java:557)
	at java.security.AccessController.doPrivileged(Native Method)
	at javax.security.auth.Subject.doAs(Subject.java:360)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl.doCommand(CommandRunnerImpl.java:556)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl.doCommand(CommandRunnerImpl.java:1464)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl.access$1300(CommandRunnerImpl.java:109)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$ExecutionContext.execute(CommandRunnerImpl.java:1846)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$ExecutionContext.execute(CommandRunnerImpl.java:1722)
	at org.glassfish.admin.rest.resources.admin.CommandResource.executeCommand(CommandResource.java:404)
	at org.glassfish.admin.rest.resources.admin.CommandResource.execCommandSimpInMultOut(CommandResource.java:234)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory$1.invoke(ResourceMethodInvocationHandlerFactory.java:81)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:144)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:161)
	at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:160)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:99)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:389)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:347)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:102)
	at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:309)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:315)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:297)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:267)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139)
	at org.glassfish.jersey.grizzly2.httpserver.GrizzlyHttpContainer.service(GrizzlyHttpContainer.java:375)
	at org.glassfish.admin.rest.adapter.JerseyContainerCommandService$3.service(JerseyContainerCommandService.java:173)
	at org.glassfish.admin.rest.adapter.RestAdapter.service(RestAdapter.java:179)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:283)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:200)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:132)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:111)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:536)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571)
	at java.lang.Thread.run(Thread.java:748)
]]

[2018-10-02T11:28:35.718+0200] [glassfish 4.1] [INFO] [] [org.eclipse.persistence.session./file:/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/applications/ConnectionModule/WEB-INF/classes/_com.mycompany_frogsssa_war_1.0-SNAPSHOTPU] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472515718] [levelValue: 800] [[
  EclipseLink, version: Eclipse Persistence Services - 2.6.1.v20150605-31e8258]]

[2018-10-02T11:28:36.273+0200] [glassfish 4.1] [INFO] [] [org.eclipse.persistence.session./file:/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/applications/ConnectionModule/WEB-INF/classes/_com.mycompany_frogsssa_war_1.0-SNAPSHOTPU.connection] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472516273] [levelValue: 800] [[
  /file:/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/applications/ConnectionModule/WEB-INF/classes/_com.mycompany_frogsssa_war_1.0-SNAPSHOTPU login successful]]

[2018-10-02T11:28:36.343+0200] [glassfish 4.1] [WARNING] [] [org.eclipse.persistence.session./file:/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/applications/ConnectionModule/WEB-INF/classes/_com.mycompany_frogsssa_war_1.0-SNAPSHOTPU] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472516343] [levelValue: 900] [[
  
Local Exception Stack: 
Exception [EclipseLink-4002] (Eclipse Persistence Services - 2.6.1.v20150605-31e8258): org.eclipse.persistence.exceptions.DatabaseException
Internal Exception: java.sql.SQLSyntaxErrorException: Errore di sintassi: Encountered "VALUES" at line 1, column 108.
Error Code: 30000
Call: CREATE TABLE RESOURCES (ID VARCHAR(255) NOT NULL, CORRESPONDENCE BLOB(2147483647), DATAMODEL VARCHAR(255), VALUES BLOB(2147483647), PRIMARY KEY (ID))
Query: DataModifyQuery(sql="CREATE TABLE RESOURCES (ID VARCHAR(255) NOT NULL, CORRESPONDENCE BLOB(2147483647), DATAMODEL VARCHAR(255), VALUES BLOB(2147483647), PRIMARY KEY (ID))")
	at org.eclipse.persistence.exceptions.DatabaseException.sqlException(DatabaseException.java:340)
	at org.eclipse.persistence.internal.databaseaccess.DatabaseAccessor.basicExecuteCall(DatabaseAccessor.java:684)
	at org.eclipse.persistence.internal.databaseaccess.DatabaseAccessor.executeCall(DatabaseAccessor.java:560)
	at org.eclipse.persistence.internal.sessions.AbstractSession.basicExecuteCall(AbstractSession.java:2055)
	at org.eclipse.persistence.sessions.server.ServerSession.executeCall(ServerSession.java:570)
	at org.eclipse.persistence.internal.queries.DatasourceCallQueryMechanism.executeCall(DatasourceCallQueryMechanism.java:242)
	at org.eclipse.persistence.internal.queries.DatasourceCallQueryMechanism.executeCall(DatasourceCallQueryMechanism.java:228)
	at org.eclipse.persistence.internal.queries.DatasourceCallQueryMechanism.executeNoSelectCall(DatasourceCallQueryMechanism.java:271)
	at org.eclipse.persistence.internal.queries.DatasourceCallQueryMechanism.executeNoSelect(DatasourceCallQueryMechanism.java:251)
	at org.eclipse.persistence.queries.DataModifyQuery.executeDatabaseQuery(DataModifyQuery.java:85)
	at org.eclipse.persistence.queries.DatabaseQuery.execute(DatabaseQuery.java:904)
	at org.eclipse.persistence.internal.sessions.AbstractSession.internalExecuteQuery(AbstractSession.java:3267)
	at org.eclipse.persistence.internal.sessions.AbstractSession.executeQuery(AbstractSession.java:1857)
	at org.eclipse.persistence.internal.sessions.AbstractSession.executeQuery(AbstractSession.java:1839)
	at org.eclipse.persistence.internal.sessions.AbstractSession.executeQuery(AbstractSession.java:1790)
	at org.eclipse.persistence.internal.sessions.AbstractSession.priviledgedExecuteNonSelectingCall(AbstractSession.java:5075)
	at org.eclipse.persistence.tools.schemaframework.DatabaseObjectDefinition.createOnDatabase(DatabaseObjectDefinition.java:202)
	at org.eclipse.persistence.tools.schemaframework.SchemaManager.createObject(SchemaManager.java:223)
	at org.eclipse.persistence.tools.schemaframework.TableCreator.createTables(TableCreator.java:165)
	at org.eclipse.persistence.tools.schemaframework.TableCreator.createTables(TableCreator.java:142)
	at org.eclipse.persistence.tools.schemaframework.TableCreator.createTables(TableCreator.java:134)
	at org.eclipse.persistence.tools.schemaframework.SchemaManager.createDefaultTables(SchemaManager.java:1032)
	at org.eclipse.persistence.internal.jpa.EntityManagerFactoryProvider.generateDefaultTables(EntityManagerFactoryProvider.java:109)
	at org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl.writeDDLToDatabase(EntityManagerSetupImpl.java:4215)
	at org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl.writeMetadataDDLToDatabase(EntityManagerSetupImpl.java:4281)
	at org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl.writeDDL(EntityManagerSetupImpl.java:4181)
	at org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl.writeDDL(EntityManagerSetupImpl.java:4054)
	at org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl.deploy(EntityManagerSetupImpl.java:777)
	at org.eclipse.persistence.internal.jpa.EntityManagerFactoryDelegate.getAbstractSession(EntityManagerFactoryDelegate.java:205)
	at org.eclipse.persistence.internal.jpa.EntityManagerFactoryDelegate.getDatabaseSession(EntityManagerFactoryDelegate.java:183)
	at org.eclipse.persistence.internal.jpa.EntityManagerFactoryImpl.getDatabaseSession(EntityManagerFactoryImpl.java:528)
	at org.eclipse.persistence.jpa.PersistenceProvider.createContainerEntityManagerFactoryImpl(PersistenceProvider.java:385)
	at org.eclipse.persistence.jpa.PersistenceProvider.createContainerEntityManagerFactory(PersistenceProvider.java:313)
	at org.glassfish.persistence.jpa.PersistenceUnitLoader.loadPU(PersistenceUnitLoader.java:199)
	at org.glassfish.persistence.jpa.PersistenceUnitLoader.<init>(PersistenceUnitLoader.java:107)
	at org.glassfish.persistence.jpa.JPADeployer$1.visitPUD(JPADeployer.java:223)
	at org.glassfish.persistence.jpa.JPADeployer$PersistenceUnitDescriptorIterator.iteratePUDs(JPADeployer.java:510)
	at org.glassfish.persistence.jpa.JPADeployer.createEMFs(JPADeployer.java:230)
	at org.glassfish.persistence.jpa.JPADeployer.prepare(JPADeployer.java:168)
	at com.sun.enterprise.v3.server.ApplicationLifecycle.prepareModule(ApplicationLifecycle.java:925)
	at com.sun.enterprise.v3.server.ApplicationLifecycle.deploy(ApplicationLifecycle.java:434)
	at com.sun.enterprise.v3.server.ApplicationLifecycle.deploy(ApplicationLifecycle.java:219)
	at org.glassfish.deployment.admin.DeployCommand.execute(DeployCommand.java:491)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$2$1.run(CommandRunnerImpl.java:539)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$2$1.run(CommandRunnerImpl.java:535)
	at java.security.AccessController.doPrivileged(Native Method)
	at javax.security.auth.Subject.doAs(Subject.java:360)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$2.execute(CommandRunnerImpl.java:534)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$3.run(CommandRunnerImpl.java:565)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$3.run(CommandRunnerImpl.java:557)
	at java.security.AccessController.doPrivileged(Native Method)
	at javax.security.auth.Subject.doAs(Subject.java:360)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl.doCommand(CommandRunnerImpl.java:556)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl.doCommand(CommandRunnerImpl.java:1464)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl.access$1300(CommandRunnerImpl.java:109)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$ExecutionContext.execute(CommandRunnerImpl.java:1846)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$ExecutionContext.execute(CommandRunnerImpl.java:1722)
	at org.glassfish.admin.rest.resources.admin.CommandResource.executeCommand(CommandResource.java:404)
	at org.glassfish.admin.rest.resources.admin.CommandResource.execCommandSimpInMultOut(CommandResource.java:234)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory$1.invoke(ResourceMethodInvocationHandlerFactory.java:81)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:144)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:161)
	at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:160)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:99)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:389)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:347)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:102)
	at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:309)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:315)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:297)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:267)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139)
	at org.glassfish.jersey.grizzly2.httpserver.GrizzlyHttpContainer.service(GrizzlyHttpContainer.java:375)
	at org.glassfish.admin.rest.adapter.JerseyContainerCommandService$3.service(JerseyContainerCommandService.java:173)
	at org.glassfish.admin.rest.adapter.RestAdapter.service(RestAdapter.java:179)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:283)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:200)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:132)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:111)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:536)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.sql.SQLSyntaxErrorException: Errore di sintassi: Encountered "VALUES" at line 1, column 108.
	at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(Unknown Source)
	at org.apache.derby.client.am.SqlException.getSQLException(Unknown Source)
	at org.apache.derby.client.am.Connection.prepareStatement(Unknown Source)
	at com.sun.gjc.spi.base.ConnectionHolder.prepareStatement(ConnectionHolder.java:586)
	at com.sun.gjc.spi.jdbc40.ConnectionWrapper40.prepareCachedStatement(ConnectionWrapper40.java:255)
	at com.sun.gjc.spi.jdbc40.ConnectionWrapper40.prepareCachedStatement(ConnectionWrapper40.java:52)
	at com.sun.gjc.spi.ManagedConnectionImpl.prepareCachedStatement(ManagedConnectionImpl.java:992)
	at com.sun.gjc.spi.jdbc40.ConnectionWrapper40.prepareStatement(ConnectionWrapper40.java:173)
	at org.eclipse.persistence.internal.databaseaccess.DatabaseAccessor.prepareStatement(DatabaseAccessor.java:1565)
	at org.eclipse.persistence.internal.databaseaccess.DatabaseAccessor.prepareStatement(DatabaseAccessor.java:1514)
	at org.eclipse.persistence.internal.databaseaccess.DatabaseCall.prepareStatement(DatabaseCall.java:778)
	at org.eclipse.persistence.internal.databaseaccess.DatabaseAccessor.basicExecuteCall(DatabaseAccessor.java:621)
	... 100 more
Caused by: org.apache.derby.client.am.SqlException: Errore di sintassi: Encountered "VALUES" at line 1, column 108.
	at org.apache.derby.client.am.Statement.completeSqlca(Unknown Source)
	at org.apache.derby.client.net.NetStatementReply.parsePrepareError(Unknown Source)
	at org.apache.derby.client.net.NetStatementReply.parsePRPSQLSTTreply(Unknown Source)
	at org.apache.derby.client.net.NetStatementReply.readPrepareDescribeOutput(Unknown Source)
	at org.apache.derby.client.net.StatementReply.readPrepareDescribeOutput(Unknown Source)
	at org.apache.derby.client.net.NetStatement.readPrepareDescribeOutput_(Unknown Source)
	at org.apache.derby.client.am.Statement.readPrepareDescribeOutput(Unknown Source)
	at org.apache.derby.client.am.PreparedStatement.readPrepareDescribeInputOutput(Unknown Source)
	at org.apache.derby.client.am.PreparedStatement.flowPrepareDescribeInputOutput(Unknown Source)
	at org.apache.derby.client.am.PreparedStatement.prepare(Unknown Source)
	at org.apache.derby.client.am.Connection.prepareStatementX(Unknown Source)
	... 110 more
]]

[2018-10-02T11:28:36.515+0200] [glassfish 4.1] [INFO] [AS-EJB-00054] [javax.enterprise.ejb.container] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472516515] [levelValue: 800] [[
  Portable JNDI names for EJB ConnectionModule: [java:global/ConnectionModule/ConnectionModule!com.mycompany.frogsssa.service.ConnectionModule, java:global/ConnectionModule/ConnectionModule]]]

[2018-10-02T11:28:36.547+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=43 _ThreadName=Thread-8] [timeMillis: 1538472516547] [levelValue: 800] [[
  ---PATH---/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/applications/ConnectionModule/WEB-INF/classes/files/keys.json]]

[2018-10-02T11:28:37.046+0200] [glassfish 4.1] [INFO] [] [org.jboss.weld.Version] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472517046] [levelValue: 800] [[
  WELD-000900: 2.2.13 (Final)]]

[2018-10-02T11:28:37.088+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=97 _ThreadName=Thread-8] [timeMillis: 1538472517088] [levelValue: 800] [[
  DD: Registered, cookie: [B@7c74f0ec]]

[2018-10-02T11:28:37.088+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=97 _ThreadName=Thread-8] [timeMillis: 1538472517088] [levelValue: 800] [[
  Test DD registered: tcp://127.0.0.1:5555]]

[2018-10-02T11:28:37.462+0200] [glassfish 4.1] [WARN] [] [org.jboss.weld.Interceptor] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472517462] [levelValue: 900] [[
  WELD-001700: Interceptor annotation class javax.ejb.PostActivate not found, interception based on it is not enabled]]

[2018-10-02T11:28:37.462+0200] [glassfish 4.1] [WARN] [] [org.jboss.weld.Interceptor] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472517462] [levelValue: 900] [[
  WELD-001700: Interceptor annotation class javax.ejb.PrePassivate not found, interception based on it is not enabled]]

[2018-10-02T11:28:37.620+0200] [glassfish 4.1] [WARN] [] [org.jboss.weld.Event] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472517620] [levelValue: 900] [[
  WELD-000411: Observer method [BackedAnnotatedMethod] private org.glassfish.jersey.ext.cdi1x.internal.CdiComponentProvider.processAnnotatedType(@Observes ProcessAnnotatedType<Object>) receives events for all annotated types. Consider restricting events using @WithAnnotations or a generic type with bounds.]]

[2018-10-02T11:28:37.624+0200] [glassfish 4.1] [WARN] [] [org.jboss.weld.Event] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472517624] [levelValue: 900] [[
  WELD-000411: Observer method [BackedAnnotatedMethod] org.glassfish.sse.impl.ServerSentEventCdiExtension.processAnnotatedType(@Observes ProcessAnnotatedType<Object>, BeanManager) receives events for all annotated types. Consider restricting events using @WithAnnotations or a generic type with bounds.]]

[2018-10-02T11:28:37.629+0200] [glassfish 4.1] [WARN] [] [org.jboss.weld.Event] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472517629] [levelValue: 900] [[
  WELD-000411: Observer method [BackedAnnotatedMethod] public org.glassfish.jms.injection.JMSCDIExtension.processAnnotatedType(@Observes ProcessAnnotatedType<Object>) receives events for all annotated types. Consider restricting events using @WithAnnotations or a generic type with bounds.]]

[2018-10-02T11:28:38.339+0200] [glassfish 4.1] [SEVERE] [] [] [tid: _ThreadID=43 _ThreadName=Thread-9] [timeMillis: 1538472518339] [levelValue: 1000] [[
  SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".]]

[2018-10-02T11:28:38.339+0200] [glassfish 4.1] [SEVERE] [] [] [tid: _ThreadID=43 _ThreadName=Thread-9] [timeMillis: 1538472518339] [levelValue: 1000] [[
  SLF4J: Defaulting to no-operation (NOP) logger implementation]]

[2018-10-02T11:28:38.339+0200] [glassfish 4.1] [SEVERE] [] [] [tid: _ThreadID=43 _ThreadName=Thread-9] [timeMillis: 1538472518339] [levelValue: 1000] [[
  SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.]]

[2018-10-02T11:28:38.492+0200] [glassfish 4.1] [INFO] [AS-WEB-GLUE-00172] [javax.enterprise.web] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472518492] [levelValue: 800] [[
  Loading application [ConnectionModule] at [/ConnectionModule-1.0-SNAPSHOT]]]

[2018-10-02T11:28:38.568+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.core] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538472518568] [levelValue: 800] [[
  ConnectionModule was successfully deployed in 5.796 milliseconds.]]

[2018-10-02T11:28:46.238+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538472526238] [levelValue: 800] [[
  Setted DM for sssaLara module orchestrator{	namespace "urn:sssa:orchestrator";	prefix "orchestrator";	extension advertise{		argument advertise{			yin-element false;		}	}	extension period{		argument period{			yin-element false;		}	}	extension minthreshold{		argument minthreshold{			yin-element false;		}	}	extension maxthreshold{		argument maxthreshold{			yin-element false;		}	}	list switches{		key id;		leaf id{			type string;			orchestrator:advertise onchange;		}		leaf ip{			type string;			orchestrator:advertise onchange;		}		leaf mac{			type string;			orchestrator:advertise onchange;		}	}	list load{		key id;		leaf id{			type string;		}		leaf tp{			type int32;			orchestrator:advertise onthreshold;			orchestrator:minthreshold 500;		}	}	container a {		leaf l1 {			type int32;			orchestrator:advertise onchange;		}		leaf l2 {			type string;			orchestrator:advertise onchange;		}		container b {			leaf l1 {				type int32;				orchestrator:advertise onchange;			}			leaf l2 {				type string;				orchestrator:advertise onchange;			}			container c {				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				leaf l3 {					type string;					orchestrator:advertise onchange;				}			}			list l {				key l1;				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }				container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;]]

[2018-10-02T11:28:46.238+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538472526238] [levelValue: 800] [[
  orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }			}		}		container c {			leaf l1 {				type int32;				orchestrator:advertise onchange;			}			leaf l2 {				type string;				orchestrator:advertise onchange;			}			leaf l3 {				type string;				orchestrator:advertise onchange;			}			container a {				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				container b {					leaf l1 {						type int32;						orchestrator:advertise onchange;					}					leaf l2 {						type string;						orchestrator:advertise onchange;					}					container c {						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						leaf l3 {							type string;							orchestrator:advertise onchange;						}						container a {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}					}					list l {						key l1;						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						container b {							leaf l1 {								type int32;								orchestrator:advertise onchange;							}							leaf l2 {								type string;								orchestrator:advertise onchange;							}							list l {								key l1;								leaf l1 {									type int32;									orchestrator:advertise onchange;								}								leaf l2 {									type string;									orchestrator:advertise onchange;								}								container c {									leaf l1 {										type int32;										orchestrator:advertise onchange;									}									leaf l2 {										type string;										orchestrator:advertise onchange;									}									leaf l3 {										type string;										orchestrator:advertise onchange;									}								}							}						}						container c {							leaf l1 {								type int32;								orchestrator:advertise onchange;							}							leaf l2 {								type string;								orchestrator:advertise onchange;							}							leaf l3 {								type string;								orchestrator:advertise onchange;							}							container a {								leaf l1 {									type int32;									orchestrator:advertise onchange;								}								leaf l2 {									type string;									orchestrator:advertise onchange;								}							}						}					}				}				container c {					leaf l1 {						type int32;						orchestrator:advertise onchange;					}					leaf l2 {						type string;						orchestrator:advertise onchange;					}					leaf l3 {						type string;						orchestrator:advertise onchange;					}					container a {						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						container b {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    ty]]

[2018-10-02T11:28:46.238+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538472526238] [levelValue: 800] [[
  pe string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}						container c {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}					}				}			}			container c {			    leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }			    container a {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container b {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        list l {                            key l1;                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1]]

[2018-10-02T11:28:46.239+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538472526239] [levelValue: 800] [[
  {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }			}		}	}	container a2 {        leaf l1 {            type int32;            orchestrator:advertise onchange;        }        leaf l2 {            type string;            orchestrator:advertise onchange;        }        container b {            leaf l1 {                type int32;                orchestrator:advertise onchange;            }            leaf l2 {                type string;                orchestrator:advertise onchange;            }            container c {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }            }            list l {                key l1;                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2]]

[2018-10-02T11:28:46.239+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538472526239] [levelValue: 800] [[
  {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }            }        }        container c {            leaf l1 {                type int32;                orchestrator:advertise onchange;            }            leaf l2 {                type string;                orchestrator:advertise onchange;            }            leaf l3 {                type string;                orchestrator:advertise onchange;            }            container a {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container c {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }]]

[2018-10-02T11:28:46.239+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538472526239] [levelValue: 800] [[
  leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    leaf l3 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }            }            container c {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }                container a {                    leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container a {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type]]

[2018-10-02T11:28:46.239+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538472526239] [levelValue: 800] [[
  string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container b {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    list l {                                        key l1;                                        leaf l1 {                                            type int32;                                            orchestrator:advertise onchange;                                        }                                        leaf l2 {                                            type string;                                            orchestrator:advertise onchange;                                        }                                    }                                }                            }                        }                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                                container c {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    leaf l3 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container a {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                    }    			}    		}    	}}]]

[2018-10-02T11:28:53.491+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538472533491] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[77]/b/c']]

[2018-10-02T11:29:20.112+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538472560112] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]/b/c/l1']]

[2018-10-02T11:29:24.806+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538472564806] [levelValue: 800] [[
  {"res":96,"time":4568.595424}]]

[2018-10-02T11:30:06.781+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538472606781] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]/b/c']]

[2018-10-02T11:32:48.604+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538472768604] [levelValue: 800] [[
  Setted DM for sssaLara module orchestrator{	namespace "urn:sssa:orchestrator";	prefix "orchestrator";	extension advertise{		argument advertise{			yin-element false;		}	}	extension period{		argument period{			yin-element false;		}	}	extension minthreshold{		argument minthreshold{			yin-element false;		}	}	extension maxthreshold{		argument maxthreshold{			yin-element false;		}	}	list switches{		key id;		leaf id{			type string;			orchestrator:advertise onchange;		}		leaf ip{			type string;			orchestrator:advertise onchange;		}		leaf mac{			type string;			orchestrator:advertise onchange;		}	}	list load{		key id;		leaf id{			type string;		}		leaf tp{			type int32;			orchestrator:advertise onthreshold;			orchestrator:minthreshold 500;		}	}	container a {		leaf l1 {			type int32;			orchestrator:advertise onchange;		}		leaf l2 {			type string;			orchestrator:advertise onchange;		}		container b {			leaf l1 {				type int32;				orchestrator:advertise onchange;			}			leaf l2 {				type string;				orchestrator:advertise onchange;			}			container c {				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				leaf l3 {					type string;					orchestrator:advertise onchange;				}			}			list l {				key l1;				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }				container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;]]

[2018-10-02T11:32:48.604+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538472768604] [levelValue: 800] [[
  orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }			}		}		container c {			leaf l1 {				type int32;				orchestrator:advertise onchange;			}			leaf l2 {				type string;				orchestrator:advertise onchange;			}			leaf l3 {				type string;				orchestrator:advertise onchange;			}			container a {				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				container b {					leaf l1 {						type int32;						orchestrator:advertise onchange;					}					leaf l2 {						type string;						orchestrator:advertise onchange;					}					container c {						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						leaf l3 {							type string;							orchestrator:advertise onchange;						}						container a {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}					}					list l {						key l1;						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						container b {							leaf l1 {								type int32;								orchestrator:advertise onchange;							}							leaf l2 {								type string;								orchestrator:advertise onchange;							}							list l {								key l1;								leaf l1 {									type int32;									orchestrator:advertise onchange;								}								leaf l2 {									type string;									orchestrator:advertise onchange;								}								container c {									leaf l1 {										type int32;										orchestrator:advertise onchange;									}									leaf l2 {										type string;										orchestrator:advertise onchange;									}									leaf l3 {										type string;										orchestrator:advertise onchange;									}								}							}						}						container c {							leaf l1 {								type int32;								orchestrator:advertise onchange;							}							leaf l2 {								type string;								orchestrator:advertise onchange;							}							leaf l3 {								type string;								orchestrator:advertise onchange;							}							container a {								leaf l1 {									type int32;									orchestrator:advertise onchange;								}								leaf l2 {									type string;									orchestrator:advertise onchange;								}							}						}					}				}				container c {					leaf l1 {						type int32;						orchestrator:advertise onchange;					}					leaf l2 {						type string;						orchestrator:advertise onchange;					}					leaf l3 {						type string;						orchestrator:advertise onchange;					}					container a {						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						container b {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    ty]]

[2018-10-02T11:32:48.604+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538472768604] [levelValue: 800] [[
  pe string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}						container c {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}					}				}			}			container c {			    leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }			    container a {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container b {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        list l {                            key l1;                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1]]

[2018-10-02T11:32:48.604+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538472768604] [levelValue: 800] [[
  {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }			}		}	}	container a2 {        leaf l1 {            type int32;            orchestrator:advertise onchange;        }        leaf l2 {            type string;            orchestrator:advertise onchange;        }        container b {            leaf l1 {                type int32;                orchestrator:advertise onchange;            }            leaf l2 {                type string;                orchestrator:advertise onchange;            }            container c {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }            }            list l {                key l1;                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2]]

[2018-10-02T11:32:48.604+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538472768604] [levelValue: 800] [[
  {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }            }        }        container c {            leaf l1 {                type int32;                orchestrator:advertise onchange;            }            leaf l2 {                type string;                orchestrator:advertise onchange;            }            leaf l3 {                type string;                orchestrator:advertise onchange;            }            container a {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container c {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }]]

[2018-10-02T11:32:48.604+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538472768604] [levelValue: 800] [[
  leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    leaf l3 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }            }            container c {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }                container a {                    leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container a {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type]]

[2018-10-02T11:32:48.604+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538472768604] [levelValue: 800] [[
  string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container b {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    list l {                                        key l1;                                        leaf l1 {                                            type int32;                                            orchestrator:advertise onchange;                                        }                                        leaf l2 {                                            type string;                                            orchestrator:advertise onchange;                                        }                                    }                                }                            }                        }                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                                container c {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    leaf l3 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container a {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                    }    			}    		}    	}}]]

[2018-10-02T11:32:56.191+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538472776191] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]/b/c/l1']]

[2018-10-02T11:33:00.276+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538472780276] [levelValue: 800] [[
  {"res":96,"time":24.781442}]]

[2018-10-02T11:33:05.446+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538472785446] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]/b/c']]

[2018-10-02T11:33:05.462+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538472785462] [levelValue: 800] [[
  {"res":{"l1":96,"l2":"96","l3":"lista3"},"time":5.106259}]]

[2018-10-02T11:33:09.176+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538472789176] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]/b']]

[2018-10-02T11:33:09.189+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538472789189] [levelValue: 800] [[
  {"res":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"time":3.086455}]]

[2018-10-02T11:33:21.408+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538472801408] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]']]

[2018-10-02T11:33:21.420+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538472801420] [levelValue: 800] [[
  {"res":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},"time":3.232006}]]

[2018-10-02T11:33:26.507+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538472806507] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]']]

[2018-10-02T11:33:26.520+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538472806520] [levelValue: 800] [[
  {"res":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},"time":4.321155}]]

[2018-10-02T11:33:27.396+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538472807396] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]']]

[2018-10-02T11:33:27.406+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538472807406] [levelValue: 800] [[
  {"res":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},"time":2.390056}]]

[2018-10-02T11:33:27.639+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538472807639] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]']]

[2018-10-02T11:33:27.665+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538472807665] [levelValue: 800] [[
  {"res":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},"time":1.899724}]]

[2018-10-02T11:33:28.007+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538472808007] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]']]

[2018-10-02T11:33:28.019+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538472808019] [levelValue: 800] [[
  {"res":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},"time":3.153539}]]

[2018-10-02T11:33:28.249+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538472808249] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]']]

[2018-10-02T11:33:28.258+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538472808258] [levelValue: 800] [[
  {"res":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},"time":2.552003}]]

[2018-10-02T11:33:28.754+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538472808754] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]']]

[2018-10-02T11:33:28.762+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538472808762] [levelValue: 800] [[
  {"res":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},"time":1.975262}]]

[2018-10-02T11:33:29.047+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538472809047] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]']]

[2018-10-02T11:33:29.056+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538472809056] [levelValue: 800] [[
  {"res":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},"time":1.576664}]]

[2018-10-02T11:33:29.277+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538472809277] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]']]

[2018-10-02T11:33:29.289+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538472809289] [levelValue: 800] [[
  {"res":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},"time":2.981391}]]

[2018-10-02T11:33:29.500+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538472809500] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]']]

[2018-10-02T11:33:29.510+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538472809510] [levelValue: 800] [[
  {"res":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},"time":2.148529}]]

[2018-10-02T11:33:30.253+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538472810253] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]']]

[2018-10-02T11:33:30.261+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538472810261] [levelValue: 800] [[
  {"res":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},"time":1.562338}]]

[2018-10-02T11:33:34.325+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538472814325] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T11:33:34.336+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538472814336] [levelValue: 800] [[
  {"res":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}],"time":4.549977}]]

[2018-10-02T11:33:36.112+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538472816112] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T11:33:36.129+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538472816129] [levelValue: 800] [[
  {"res":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}],"time":3.568859}]]

[2018-10-02T11:33:36.775+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538472816775] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T11:33:36.784+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538472816784] [levelValue: 800] [[
  {"res":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}],"time":2.423619}]]

[2018-10-02T11:33:37.398+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538472817398] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T11:33:37.414+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538472817414] [levelValue: 800] [[
  {"res":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}],"time":5.197084}]]

[2018-10-02T11:33:37.653+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538472817653] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T11:33:37.666+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538472817666] [levelValue: 800] [[
  {"res":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}],"time":5.107423}]]

[2018-10-02T11:33:37.918+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538472817918] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T11:33:37.932+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538472817932] [levelValue: 800] [[
  {"res":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}],"time":2.590031}]]

[2018-10-02T11:33:38.235+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538472818235] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T11:33:38.244+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538472818244] [levelValue: 800] [[
  {"res":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}],"time":1.806614}]]

[2018-10-02T11:33:38.470+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538472818470] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T11:33:38.478+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538472818478] [levelValue: 800] [[
  {"res":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}],"time":2.064172}]]

[2018-10-02T11:33:38.701+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538472818701] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T11:33:38.712+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538472818712] [levelValue: 800] [[
  {"res":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}],"time":2.570387}]]

[2018-10-02T11:33:38.910+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538472818910] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T11:33:38.919+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538472818919] [levelValue: 800] [[
  {"res":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}],"time":1.667278}]]

[2018-10-02T11:33:39.136+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538472819136] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T11:33:39.143+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538472819143] [levelValue: 800] [[
  {"res":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}],"time":1.595144}]]

[2018-10-02T11:33:39.612+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538472819612] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T11:33:39.622+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538472819622] [levelValue: 800] [[
  {"res":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}],"time":2.836807}]]

[2018-10-02T11:33:40.702+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538472820702] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T11:33:40.711+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538472820711] [levelValue: 800] [[
  {"res":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}],"time":1.991294}]]

[2018-10-02T11:33:43.775+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538472823775] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b']]

[2018-10-02T11:33:43.787+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538472823787] [levelValue: 800] [[
  {"res":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"time":2.809288}]]

[2018-10-02T11:34:10.339+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538472850339] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a']]

[2018-10-02T11:34:10.352+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538472850352] [levelValue: 800] [[
  {"res":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"time":2.330967}]]

[2018-10-02T11:34:13.410+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538472853410] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a']]

[2018-10-02T11:34:13.420+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538472853420] [levelValue: 800] [[
  {"res":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"time":3.041529}]]

[2018-10-02T11:34:14.724+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538472854724] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a']]

[2018-10-02T11:34:14.734+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538472854734] [levelValue: 800] [[
  {"res":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"time":2.446718}]]

[2018-10-02T11:34:15.197+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538472855197] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a']]

[2018-10-02T11:34:15.209+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538472855209] [levelValue: 800] [[
  {"res":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"time":3.176884}]]

[2018-10-02T11:34:15.431+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538472855431] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a']]

[2018-10-02T11:34:15.440+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538472855440] [levelValue: 800] [[
  {"res":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"time":3.105406}]]

[2018-10-02T11:34:15.684+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538472855684] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a']]

[2018-10-02T11:34:15.694+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538472855694] [levelValue: 800] [[
  {"res":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"time":2.787432}]]

[2018-10-02T11:34:15.904+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538472855904] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a']]

[2018-10-02T11:34:15.915+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538472855915] [levelValue: 800] [[
  {"res":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"time":3.473337}]]

[2018-10-02T11:34:18.391+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538472858391] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c']]

[2018-10-02T11:34:18.402+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538472858402] [levelValue: 800] [[
  {"res":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"}},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"96","l2":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}}},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"time":5.523155}]]

[2018-10-02T11:34:22.493+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538472862493] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a']]

[2018-10-02T11:34:32.161+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538472872161] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c']]

[2018-10-02T11:34:32.177+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538472872177] [levelValue: 800] [[
  {"res":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"}},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"96","l2":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}}},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"time":7.914322}]]

[2018-10-02T11:42:29.655+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538473349655] [levelValue: 800] [[
  Setted DM for sssaLara module orchestrator{	namespace "urn:sssa:orchestrator";	prefix "orchestrator";	extension advertise{		argument advertise{			yin-element false;		}	}	extension period{		argument period{			yin-element false;		}	}	extension minthreshold{		argument minthreshold{			yin-element false;		}	}	extension maxthreshold{		argument maxthreshold{			yin-element false;		}	}	list switches{		key id;		leaf id{			type string;			orchestrator:advertise onchange;		}		leaf ip{			type string;			orchestrator:advertise onchange;		}		leaf mac{			type string;			orchestrator:advertise onchange;		}	}	list load{		key id;		leaf id{			type string;		}		leaf tp{			type int32;			orchestrator:advertise onthreshold;			orchestrator:minthreshold 500;		}	}	container a {		leaf l1 {			type int32;			orchestrator:advertise onchange;		}		leaf l2 {			type string;			orchestrator:advertise onchange;		}		container b {			leaf l1 {				type int32;				orchestrator:advertise onchange;			}			leaf l2 {				type string;				orchestrator:advertise onchange;			}			container c {				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				leaf l3 {					type string;					orchestrator:advertise onchange;				}			}			list l {				key l1;				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }				container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;]]

[2018-10-02T11:42:29.655+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538473349655] [levelValue: 800] [[
  orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }			}		}		container c {			leaf l1 {				type int32;				orchestrator:advertise onchange;			}			leaf l2 {				type string;				orchestrator:advertise onchange;			}			leaf l3 {				type string;				orchestrator:advertise onchange;			}			container a {				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				container b {					leaf l1 {						type int32;						orchestrator:advertise onchange;					}					leaf l2 {						type string;						orchestrator:advertise onchange;					}					container c {						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						leaf l3 {							type string;							orchestrator:advertise onchange;						}						container a {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}					}					list l {						key l1;						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						container b {							leaf l1 {								type int32;								orchestrator:advertise onchange;							}							leaf l2 {								type string;								orchestrator:advertise onchange;							}							list l {								key l1;								leaf l1 {									type int32;									orchestrator:advertise onchange;								}								leaf l2 {									type string;									orchestrator:advertise onchange;								}								container c {									leaf l1 {										type int32;										orchestrator:advertise onchange;									}									leaf l2 {										type string;										orchestrator:advertise onchange;									}									leaf l3 {										type string;										orchestrator:advertise onchange;									}								}							}						}						container c {							leaf l1 {								type int32;								orchestrator:advertise onchange;							}							leaf l2 {								type string;								orchestrator:advertise onchange;							}							leaf l3 {								type string;								orchestrator:advertise onchange;							}							container a {								leaf l1 {									type int32;									orchestrator:advertise onchange;								}								leaf l2 {									type string;									orchestrator:advertise onchange;								}							}						}					}				}				container c {					leaf l1 {						type int32;						orchestrator:advertise onchange;					}					leaf l2 {						type string;						orchestrator:advertise onchange;					}					leaf l3 {						type string;						orchestrator:advertise onchange;					}					container a {						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						container b {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    ty]]

[2018-10-02T11:42:29.655+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538473349655] [levelValue: 800] [[
  pe string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}						container c {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}					}				}			}			container c {			    leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }			    container a {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container b {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        list l {                            key l1;                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1]]

[2018-10-02T11:42:29.655+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538473349655] [levelValue: 800] [[
  {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }			}		}	}	container a2 {        leaf l1 {            type int32;            orchestrator:advertise onchange;        }        leaf l2 {            type string;            orchestrator:advertise onchange;        }        container b {            leaf l1 {                type int32;                orchestrator:advertise onchange;            }            leaf l2 {                type string;                orchestrator:advertise onchange;            }            container c {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }            }            list l {                key l1;                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2]]

[2018-10-02T11:42:29.655+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538473349655] [levelValue: 800] [[
  {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }            }        }        container c {            leaf l1 {                type int32;                orchestrator:advertise onchange;            }            leaf l2 {                type string;                orchestrator:advertise onchange;            }            leaf l3 {                type string;                orchestrator:advertise onchange;            }            container a {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container c {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }]]

[2018-10-02T11:42:29.655+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538473349655] [levelValue: 800] [[
  leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    leaf l3 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }            }            container c {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }                container a {                    leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container a {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type]]

[2018-10-02T11:42:29.655+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538473349655] [levelValue: 800] [[
  string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container b {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    list l {                                        key l1;                                        leaf l1 {                                            type int32;                                            orchestrator:advertise onchange;                                        }                                        leaf l2 {                                            type string;                                            orchestrator:advertise onchange;                                        }                                    }                                }                            }                        }                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                                container c {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    leaf l3 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container a {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                    }    			}    		}    	}}]]

[2018-10-02T11:42:33.212+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538473353212] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c']]

[2018-10-02T11:42:59.184+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538473379184] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a']]

[2018-10-02T11:43:33.411+0200] [glassfish 4.1] [INFO] [] [org.eclipse.persistence.session./file:/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/applications/ConnectionModule/WEB-INF/classes/_com.mycompany_frogsssa_war_1.0-SNAPSHOTPU.connection] [tid: _ThreadID=45 _ThreadName=admin-listener(4)] [timeMillis: 1538473413411] [levelValue: 800] [[
  /file:/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/applications/ConnectionModule/WEB-INF/classes/_com.mycompany_frogsssa_war_1.0-SNAPSHOTPU logout successful]]

[2018-10-02T11:43:33.421+0200] [glassfish 4.1] [SEVERE] [] [javax.enterprise.web.util] [tid: _ThreadID=45 _ThreadName=admin-listener(4)] [timeMillis: 1538473413421] [levelValue: 1000] [[
  The web application [/ConnectionModule-1.0-SNAPSHOT] created a ThreadLocal with key of type [java.lang.ThreadLocal] (value [java.lang.ThreadLocal@7daad518]) and a value of type [zmq.ZMQ.PollSelector] (value [zmq.ZMQ$PollSelector@1f993ce5]) but failed to remove it when the web application was stopped. Threads are going to be renewed over time to try and avoid a probable memory leak.]]

[2018-10-02T11:43:35.458+0200] [glassfish 4.1] [INFO] [NCLS-CORE-00092] [javax.enterprise.system.core] [tid: _ThreadID=182 _ThreadName=Thread-87] [timeMillis: 1538473415458] [levelValue: 800] [[
  Server shutdown initiated]]

[2018-10-02T11:43:35.464+0200] [glassfish 4.1] [INFO] [NCLS-BOOTSTRAP-00028] [javax.enterprise.bootstrap] [tid: _ThreadID=182 _ThreadName=Thread-87] [timeMillis: 1538473415464] [levelValue: 800] [[
  Unregistered com.sun.enterprise.glassfish.bootstrap.osgi.EmbeddedOSGiGlassFishImpl@7c3ebc6b from service registry.]]

[2018-10-02T11:43:35.464+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=182 _ThreadName=Thread-8] [timeMillis: 1538473415464] [levelValue: 800] [[
  FileMonitoring shutdown]]

[2018-10-02T11:43:35.468+0200] [glassfish 4.1] [INFO] [NCLS-JMX-00002] [javax.enterprise.system.jmx] [tid: _ThreadID=182 _ThreadName=Thread-87] [timeMillis: 1538473415468] [levelValue: 800] [[
  JMXStartupService: Stopped JMXConnectorServer: null]]

[2018-10-02T11:43:35.468+0200] [glassfish 4.1] [INFO] [NCLS-JMX-00001] [javax.enterprise.system.jmx] [tid: _ThreadID=182 _ThreadName=Thread-87] [timeMillis: 1538473415468] [levelValue: 800] [[
  JMXStartupService and JMXConnectors have been shut down.]]

[2018-10-02T11:43:35.497+0200] [glassfish 4.1] [WARNING] [] [javax.enterprise.web] [tid: _ThreadID=28 _ThreadName=http-listener-1(1)] [timeMillis: 1538473415497] [levelValue: 900] [[
  StandardWrapperValve[com.mycompany.frogsssa.service.ApplicationConfig]: Servlet.service() for servlet com.mycompany.frogsssa.service.ApplicationConfig threw exception
java.lang.IllegalStateException: ServiceLocatorImpl(__HK2_Generated_3,5,1831597700) has been shut down
	at org.jvnet.hk2.internal.ServiceLocatorImpl.checkState(ServiceLocatorImpl.java:2270)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandleImpl(ServiceLocatorImpl.java:639)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandle(ServiceLocatorImpl.java:632)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandle(ServiceLocatorImpl.java:650)
	at org.jvnet.hk2.internal.FactoryCreator.getFactoryHandle(FactoryCreator.java:103)
	at org.jvnet.hk2.internal.FactoryCreator.dispose(FactoryCreator.java:173)
	at org.jvnet.hk2.internal.SystemDescriptor.dispose(SystemDescriptor.java:526)
	at org.glassfish.jersey.process.internal.RequestScope$Instance.remove(RequestScope.java:532)
	at org.glassfish.jersey.process.internal.RequestScope$Instance.release(RequestScope.java:549)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:319)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139)
	at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:460)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:386)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:334)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:221)
	at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1682)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:318)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:160)
	at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:734)
	at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:673)
	at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:99)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:174)
	at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:416)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:283)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:283)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:200)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:132)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:111)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:536)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571)
	at java.lang.Thread.run(Thread.java:748)
]]

[2018-10-02T11:43:35.497+0200] [glassfish 4.1] [WARNING] [] [javax.enterprise.web] [tid: _ThreadID=32 _ThreadName=http-listener-1(5)] [timeMillis: 1538473415497] [levelValue: 900] [[
  StandardWrapperValve[com.mycompany.frogsssa.service.ApplicationConfig]: Servlet.service() for servlet com.mycompany.frogsssa.service.ApplicationConfig threw exception
java.lang.IllegalStateException: ServiceLocatorImpl(__HK2_Generated_3,5,1831597700) has been shut down
	at org.jvnet.hk2.internal.ServiceLocatorImpl.checkState(ServiceLocatorImpl.java:2270)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandleImpl(ServiceLocatorImpl.java:639)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandle(ServiceLocatorImpl.java:632)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandle(ServiceLocatorImpl.java:650)
	at org.jvnet.hk2.internal.FactoryCreator.getFactoryHandle(FactoryCreator.java:103)
	at org.jvnet.hk2.internal.FactoryCreator.dispose(FactoryCreator.java:173)
	at org.jvnet.hk2.internal.SystemDescriptor.dispose(SystemDescriptor.java:526)
	at org.glassfish.jersey.process.internal.RequestScope$Instance.remove(RequestScope.java:532)
	at org.glassfish.jersey.process.internal.RequestScope$Instance.release(RequestScope.java:549)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:319)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139)
	at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:460)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:386)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:334)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:221)
	at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1682)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:318)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:160)
	at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:734)
	at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:673)
	at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:99)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:174)
	at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:416)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:283)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:283)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:200)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:132)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:111)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:536)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571)
	at java.lang.Thread.run(Thread.java:748)
]]

[2018-10-02T11:43:35.498+0200] [glassfish 4.1] [WARNING] [] [javax.enterprise.web] [tid: _ThreadID=31 _ThreadName=http-listener-1(4)] [timeMillis: 1538473415498] [levelValue: 900] [[
  StandardWrapperValve[com.mycompany.frogsssa.service.ApplicationConfig]: Servlet.service() for servlet com.mycompany.frogsssa.service.ApplicationConfig threw exception
java.lang.IllegalStateException: ServiceLocatorImpl(__HK2_Generated_3,5,1831597700) has been shut down
	at org.jvnet.hk2.internal.ServiceLocatorImpl.checkState(ServiceLocatorImpl.java:2270)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandleImpl(ServiceLocatorImpl.java:639)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandle(ServiceLocatorImpl.java:632)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandle(ServiceLocatorImpl.java:650)
	at org.jvnet.hk2.internal.FactoryCreator.getFactoryHandle(FactoryCreator.java:103)
	at org.jvnet.hk2.internal.FactoryCreator.dispose(FactoryCreator.java:173)
	at org.jvnet.hk2.internal.SystemDescriptor.dispose(SystemDescriptor.java:526)
	at org.glassfish.jersey.process.internal.RequestScope$Instance.remove(RequestScope.java:532)
	at org.glassfish.jersey.process.internal.RequestScope$Instance.release(RequestScope.java:549)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:319)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139)
	at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:460)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:386)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:334)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:221)
	at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1682)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:318)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:160)
	at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:734)
	at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:673)
	at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:99)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:174)
	at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:416)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:283)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:283)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:200)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:132)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:111)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:536)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571)
	at java.lang.Thread.run(Thread.java:748)
]]

[2018-10-02T11:43:35.498+0200] [glassfish 4.1] [WARNING] [] [javax.enterprise.web] [tid: _ThreadID=29 _ThreadName=http-listener-1(2)] [timeMillis: 1538473415498] [levelValue: 900] [[
  StandardWrapperValve[com.mycompany.frogsssa.service.ApplicationConfig]: Servlet.service() for servlet com.mycompany.frogsssa.service.ApplicationConfig threw exception
java.lang.IllegalStateException: ServiceLocatorImpl(__HK2_Generated_3,5,1831597700) has been shut down
	at org.jvnet.hk2.internal.ServiceLocatorImpl.checkState(ServiceLocatorImpl.java:2270)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandleImpl(ServiceLocatorImpl.java:639)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandle(ServiceLocatorImpl.java:632)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandle(ServiceLocatorImpl.java:650)
	at org.jvnet.hk2.internal.FactoryCreator.getFactoryHandle(FactoryCreator.java:103)
	at org.jvnet.hk2.internal.FactoryCreator.dispose(FactoryCreator.java:173)
	at org.jvnet.hk2.internal.SystemDescriptor.dispose(SystemDescriptor.java:526)
	at org.glassfish.jersey.process.internal.RequestScope$Instance.remove(RequestScope.java:532)
	at org.glassfish.jersey.process.internal.RequestScope$Instance.release(RequestScope.java:549)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:319)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139)
	at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:460)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:386)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:334)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:221)
	at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1682)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:318)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:160)
	at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:734)
	at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:673)
	at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:99)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:174)
	at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:416)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:283)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:283)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:200)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:132)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:111)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:536)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571)
	at java.lang.Thread.run(Thread.java:748)
]]

[2018-10-02T11:43:35.498+0200] [glassfish 4.1] [WARNING] [] [javax.enterprise.web] [tid: _ThreadID=30 _ThreadName=http-listener-1(3)] [timeMillis: 1538473415498] [levelValue: 900] [[
  StandardWrapperValve[com.mycompany.frogsssa.service.ApplicationConfig]: Servlet.service() for servlet com.mycompany.frogsssa.service.ApplicationConfig threw exception
java.lang.IllegalStateException: ServiceLocatorImpl(__HK2_Generated_3,5,1831597700) has been shut down
	at org.jvnet.hk2.internal.ServiceLocatorImpl.checkState(ServiceLocatorImpl.java:2270)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandleImpl(ServiceLocatorImpl.java:639)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandle(ServiceLocatorImpl.java:632)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandle(ServiceLocatorImpl.java:650)
	at org.jvnet.hk2.internal.FactoryCreator.getFactoryHandle(FactoryCreator.java:103)
	at org.jvnet.hk2.internal.FactoryCreator.dispose(FactoryCreator.java:173)
	at org.jvnet.hk2.internal.SystemDescriptor.dispose(SystemDescriptor.java:526)
	at org.glassfish.jersey.process.internal.RequestScope$Instance.remove(RequestScope.java:532)
	at org.glassfish.jersey.process.internal.RequestScope$Instance.release(RequestScope.java:549)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:319)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139)
	at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:460)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:386)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:334)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:221)
	at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1682)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:318)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:160)
	at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:734)
	at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:673)
	at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:99)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:174)
	at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:416)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:283)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:283)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:200)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:132)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:111)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:536)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571)
	at java.lang.Thread.run(Thread.java:748)
]]

[2018-10-02T11:43:35.513+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=187 _ThreadName=Thread-8] [timeMillis: 1538473415513] [levelValue: 800] [[
  JdbcRuntimeExtension,  getAllSystemRAResourcesAndPools = [GlassFishConfigBean.org.glassfish.jdbc.config.JdbcResource, GlassFishConfigBean.org.glassfish.jdbc.config.JdbcResource, GlassFishConfigBean.org.glassfish.jdbc.config.JdbcConnectionPool, GlassFishConfigBean.org.glassfish.jdbc.config.JdbcConnectionPool]]]

[2018-10-02T11:43:35.520+0200] [glassfish 4.1] [INFO] [ra.stop-successful] [javax.enterprise.resource.resourceadapter.com.sun.enterprise.connectors.service] [tid: _ThreadID=190 _ThreadName=Thread-94] [timeMillis: 1538473415520] [levelValue: 800] [[
  RAR7094: __ds_jdbc_ra shutdown successful.]]

[2018-10-02T11:43:41.081+0200] [] [INFO] [NCLS-GFLAUNCHER-00005] [javax.enterprise.launcher] [tid: _ThreadID=1 _ThreadName=main] [timeMillis: 1538473421081] [levelValue: 800] [[
  JVM invocation command line:
/usr/lib/jvm/java-8-oracle/bin/java
-cp
/home/gabriele/Applications/glassfish4/glassfish/modules/glassfish.jar
-XX:+UnlockDiagnosticVMOptions
-XX:NewRatio=2
-XX:MaxPermSize=192m
-Xmx512m
-javaagent:/home/gabriele/Applications/glassfish4/glassfish/lib/monitor/flashlight-agent.jar
-client
-Djavax.xml.accessExternalSchema=all
-Djavax.net.ssl.trustStore=/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/config/cacerts.jks
-Djdk.corba.allowOutputStreamSubclass=true
-Dfelix.fileinstall.dir=/home/gabriele/Applications/glassfish4/glassfish/modules/autostart/
-Dorg.glassfish.additionalOSGiBundlesToStart=org.apache.felix.shell,org.apache.felix.gogo.runtime,org.apache.felix.gogo.shell,org.apache.felix.gogo.command,org.apache.felix.shell.remote,org.apache.felix.fileinstall
-Dcom.sun.aas.installRoot=/home/gabriele/Applications/glassfish4/glassfish
-Dfelix.fileinstall.poll=5000
-Djava.endorsed.dirs=/home/gabriele/Applications/glassfish4/glassfish/modules/endorsed:/home/gabriele/Applications/glassfish4/glassfish/lib/endorsed
-Djava.security.policy=/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/config/server.policy
-Dosgi.shell.telnet.maxconn=1
-Dfelix.fileinstall.bundles.startTransient=true
-Dcom.sun.enterprise.config.config_environment_factory_class=com.sun.enterprise.config.serverbeans.AppserverConfigEnvironmentFactory
-Dfelix.fileinstall.log.level=2
-Djavax.net.ssl.keyStore=/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/config/keystore.jks
-Djava.security.auth.login.config=/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/config/login.conf
-Dfelix.fileinstall.disableConfigSave=false
-Dfelix.fileinstall.bundles.new.start=true
-Dcom.sun.aas.instanceRoot=/home/gabriele/Applications/glassfish4/glassfish/domains/domain1
-Dosgi.shell.telnet.port=6666
-Dgosh.args=--nointeractive
-Dcom.sun.enterprise.security.httpsOutboundKeyAlias=s1as
-Dosgi.shell.telnet.ip=127.0.0.1
-DANTLR_USE_DIRECT_CLASS_LOADING=true
-Djava.awt.headless=true
-Dcom.ctc.wstx.returnNullForDefaultNamespace=true
-Djava.ext.dirs=/usr/lib/jvm/java-8-oracle/lib/ext:/usr/lib/jvm/java-8-oracle/jre/lib/ext:/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/lib/ext
-Djdbc.drivers=org.apache.derby.jdbc.ClientDriver
-Djava.library.path=/home/gabriele/Applications/glassfish4/glassfish/lib:/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib
com.sun.enterprise.glassfish.bootstrap.ASMain
-upgrade
false
-domaindir
/home/gabriele/Applications/glassfish4/glassfish/domains/domain1
-read-stdin
true
-asadmin-args
--host,,,localhost,,,--port,,,4848,,,--secure=false,,,--terse=false,,,--echo=false,,,--interactive=true,,,start-domain,,,--verbose=false,,,--watchdog=false,,,--debug=false,,,--domaindir,,,/home/gabriele/Applications/glassfish4/glassfish/domains,,,domain1
-domainname
domain1
-instancename
server
-type
DAS
-verbose
false
-asadmin-classpath
/home/gabriele/Applications/glassfish4/glassfish/lib/client/appserver-cli.jar
-debug
false
-asadmin-classname
com.sun.enterprise.admin.cli.AdminMain]]

[2018-10-02T11:43:42.455+0200] [glassfish 4.1] [INFO] [NCLS-LOGGING-00009] [javax.enterprise.logging] [tid: _ThreadID=17 _ThreadName=RunLevelControllerThread-1538473422389] [timeMillis: 1538473422455] [levelValue: 800] [[
  Running GlassFish Version: GlassFish Server Open Source Edition  4.1.1  (build 3)]]

[2018-10-02T11:43:42.457+0200] [glassfish 4.1] [INFO] [NCLS-LOGGING-00010] [javax.enterprise.logging] [tid: _ThreadID=17 _ThreadName=RunLevelControllerThread-1538473422389] [timeMillis: 1538473422457] [levelValue: 800] [[
  Server log file is using Formatter class: com.sun.enterprise.server.logging.ODLLogFormatter]]

[2018-10-02T11:43:42.545+0200] [glassfish 4.1] [INFO] [NCLS-SECURITY-01115] [javax.enterprise.system.core.security] [tid: _ThreadID=18 _ThreadName=RunLevelControllerThread-1538473422394] [timeMillis: 1538473422545] [levelValue: 800] [[
  Realm [admin-realm] of classtype [com.sun.enterprise.security.auth.realm.file.FileRealm] successfully created.]]

[2018-10-02T11:43:42.546+0200] [glassfish 4.1] [INFO] [NCLS-SECURITY-01115] [javax.enterprise.system.core.security] [tid: _ThreadID=18 _ThreadName=RunLevelControllerThread-1538473422394] [timeMillis: 1538473422546] [levelValue: 800] [[
  Realm [file] of classtype [com.sun.enterprise.security.auth.realm.file.FileRealm] successfully created.]]

[2018-10-02T11:43:42.550+0200] [glassfish 4.1] [INFO] [NCLS-SECURITY-01115] [javax.enterprise.system.core.security] [tid: _ThreadID=18 _ThreadName=RunLevelControllerThread-1538473422394] [timeMillis: 1538473422550] [levelValue: 800] [[
  Realm [certificate] of classtype [com.sun.enterprise.security.auth.realm.certificate.CertificateRealm] successfully created.]]

[2018-10-02T11:43:42.696+0200] [glassfish 4.1] [INFO] [] [org.glassfish.ha.store.spi.BackingStoreFactoryRegistry] [tid: _ThreadID=18 _ThreadName=RunLevelControllerThread-1538473422394] [timeMillis: 1538473422696] [levelValue: 800] [[
  Registered org.glassfish.ha.store.adapter.cache.ShoalBackingStoreProxy for persistence-type = replicated in BackingStoreFactoryRegistry]]

[2018-10-02T11:43:42.813+0200] [glassfish 4.1] [INFO] [SEC-SVCS-00100] [javax.enterprise.security.services] [tid: _ThreadID=19 _ThreadName=RunLevelControllerThread-1538473422395] [timeMillis: 1538473422813] [levelValue: 800] [[
  Authorization Service has successfully initialized.]]

[2018-10-02T11:43:42.879+0200] [glassfish 4.1] [WARNING] [] [org.glassfish.grizzly.config.Utils] [tid: _ThreadID=16 _ThreadName=RunLevelControllerThread-1538473422388] [timeMillis: 1538473422879] [levelValue: 900] [[
  Instance could not be initialized. Class=interface org.glassfish.grizzly.http.server.AddOn, name=http-listener-1, realClassName=org.glassfish.grizzly.http2.Http2AddOn]]

[2018-10-02T11:43:42.915+0200] [glassfish 4.1] [INFO] [NCLS-CORE-00087] [javax.enterprise.system.core] [tid: _ThreadID=16 _ThreadName=RunLevelControllerThread-1538473422388] [timeMillis: 1538473422915] [levelValue: 800] [[
  Grizzly Framework 2.3.23 started in: 13ms - bound to [/0.0.0.0:9090]]]

[2018-10-02T11:43:42.926+0200] [glassfish 4.1] [WARNING] [] [org.glassfish.grizzly.config.Utils] [tid: _ThreadID=16 _ThreadName=RunLevelControllerThread-1538473422388] [timeMillis: 1538473422926] [levelValue: 900] [[
  Instance could not be initialized. Class=interface org.glassfish.grizzly.http.server.AddOn, name=http-listener-2, realClassName=org.glassfish.grizzly.http2.Http2AddOn]]

[2018-10-02T11:43:42.933+0200] [glassfish 4.1] [INFO] [NCLS-CORE-00087] [javax.enterprise.system.core] [tid: _ThreadID=16 _ThreadName=RunLevelControllerThread-1538473422388] [timeMillis: 1538473422933] [levelValue: 800] [[
  Grizzly Framework 2.3.23 started in: 1ms - bound to [/0.0.0.0:8181]]]

[2018-10-02T11:43:42.934+0200] [glassfish 4.1] [WARNING] [] [org.glassfish.grizzly.config.Utils] [tid: _ThreadID=16 _ThreadName=RunLevelControllerThread-1538473422388] [timeMillis: 1538473422934] [levelValue: 900] [[
  Instance could not be initialized. Class=interface org.glassfish.grizzly.http.server.AddOn, name=admin-listener, realClassName=org.glassfish.grizzly.http2.Http2AddOn]]

[2018-10-02T11:43:42.938+0200] [glassfish 4.1] [INFO] [NCLS-CORE-00087] [javax.enterprise.system.core] [tid: _ThreadID=16 _ThreadName=RunLevelControllerThread-1538473422388] [timeMillis: 1538473422938] [levelValue: 800] [[
  Grizzly Framework 2.3.23 started in: 1ms - bound to [/0.0.0.0:4848]]]

[2018-10-02T11:43:42.963+0200] [glassfish 4.1] [INFO] [NCLS-CORE-00087] [javax.enterprise.system.core] [tid: _ThreadID=17 _ThreadName=RunLevelControllerThread-1538473422389] [timeMillis: 1538473422963] [levelValue: 800] [[
  Grizzly Framework 2.3.23 started in: 1ms - bound to [/0.0.0.0:3700]]]

[2018-10-02T11:43:42.963+0200] [glassfish 4.1] [INFO] [NCLS-CORE-00017] [javax.enterprise.system.core] [tid: _ThreadID=1 _ThreadName=main] [timeMillis: 1538473422963] [levelValue: 800] [[
  GlassFish Server Open Source Edition  4.1.1  (3) startup time : Felix (1.157ms), startup services(580ms), total(1.737ms)]]

[2018-10-02T11:43:43.028+0200] [glassfish 4.1] [INFO] [jts.startup_msg] [javax.enterprise.system.core.transaction.com.sun.jts.CosTransactions] [tid: _ThreadID=19 _ThreadName=RunLevelControllerThread-1538473422395] [timeMillis: 1538473423028] [levelValue: 800] [[
  JTS5014: Recoverable JTS instance, serverId = [100]]]

[2018-10-02T11:43:43.107+0200] [glassfish 4.1] [INFO] [NCLS-CORE-00087] [javax.enterprise.system.core] [tid: _ThreadID=18 _ThreadName=RunLevelControllerThread-1538473422394] [timeMillis: 1538473423107] [levelValue: 800] [[
  Grizzly Framework 2.3.23 started in: 7ms - bound to [/0.0.0.0:7676]]]

[2018-10-02T11:43:43.112+0200] [glassfish 4.1] [INFO] [NCLS-BOOTSTRAP-00027] [javax.enterprise.bootstrap] [tid: _ThreadID=1 _ThreadName=main] [timeMillis: 1538473423112] [levelValue: 800] [[
  Registered com.sun.enterprise.glassfish.bootstrap.osgi.EmbeddedOSGiGlassFishImpl@7c3ebc6b as OSGi service registration: org.apache.felix.framework.ServiceRegistrationImpl@5da7cee2.]]

[2018-10-02T11:43:43.120+0200] [glassfish 4.1] [INFO] [NCLS-JMX-00005] [javax.enterprise.system.jmx] [tid: _ThreadID=52 _ThreadName=Thread-13] [timeMillis: 1538473423120] [levelValue: 800] [[
  JMXStartupService has started JMXConnector on JMXService URL service:jmx:rmi://debian-gabriele-hp:8686/jndi/rmi://debian-gabriele-hp:8686/jmxrmi]]

[2018-10-02T11:43:47.443+0200] [glassfish 4.1] [INFO] [NCLS-REST-00001] [javax.enterprise.admin.rest] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473427443] [levelValue: 800] [[
  Listening to REST requests at context: /command/domain.]]

[2018-10-02T11:43:47.519+0200] [glassfish 4.1] [INFO] [] [org.hibernate.validator.internal.util.Version] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473427519] [levelValue: 800] [[
  HV000001: Hibernate Validator 5.1.2.Final]]

[2018-10-02T11:43:48.096+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473428096] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:43:48.538+0200] [glassfish 4.1] [SEVERE] [NCLS-SECURITY-05054] [javax.enterprise.system.security.ssl] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473428538] [levelValue: 1000] [[
  The SSL certificate has expired: [
[
  Version: V3
  Subject: OU=Equifax Secure Certificate Authority, O=Equifax, C=US
  Signature Algorithm: SHA1withRSA, OID = 1.2.840.113549.1.1.5

  Key:  Sun RSA public key, 1024 bits
  modulus: 135786214035069526348186531221551781468391756233528066061569654028671100866720352830303278016129003918213826297308054231261658522889438712013757624116391437358730449661353175673177742307421061340003741057138887918110217006515773038453829253517076741780039735595086881329494037450587568122088113584549069375417
  public exponent: 65537
  Validity: [From: Sat Aug 22 18:41:51 CEST 1998,
               To: Wed Aug 22 18:41:51 CEST 2018]
  Issuer: OU=Equifax Secure Certificate Authority, O=Equifax, C=US
  SerialNumber: [    35def4cf]

Certificate Extensions: 7
[1]: ObjectId: 1.2.840.113533.7.65.0 Criticality=false
Extension unknown: DER encoded OCTET string =
0000: 04 0D 30 0B 1B 05 56 33   2E 30 63 03 02 06 C0     ..0...V3.0c....


[2]: ObjectId: 2.5.29.35 Criticality=false
AuthorityKeyIdentifier [
KeyIdentifier [
0000: 48 E6 68 F9 2B D2 B2 95   D7 47 D8 23 20 10 4F 33  H.h.+....G.# .O3
0010: 98 90 9F D4                                        ....
]
]

[3]: ObjectId: 2.5.29.19 Criticality=false
BasicConstraints:[
  CA:true
  PathLen:2147483647
]

[4]: ObjectId: 2.5.29.31 Criticality=false
CRLDistributionPoints [
  [DistributionPoint:
     [CN=CRL1, OU=Equifax Secure Certificate Authority, O=Equifax, C=US]
]]

[5]: ObjectId: 2.5.29.15 Criticality=false
KeyUsage [
  Key_CertSign
  Crl_Sign
]

[6]: ObjectId: 2.5.29.16 Criticality=false
PrivateKeyUsage: [
To: Wed Aug 22 18:41:51 CEST 2018]

[7]: ObjectId: 2.5.29.14 Criticality=false
SubjectKeyIdentifier [
KeyIdentifier [
0000: 48 E6 68 F9 2B D2 B2 95   D7 47 D8 23 20 10 4F 33  H.h.+....G.# .O3
0010: 98 90 9F D4                                        ....
]
]

]
  Algorithm: [SHA1withRSA]
  Signature:
0000: 58 CE 29 EA FC F7 DE B5   CE 02 B9 17 B5 85 D1 B9  X.).............
0010: E3 E0 95 CC 25 31 0D 00   A6 92 6E 7F B6 92 63 9E  ....%1....n...c.
0020: 50 95 D1 9A 6F E4 11 DE   63 85 6E 98 EE A8 FF 5A  P...o...c.n....Z
0030: C8 D3 55 B2 66 71 57 DE   C0 21 EB 3D 2A A7 23 49  ..U.fqW..!.=*.#I
0040: 01 04 86 42 7B FC EE 7F   A2 16 52 B5 67 67 D3 40  ...B......R.gg.@
0050: DB 3B 26 58 B2 28 77 3D   AE 14 77 61 D6 FA 2A 66  .;&X.(w=..wa..*f
0060: 27 A0 0D FA A7 73 5C EA   70 F1 94 21 65 44 5F FA  '....s\.p..!eD_.
0070: FC EF 29 68 A9 A2 87 79   EF 79 EF 4F AC 07 77 38  ..)h...y.y.O..w8

]]]

[2018-10-02T11:43:48.546+0200] [glassfish 4.1] [SEVERE] [NCLS-SECURITY-05054] [javax.enterprise.system.security.ssl] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473428546] [levelValue: 1000] [[
  The SSL certificate has expired: [
[
  Version: V1
  Subject: CN=GTE CyberTrust Global Root, OU="GTE CyberTrust Solutions, Inc.", O=GTE Corporation, C=US
  Signature Algorithm: MD5withRSA, OID = 1.2.840.113549.1.1.4

  Key:  Sun RSA public key, 1024 bits
  modulus: 104674226241368487598835828377585222181792546532354327780214427055917513664449991602803276678454577364904540367827644455215731003386468752240014232146814457308076052176227490263634768927290191763858631579785604655038492469791381988347440106477066514204303723029602991655085187937840556671697442212352844587673
  public exponent: 65537
  Validity: [From: Thu Aug 13 02:29:00 CEST 1998,
               To: Tue Aug 14 01:59:00 CEST 2018]
  Issuer: CN=GTE CyberTrust Global Root, OU="GTE CyberTrust Solutions, Inc.", O=GTE Corporation, C=US
  SerialNumber: [    01a5]

]
  Algorithm: [MD5withRSA]
  Signature:
0000: 6D EB 1B 09 E9 5E D9 51   DB 67 22 61 A4 2A 3C 48  m....^.Q.g"a.*<H
0010: 77 E3 A0 7C A6 DE 73 A2   14 03 85 3D FB AB 0E 30  w.....s....=...0
0020: C5 83 16 33 81 13 08 9E   7B 34 4E DF 40 C8 74 D7  ...3.....4N.@.t.
0030: B9 7D DC F4 76 55 7D 9B   63 54 18 E9 F0 EA F3 5C  ....vU..cT.....\
0040: B1 D9 8B 42 1E B9 C0 95   4E BA FA D5 E2 7C F5 68  ...B....N......h
0050: 61 BF 8E EC 05 97 5F 5B   B0 D7 A3 85 34 C4 24 A7  a....._[....4.$.
0060: 0D 0F 95 93 EF CB 94 D8   9E 1F 9D 5C 85 6D C7 AA  ...........\.m..
0070: AE 4F 1F 22 B5 CD 95 AD   BA A7 CC F9 AB 0B 7A 7F  .O."..........z.

]]]

[2018-10-02T11:43:48.556+0200] [glassfish 4.1] [INFO] [NCLS-SECURITY-01002] [javax.enterprise.system.core.security] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473428556] [levelValue: 800] [[
  Java security manager is disabled.]]

[2018-10-02T11:43:48.557+0200] [glassfish 4.1] [INFO] [NCLS-SECURITY-01010] [javax.enterprise.system.core.security] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473428557] [levelValue: 800] [[
  Entering Security Startup Service.]]

[2018-10-02T11:43:48.559+0200] [glassfish 4.1] [INFO] [NCLS-SECURITY-01143] [javax.enterprise.system.core.security] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473428559] [levelValue: 800] [[
  Loading policy provider com.sun.enterprise.security.provider.PolicyWrapper.]]

[2018-10-02T11:43:48.583+0200] [glassfish 4.1] [INFO] [NCLS-SECURITY-01011] [javax.enterprise.system.core.security] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473428583] [levelValue: 800] [[
  Security Service(s) started successfully.]]

[2018-10-02T11:43:48.755+0200] [glassfish 4.1] [INFO] [AS-WEB-GLUE-00198] [javax.enterprise.web] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473428755] [levelValue: 800] [[
  Created HTTP listener http-listener-1 on host/port 0.0.0.0:9090]]

[2018-10-02T11:43:48.760+0200] [glassfish 4.1] [INFO] [AS-WEB-GLUE-00198] [javax.enterprise.web] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473428760] [levelValue: 800] [[
  Created HTTP listener http-listener-2 on host/port 0.0.0.0:8181]]

[2018-10-02T11:43:48.762+0200] [glassfish 4.1] [INFO] [AS-WEB-GLUE-00198] [javax.enterprise.web] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473428762] [levelValue: 800] [[
  Created HTTP listener admin-listener on host/port 0.0.0.0:4848]]

[2018-10-02T11:43:48.779+0200] [glassfish 4.1] [INFO] [AS-WEB-GLUE-00200] [javax.enterprise.web] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473428779] [levelValue: 800] [[
  Created virtual server server]]

[2018-10-02T11:43:48.780+0200] [glassfish 4.1] [INFO] [AS-WEB-GLUE-00200] [javax.enterprise.web] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473428780] [levelValue: 800] [[
  Created virtual server __asadmin]]

[2018-10-02T11:43:48.917+0200] [glassfish 4.1] [INFO] [AS-WEB-CORE-00306] [javax.enterprise.web.core] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473428917] [levelValue: 800] [[
  Setting JAAS app name glassfish-web]]

[2018-10-02T11:43:48.918+0200] [glassfish 4.1] [INFO] [AS-WEB-GLUE-00201] [javax.enterprise.web] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473428918] [levelValue: 800] [[
  Virtual server server loaded default web module ]]

[2018-10-02T11:43:49.258+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473429258] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:43:49.381+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473429381] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:43:49.393+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473429393] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:43:49.394+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473429394] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:43:49.395+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473429395] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:43:49.395+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473429395] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:43:49.396+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473429396] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:43:49.396+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473429396] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:43:49.397+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473429397] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:43:49.397+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473429397] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:43:49.398+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473429398] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:43:49.398+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473429398] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:43:49.399+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473429399] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:43:49.400+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473429400] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:43:49.400+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473429400] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:43:49.401+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473429401] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:43:49.402+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473429402] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:43:49.402+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473429402] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:43:49.403+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473429403] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:43:49.403+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473429403] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:43:49.404+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473429404] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:43:49.404+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473429404] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:43:49.405+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473429405] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:43:49.405+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473429405] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:43:49.406+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473429406] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:43:49.407+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473429407] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:43:49.407+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473429407] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:43:49.408+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473429408] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:43:49.408+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473429408] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:43:49.409+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473429409] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:43:49.410+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473429410] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:43:49.410+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473429410] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:43:49.540+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.dol] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473429540] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:43:50.567+0200] [glassfish 4.1] [WARNING] [] [org.eclipse.persistence.default] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473430567] [levelValue: 900] [[
  
java.lang.NullPointerException
	at org.eclipse.persistence.platform.server.ServerPlatformUtils.createServerPlatform(ServerPlatformUtils.java:99)
	at org.eclipse.persistence.sessions.factories.SessionManager.init(SessionManager.java:77)
	at org.eclipse.persistence.sessions.factories.SessionManager.<clinit>(SessionManager.java:71)
	at org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl.addSessionToGlobalSessionManager(EntityManagerSetupImpl.java:907)
	at org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl.initSession(EntityManagerSetupImpl.java:2671)
	at org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl.deploy(EntityManagerSetupImpl.java:675)
	at org.eclipse.persistence.internal.jpa.EntityManagerFactoryDelegate.getAbstractSession(EntityManagerFactoryDelegate.java:205)
	at org.eclipse.persistence.internal.jpa.EntityManagerFactoryDelegate.getDatabaseSession(EntityManagerFactoryDelegate.java:183)
	at org.eclipse.persistence.internal.jpa.EntityManagerFactoryImpl.getDatabaseSession(EntityManagerFactoryImpl.java:528)
	at org.eclipse.persistence.jpa.PersistenceProvider.createContainerEntityManagerFactoryImpl(PersistenceProvider.java:385)
	at org.eclipse.persistence.jpa.PersistenceProvider.createContainerEntityManagerFactory(PersistenceProvider.java:313)
	at org.glassfish.persistence.jpa.PersistenceUnitLoader.loadPU(PersistenceUnitLoader.java:199)
	at org.glassfish.persistence.jpa.PersistenceUnitLoader.<init>(PersistenceUnitLoader.java:107)
	at org.glassfish.persistence.jpa.JPADeployer$1.visitPUD(JPADeployer.java:223)
	at org.glassfish.persistence.jpa.JPADeployer$PersistenceUnitDescriptorIterator.iteratePUDs(JPADeployer.java:510)
	at org.glassfish.persistence.jpa.JPADeployer.createEMFs(JPADeployer.java:230)
	at org.glassfish.persistence.jpa.JPADeployer.prepare(JPADeployer.java:168)
	at com.sun.enterprise.v3.server.ApplicationLifecycle.prepareModule(ApplicationLifecycle.java:925)
	at com.sun.enterprise.v3.server.ApplicationLifecycle.deploy(ApplicationLifecycle.java:434)
	at com.sun.enterprise.v3.server.ApplicationLifecycle.deploy(ApplicationLifecycle.java:219)
	at org.glassfish.deployment.admin.DeployCommand.execute(DeployCommand.java:491)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$2$1.run(CommandRunnerImpl.java:539)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$2$1.run(CommandRunnerImpl.java:535)
	at java.security.AccessController.doPrivileged(Native Method)
	at javax.security.auth.Subject.doAs(Subject.java:360)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$2.execute(CommandRunnerImpl.java:534)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$3.run(CommandRunnerImpl.java:565)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$3.run(CommandRunnerImpl.java:557)
	at java.security.AccessController.doPrivileged(Native Method)
	at javax.security.auth.Subject.doAs(Subject.java:360)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl.doCommand(CommandRunnerImpl.java:556)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl.doCommand(CommandRunnerImpl.java:1464)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl.access$1300(CommandRunnerImpl.java:109)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$ExecutionContext.execute(CommandRunnerImpl.java:1846)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$ExecutionContext.execute(CommandRunnerImpl.java:1722)
	at org.glassfish.admin.rest.resources.admin.CommandResource.executeCommand(CommandResource.java:404)
	at org.glassfish.admin.rest.resources.admin.CommandResource.execCommandSimpInMultOut(CommandResource.java:234)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory$1.invoke(ResourceMethodInvocationHandlerFactory.java:81)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:144)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:161)
	at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:160)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:99)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:389)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:347)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:102)
	at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:309)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:315)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:297)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:267)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139)
	at org.glassfish.jersey.grizzly2.httpserver.GrizzlyHttpContainer.service(GrizzlyHttpContainer.java:375)
	at org.glassfish.admin.rest.adapter.JerseyContainerCommandService$3.service(JerseyContainerCommandService.java:173)
	at org.glassfish.admin.rest.adapter.RestAdapter.service(RestAdapter.java:179)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:283)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:200)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:132)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:111)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:536)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571)
	at java.lang.Thread.run(Thread.java:748)
]]

[2018-10-02T11:43:50.581+0200] [glassfish 4.1] [INFO] [] [org.eclipse.persistence.session./file:/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/applications/ConnectionModule/WEB-INF/classes/_com.mycompany_frogsssa_war_1.0-SNAPSHOTPU] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473430581] [levelValue: 800] [[
  EclipseLink, version: Eclipse Persistence Services - 2.6.1.v20150605-31e8258]]

[2018-10-02T11:43:51.111+0200] [glassfish 4.1] [INFO] [] [org.eclipse.persistence.session./file:/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/applications/ConnectionModule/WEB-INF/classes/_com.mycompany_frogsssa_war_1.0-SNAPSHOTPU.connection] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473431111] [levelValue: 800] [[
  /file:/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/applications/ConnectionModule/WEB-INF/classes/_com.mycompany_frogsssa_war_1.0-SNAPSHOTPU login successful]]

[2018-10-02T11:43:51.177+0200] [glassfish 4.1] [WARNING] [] [org.eclipse.persistence.session./file:/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/applications/ConnectionModule/WEB-INF/classes/_com.mycompany_frogsssa_war_1.0-SNAPSHOTPU] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473431177] [levelValue: 900] [[
  
Local Exception Stack: 
Exception [EclipseLink-4002] (Eclipse Persistence Services - 2.6.1.v20150605-31e8258): org.eclipse.persistence.exceptions.DatabaseException
Internal Exception: java.sql.SQLSyntaxErrorException: Errore di sintassi: Encountered "VALUES" at line 1, column 108.
Error Code: 30000
Call: CREATE TABLE RESOURCES (ID VARCHAR(255) NOT NULL, CORRESPONDENCE BLOB(2147483647), DATAMODEL VARCHAR(255), VALUES BLOB(2147483647), PRIMARY KEY (ID))
Query: DataModifyQuery(sql="CREATE TABLE RESOURCES (ID VARCHAR(255) NOT NULL, CORRESPONDENCE BLOB(2147483647), DATAMODEL VARCHAR(255), VALUES BLOB(2147483647), PRIMARY KEY (ID))")
	at org.eclipse.persistence.exceptions.DatabaseException.sqlException(DatabaseException.java:340)
	at org.eclipse.persistence.internal.databaseaccess.DatabaseAccessor.basicExecuteCall(DatabaseAccessor.java:684)
	at org.eclipse.persistence.internal.databaseaccess.DatabaseAccessor.executeCall(DatabaseAccessor.java:560)
	at org.eclipse.persistence.internal.sessions.AbstractSession.basicExecuteCall(AbstractSession.java:2055)
	at org.eclipse.persistence.sessions.server.ServerSession.executeCall(ServerSession.java:570)
	at org.eclipse.persistence.internal.queries.DatasourceCallQueryMechanism.executeCall(DatasourceCallQueryMechanism.java:242)
	at org.eclipse.persistence.internal.queries.DatasourceCallQueryMechanism.executeCall(DatasourceCallQueryMechanism.java:228)
	at org.eclipse.persistence.internal.queries.DatasourceCallQueryMechanism.executeNoSelectCall(DatasourceCallQueryMechanism.java:271)
	at org.eclipse.persistence.internal.queries.DatasourceCallQueryMechanism.executeNoSelect(DatasourceCallQueryMechanism.java:251)
	at org.eclipse.persistence.queries.DataModifyQuery.executeDatabaseQuery(DataModifyQuery.java:85)
	at org.eclipse.persistence.queries.DatabaseQuery.execute(DatabaseQuery.java:904)
	at org.eclipse.persistence.internal.sessions.AbstractSession.internalExecuteQuery(AbstractSession.java:3267)
	at org.eclipse.persistence.internal.sessions.AbstractSession.executeQuery(AbstractSession.java:1857)
	at org.eclipse.persistence.internal.sessions.AbstractSession.executeQuery(AbstractSession.java:1839)
	at org.eclipse.persistence.internal.sessions.AbstractSession.executeQuery(AbstractSession.java:1790)
	at org.eclipse.persistence.internal.sessions.AbstractSession.priviledgedExecuteNonSelectingCall(AbstractSession.java:5075)
	at org.eclipse.persistence.tools.schemaframework.DatabaseObjectDefinition.createOnDatabase(DatabaseObjectDefinition.java:202)
	at org.eclipse.persistence.tools.schemaframework.SchemaManager.createObject(SchemaManager.java:223)
	at org.eclipse.persistence.tools.schemaframework.TableCreator.createTables(TableCreator.java:165)
	at org.eclipse.persistence.tools.schemaframework.TableCreator.createTables(TableCreator.java:142)
	at org.eclipse.persistence.tools.schemaframework.TableCreator.createTables(TableCreator.java:134)
	at org.eclipse.persistence.tools.schemaframework.SchemaManager.createDefaultTables(SchemaManager.java:1032)
	at org.eclipse.persistence.internal.jpa.EntityManagerFactoryProvider.generateDefaultTables(EntityManagerFactoryProvider.java:109)
	at org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl.writeDDLToDatabase(EntityManagerSetupImpl.java:4215)
	at org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl.writeMetadataDDLToDatabase(EntityManagerSetupImpl.java:4281)
	at org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl.writeDDL(EntityManagerSetupImpl.java:4181)
	at org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl.writeDDL(EntityManagerSetupImpl.java:4054)
	at org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl.deploy(EntityManagerSetupImpl.java:777)
	at org.eclipse.persistence.internal.jpa.EntityManagerFactoryDelegate.getAbstractSession(EntityManagerFactoryDelegate.java:205)
	at org.eclipse.persistence.internal.jpa.EntityManagerFactoryDelegate.getDatabaseSession(EntityManagerFactoryDelegate.java:183)
	at org.eclipse.persistence.internal.jpa.EntityManagerFactoryImpl.getDatabaseSession(EntityManagerFactoryImpl.java:528)
	at org.eclipse.persistence.jpa.PersistenceProvider.createContainerEntityManagerFactoryImpl(PersistenceProvider.java:385)
	at org.eclipse.persistence.jpa.PersistenceProvider.createContainerEntityManagerFactory(PersistenceProvider.java:313)
	at org.glassfish.persistence.jpa.PersistenceUnitLoader.loadPU(PersistenceUnitLoader.java:199)
	at org.glassfish.persistence.jpa.PersistenceUnitLoader.<init>(PersistenceUnitLoader.java:107)
	at org.glassfish.persistence.jpa.JPADeployer$1.visitPUD(JPADeployer.java:223)
	at org.glassfish.persistence.jpa.JPADeployer$PersistenceUnitDescriptorIterator.iteratePUDs(JPADeployer.java:510)
	at org.glassfish.persistence.jpa.JPADeployer.createEMFs(JPADeployer.java:230)
	at org.glassfish.persistence.jpa.JPADeployer.prepare(JPADeployer.java:168)
	at com.sun.enterprise.v3.server.ApplicationLifecycle.prepareModule(ApplicationLifecycle.java:925)
	at com.sun.enterprise.v3.server.ApplicationLifecycle.deploy(ApplicationLifecycle.java:434)
	at com.sun.enterprise.v3.server.ApplicationLifecycle.deploy(ApplicationLifecycle.java:219)
	at org.glassfish.deployment.admin.DeployCommand.execute(DeployCommand.java:491)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$2$1.run(CommandRunnerImpl.java:539)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$2$1.run(CommandRunnerImpl.java:535)
	at java.security.AccessController.doPrivileged(Native Method)
	at javax.security.auth.Subject.doAs(Subject.java:360)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$2.execute(CommandRunnerImpl.java:534)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$3.run(CommandRunnerImpl.java:565)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$3.run(CommandRunnerImpl.java:557)
	at java.security.AccessController.doPrivileged(Native Method)
	at javax.security.auth.Subject.doAs(Subject.java:360)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl.doCommand(CommandRunnerImpl.java:556)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl.doCommand(CommandRunnerImpl.java:1464)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl.access$1300(CommandRunnerImpl.java:109)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$ExecutionContext.execute(CommandRunnerImpl.java:1846)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$ExecutionContext.execute(CommandRunnerImpl.java:1722)
	at org.glassfish.admin.rest.resources.admin.CommandResource.executeCommand(CommandResource.java:404)
	at org.glassfish.admin.rest.resources.admin.CommandResource.execCommandSimpInMultOut(CommandResource.java:234)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory$1.invoke(ResourceMethodInvocationHandlerFactory.java:81)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:144)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:161)
	at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:160)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:99)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:389)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:347)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:102)
	at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:309)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:315)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:297)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:267)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139)
	at org.glassfish.jersey.grizzly2.httpserver.GrizzlyHttpContainer.service(GrizzlyHttpContainer.java:375)
	at org.glassfish.admin.rest.adapter.JerseyContainerCommandService$3.service(JerseyContainerCommandService.java:173)
	at org.glassfish.admin.rest.adapter.RestAdapter.service(RestAdapter.java:179)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:283)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:200)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:132)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:111)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:536)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.sql.SQLSyntaxErrorException: Errore di sintassi: Encountered "VALUES" at line 1, column 108.
	at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(Unknown Source)
	at org.apache.derby.client.am.SqlException.getSQLException(Unknown Source)
	at org.apache.derby.client.am.Connection.prepareStatement(Unknown Source)
	at com.sun.gjc.spi.base.ConnectionHolder.prepareStatement(ConnectionHolder.java:586)
	at com.sun.gjc.spi.jdbc40.ConnectionWrapper40.prepareCachedStatement(ConnectionWrapper40.java:255)
	at com.sun.gjc.spi.jdbc40.ConnectionWrapper40.prepareCachedStatement(ConnectionWrapper40.java:52)
	at com.sun.gjc.spi.ManagedConnectionImpl.prepareCachedStatement(ManagedConnectionImpl.java:992)
	at com.sun.gjc.spi.jdbc40.ConnectionWrapper40.prepareStatement(ConnectionWrapper40.java:173)
	at org.eclipse.persistence.internal.databaseaccess.DatabaseAccessor.prepareStatement(DatabaseAccessor.java:1565)
	at org.eclipse.persistence.internal.databaseaccess.DatabaseAccessor.prepareStatement(DatabaseAccessor.java:1514)
	at org.eclipse.persistence.internal.databaseaccess.DatabaseCall.prepareStatement(DatabaseCall.java:778)
	at org.eclipse.persistence.internal.databaseaccess.DatabaseAccessor.basicExecuteCall(DatabaseAccessor.java:621)
	... 100 more
Caused by: org.apache.derby.client.am.SqlException: Errore di sintassi: Encountered "VALUES" at line 1, column 108.
	at org.apache.derby.client.am.Statement.completeSqlca(Unknown Source)
	at org.apache.derby.client.net.NetStatementReply.parsePrepareError(Unknown Source)
	at org.apache.derby.client.net.NetStatementReply.parsePRPSQLSTTreply(Unknown Source)
	at org.apache.derby.client.net.NetStatementReply.readPrepareDescribeOutput(Unknown Source)
	at org.apache.derby.client.net.StatementReply.readPrepareDescribeOutput(Unknown Source)
	at org.apache.derby.client.net.NetStatement.readPrepareDescribeOutput_(Unknown Source)
	at org.apache.derby.client.am.Statement.readPrepareDescribeOutput(Unknown Source)
	at org.apache.derby.client.am.PreparedStatement.readPrepareDescribeInputOutput(Unknown Source)
	at org.apache.derby.client.am.PreparedStatement.flowPrepareDescribeInputOutput(Unknown Source)
	at org.apache.derby.client.am.PreparedStatement.prepare(Unknown Source)
	at org.apache.derby.client.am.Connection.prepareStatementX(Unknown Source)
	... 110 more
]]

[2018-10-02T11:43:51.313+0200] [glassfish 4.1] [INFO] [AS-EJB-00054] [javax.enterprise.ejb.container] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473431313] [levelValue: 800] [[
  Portable JNDI names for EJB ConnectionModule: [java:global/ConnectionModule/ConnectionModule!com.mycompany.frogsssa.service.ConnectionModule, java:global/ConnectionModule/ConnectionModule]]]

[2018-10-02T11:43:51.333+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=44 _ThreadName=Thread-8] [timeMillis: 1538473431333] [levelValue: 800] [[
  ---PATH---/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/applications/ConnectionModule/WEB-INF/classes/files/keys.json]]

[2018-10-02T11:43:51.774+0200] [glassfish 4.1] [INFO] [] [org.jboss.weld.Version] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473431774] [levelValue: 800] [[
  WELD-000900: 2.2.13 (Final)]]

[2018-10-02T11:43:51.827+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=97 _ThreadName=Thread-8] [timeMillis: 1538473431827] [levelValue: 800] [[
  DD: Registered, cookie: [B@528bb5e2]]

[2018-10-02T11:43:51.827+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=97 _ThreadName=Thread-8] [timeMillis: 1538473431827] [levelValue: 800] [[
  Test DD registered: tcp://127.0.0.1:5555]]

[2018-10-02T11:43:52.220+0200] [glassfish 4.1] [WARN] [] [org.jboss.weld.Interceptor] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473432220] [levelValue: 900] [[
  WELD-001700: Interceptor annotation class javax.ejb.PostActivate not found, interception based on it is not enabled]]

[2018-10-02T11:43:52.220+0200] [glassfish 4.1] [WARN] [] [org.jboss.weld.Interceptor] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473432220] [levelValue: 900] [[
  WELD-001700: Interceptor annotation class javax.ejb.PrePassivate not found, interception based on it is not enabled]]

[2018-10-02T11:43:52.390+0200] [glassfish 4.1] [WARN] [] [org.jboss.weld.Event] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473432390] [levelValue: 900] [[
  WELD-000411: Observer method [BackedAnnotatedMethod] org.glassfish.sse.impl.ServerSentEventCdiExtension.processAnnotatedType(@Observes ProcessAnnotatedType<Object>, BeanManager) receives events for all annotated types. Consider restricting events using @WithAnnotations or a generic type with bounds.]]

[2018-10-02T11:43:52.403+0200] [glassfish 4.1] [WARN] [] [org.jboss.weld.Event] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473432403] [levelValue: 900] [[
  WELD-000411: Observer method [BackedAnnotatedMethod] public org.glassfish.jms.injection.JMSCDIExtension.processAnnotatedType(@Observes ProcessAnnotatedType<Object>) receives events for all annotated types. Consider restricting events using @WithAnnotations or a generic type with bounds.]]

[2018-10-02T11:43:52.409+0200] [glassfish 4.1] [WARN] [] [org.jboss.weld.Event] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473432409] [levelValue: 900] [[
  WELD-000411: Observer method [BackedAnnotatedMethod] private org.glassfish.jersey.ext.cdi1x.internal.CdiComponentProvider.processAnnotatedType(@Observes ProcessAnnotatedType<Object>) receives events for all annotated types. Consider restricting events using @WithAnnotations or a generic type with bounds.]]

[2018-10-02T11:43:53.202+0200] [glassfish 4.1] [SEVERE] [] [] [tid: _ThreadID=44 _ThreadName=Thread-9] [timeMillis: 1538473433202] [levelValue: 1000] [[
  SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".]]

[2018-10-02T11:43:53.203+0200] [glassfish 4.1] [SEVERE] [] [] [tid: _ThreadID=44 _ThreadName=Thread-9] [timeMillis: 1538473433203] [levelValue: 1000] [[
  SLF4J: Defaulting to no-operation (NOP) logger implementation]]

[2018-10-02T11:43:53.203+0200] [glassfish 4.1] [SEVERE] [] [] [tid: _ThreadID=44 _ThreadName=Thread-9] [timeMillis: 1538473433203] [levelValue: 1000] [[
  SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.]]

[2018-10-02T11:43:53.385+0200] [glassfish 4.1] [INFO] [AS-WEB-GLUE-00172] [javax.enterprise.web] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473433385] [levelValue: 800] [[
  Loading application [ConnectionModule] at [/ConnectionModule-1.0-SNAPSHOT]]]

[2018-10-02T11:43:53.476+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.core] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538473433476] [levelValue: 800] [[
  ConnectionModule was successfully deployed in 5.898 milliseconds.]]

[2018-10-02T11:44:00.420+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538473440420] [levelValue: 800] [[
  Setted DM for sssaLara module orchestrator{	namespace "urn:sssa:orchestrator";	prefix "orchestrator";	extension advertise{		argument advertise{			yin-element false;		}	}	extension period{		argument period{			yin-element false;		}	}	extension minthreshold{		argument minthreshold{			yin-element false;		}	}	extension maxthreshold{		argument maxthreshold{			yin-element false;		}	}	list switches{		key id;		leaf id{			type string;			orchestrator:advertise onchange;		}		leaf ip{			type string;			orchestrator:advertise onchange;		}		leaf mac{			type string;			orchestrator:advertise onchange;		}	}	list load{		key id;		leaf id{			type string;		}		leaf tp{			type int32;			orchestrator:advertise onthreshold;			orchestrator:minthreshold 500;		}	}	container a {		leaf l1 {			type int32;			orchestrator:advertise onchange;		}		leaf l2 {			type string;			orchestrator:advertise onchange;		}		container b {			leaf l1 {				type int32;				orchestrator:advertise onchange;			}			leaf l2 {				type string;				orchestrator:advertise onchange;			}			container c {				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				leaf l3 {					type string;					orchestrator:advertise onchange;				}			}			list l {				key l1;				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }				container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;]]

[2018-10-02T11:44:00.420+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538473440420] [levelValue: 800] [[
  orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }			}		}		container c {			leaf l1 {				type int32;				orchestrator:advertise onchange;			}			leaf l2 {				type string;				orchestrator:advertise onchange;			}			leaf l3 {				type string;				orchestrator:advertise onchange;			}			container a {				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				container b {					leaf l1 {						type int32;						orchestrator:advertise onchange;					}					leaf l2 {						type string;						orchestrator:advertise onchange;					}					container c {						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						leaf l3 {							type string;							orchestrator:advertise onchange;						}						container a {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}					}					list l {						key l1;						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						container b {							leaf l1 {								type int32;								orchestrator:advertise onchange;							}							leaf l2 {								type string;								orchestrator:advertise onchange;							}							list l {								key l1;								leaf l1 {									type int32;									orchestrator:advertise onchange;								}								leaf l2 {									type string;									orchestrator:advertise onchange;								}								container c {									leaf l1 {										type int32;										orchestrator:advertise onchange;									}									leaf l2 {										type string;										orchestrator:advertise onchange;									}									leaf l3 {										type string;										orchestrator:advertise onchange;									}								}							}						}						container c {							leaf l1 {								type int32;								orchestrator:advertise onchange;							}							leaf l2 {								type string;								orchestrator:advertise onchange;							}							leaf l3 {								type string;								orchestrator:advertise onchange;							}							container a {								leaf l1 {									type int32;									orchestrator:advertise onchange;								}								leaf l2 {									type string;									orchestrator:advertise onchange;								}							}						}					}				}				container c {					leaf l1 {						type int32;						orchestrator:advertise onchange;					}					leaf l2 {						type string;						orchestrator:advertise onchange;					}					leaf l3 {						type string;						orchestrator:advertise onchange;					}					container a {						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						container b {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    ty]]

[2018-10-02T11:44:00.420+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538473440420] [levelValue: 800] [[
  pe string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}						container c {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}					}				}			}			container c {			    leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }			    container a {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container b {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        list l {                            key l1;                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1]]

[2018-10-02T11:44:00.421+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538473440421] [levelValue: 800] [[
  {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }			}		}	}	container a2 {        leaf l1 {            type int32;            orchestrator:advertise onchange;        }        leaf l2 {            type string;            orchestrator:advertise onchange;        }        container b {            leaf l1 {                type int32;                orchestrator:advertise onchange;            }            leaf l2 {                type string;                orchestrator:advertise onchange;            }            container c {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }            }            list l {                key l1;                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2]]

[2018-10-02T11:44:00.421+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538473440421] [levelValue: 800] [[
  {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }            }        }        container c {            leaf l1 {                type int32;                orchestrator:advertise onchange;            }            leaf l2 {                type string;                orchestrator:advertise onchange;            }            leaf l3 {                type string;                orchestrator:advertise onchange;            }            container a {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container c {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }]]

[2018-10-02T11:44:00.421+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538473440421] [levelValue: 800] [[
  leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    leaf l3 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }            }            container c {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }                container a {                    leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container a {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type]]

[2018-10-02T11:44:00.421+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538473440421] [levelValue: 800] [[
  string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container b {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    list l {                                        key l1;                                        leaf l1 {                                            type int32;                                            orchestrator:advertise onchange;                                        }                                        leaf l2 {                                            type string;                                            orchestrator:advertise onchange;                                        }                                    }                                }                            }                        }                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                                container c {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    leaf l3 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container a {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                    }    			}    		}    	}}]]

[2018-10-02T11:44:05.404+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538473445404] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]/b/c/l1']]

[2018-10-02T11:44:05.563+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538473445563] [levelValue: 800] [[
  {"res":96,"time":14.756371}]]

[2018-10-02T11:44:09.063+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538473449063] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]/b/c']]

[2018-10-02T11:44:09.075+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538473449075] [levelValue: 800] [[
  {"res":{"l1":96,"l2":"96","l3":"lista3"},"time":2.157958}]]

[2018-10-02T11:44:13.445+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538473453445] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]']]

[2018-10-02T11:44:13.458+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538473453458] [levelValue: 800] [[
  {"res":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},"time":5.190782}]]

[2018-10-02T11:44:16.969+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538473456969] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b']]

[2018-10-02T11:44:51.943+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538473491943] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]']]

[2018-10-02T11:44:51.957+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538473491957] [levelValue: 800] [[
  {"res":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},"time":4.211101}]]

[2018-10-02T11:45:22.324+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538473522324] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T11:45:40.222+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538473540222] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T11:53:25.017+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538474005017] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T11:56:29.302+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538474189302] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T11:57:55.194+0200] [glassfish 4.1] [INFO] [] [org.eclipse.persistence.session./file:/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/applications/ConnectionModule/WEB-INF/classes/_com.mycompany_frogsssa_war_1.0-SNAPSHOTPU.connection] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474275194] [levelValue: 800] [[
  /file:/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/applications/ConnectionModule/WEB-INF/classes/_com.mycompany_frogsssa_war_1.0-SNAPSHOTPU logout successful]]

[2018-10-02T11:57:55.202+0200] [glassfish 4.1] [SEVERE] [] [javax.enterprise.web.util] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474275202] [levelValue: 1000] [[
  The web application [/ConnectionModule-1.0-SNAPSHOT] created a ThreadLocal with key of type [java.lang.ThreadLocal] (value [java.lang.ThreadLocal@30b5beac]) and a value of type [zmq.ZMQ.PollSelector] (value [zmq.ZMQ$PollSelector@5ab03d36]) but failed to remove it when the web application was stopped. Threads are going to be renewed over time to try and avoid a probable memory leak.]]

[2018-10-02T11:57:56.833+0200] [glassfish 4.1] [INFO] [NCLS-CORE-00092] [javax.enterprise.system.core] [tid: _ThreadID=144 _ThreadName=Thread-49] [timeMillis: 1538474276833] [levelValue: 800] [[
  Server shutdown initiated]]

[2018-10-02T11:57:56.838+0200] [glassfish 4.1] [INFO] [NCLS-BOOTSTRAP-00028] [javax.enterprise.bootstrap] [tid: _ThreadID=144 _ThreadName=Thread-49] [timeMillis: 1538474276838] [levelValue: 800] [[
  Unregistered com.sun.enterprise.glassfish.bootstrap.osgi.EmbeddedOSGiGlassFishImpl@7c3ebc6b from service registry.]]

[2018-10-02T11:57:56.839+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=144 _ThreadName=Thread-8] [timeMillis: 1538474276839] [levelValue: 800] [[
  FileMonitoring shutdown]]

[2018-10-02T11:57:56.841+0200] [glassfish 4.1] [INFO] [NCLS-JMX-00002] [javax.enterprise.system.jmx] [tid: _ThreadID=144 _ThreadName=Thread-49] [timeMillis: 1538474276841] [levelValue: 800] [[
  JMXStartupService: Stopped JMXConnectorServer: null]]

[2018-10-02T11:57:56.842+0200] [glassfish 4.1] [INFO] [NCLS-JMX-00001] [javax.enterprise.system.jmx] [tid: _ThreadID=144 _ThreadName=Thread-49] [timeMillis: 1538474276842] [levelValue: 800] [[
  JMXStartupService and JMXConnectors have been shut down.]]

[2018-10-02T11:57:56.860+0200] [glassfish 4.1] [WARNING] [] [javax.enterprise.web] [tid: _ThreadID=30 _ThreadName=http-listener-1(3)] [timeMillis: 1538474276860] [levelValue: 900] [[
  StandardWrapperValve[com.mycompany.frogsssa.service.ApplicationConfig]: Servlet.service() for servlet com.mycompany.frogsssa.service.ApplicationConfig threw exception
java.lang.IllegalStateException: ServiceLocatorImpl(__HK2_Generated_3,5,1928214555) has been shut down
	at org.jvnet.hk2.internal.ServiceLocatorImpl.checkState(ServiceLocatorImpl.java:2270)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandleImpl(ServiceLocatorImpl.java:639)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandle(ServiceLocatorImpl.java:632)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandle(ServiceLocatorImpl.java:650)
	at org.jvnet.hk2.internal.FactoryCreator.getFactoryHandle(FactoryCreator.java:103)
	at org.jvnet.hk2.internal.FactoryCreator.dispose(FactoryCreator.java:173)
	at org.jvnet.hk2.internal.SystemDescriptor.dispose(SystemDescriptor.java:526)
	at org.glassfish.jersey.process.internal.RequestScope$Instance.remove(RequestScope.java:532)
	at org.glassfish.jersey.process.internal.RequestScope$Instance.release(RequestScope.java:549)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:319)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139)
	at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:460)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:386)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:334)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:221)
	at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1682)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:318)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:160)
	at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:734)
	at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:673)
	at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:99)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:174)
	at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:416)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:283)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:283)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:200)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:132)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:111)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:536)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571)
	at java.lang.Thread.run(Thread.java:748)
]]

[2018-10-02T11:57:56.860+0200] [glassfish 4.1] [WARNING] [] [javax.enterprise.web] [tid: _ThreadID=28 _ThreadName=http-listener-1(1)] [timeMillis: 1538474276860] [levelValue: 900] [[
  StandardWrapperValve[com.mycompany.frogsssa.service.ApplicationConfig]: Servlet.service() for servlet com.mycompany.frogsssa.service.ApplicationConfig threw exception
java.lang.IllegalStateException: ServiceLocatorImpl(__HK2_Generated_3,5,1928214555) has been shut down
	at org.jvnet.hk2.internal.ServiceLocatorImpl.checkState(ServiceLocatorImpl.java:2270)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandleImpl(ServiceLocatorImpl.java:639)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandle(ServiceLocatorImpl.java:632)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandle(ServiceLocatorImpl.java:650)
	at org.jvnet.hk2.internal.FactoryCreator.getFactoryHandle(FactoryCreator.java:103)
	at org.jvnet.hk2.internal.FactoryCreator.dispose(FactoryCreator.java:173)
	at org.jvnet.hk2.internal.SystemDescriptor.dispose(SystemDescriptor.java:526)
	at org.glassfish.jersey.process.internal.RequestScope$Instance.remove(RequestScope.java:532)
	at org.glassfish.jersey.process.internal.RequestScope$Instance.release(RequestScope.java:549)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:319)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139)
	at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:460)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:386)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:334)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:221)
	at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1682)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:318)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:160)
	at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:734)
	at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:673)
	at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:99)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:174)
	at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:416)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:283)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:283)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:200)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:132)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:111)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:536)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571)
	at java.lang.Thread.run(Thread.java:748)
]]

[2018-10-02T11:57:56.860+0200] [glassfish 4.1] [WARNING] [] [javax.enterprise.web] [tid: _ThreadID=29 _ThreadName=http-listener-1(2)] [timeMillis: 1538474276860] [levelValue: 900] [[
  StandardWrapperValve[com.mycompany.frogsssa.service.ApplicationConfig]: Servlet.service() for servlet com.mycompany.frogsssa.service.ApplicationConfig threw exception
java.lang.IllegalStateException: ServiceLocatorImpl(__HK2_Generated_3,5,1928214555) has been shut down
	at org.jvnet.hk2.internal.ServiceLocatorImpl.checkState(ServiceLocatorImpl.java:2270)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandleImpl(ServiceLocatorImpl.java:639)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandle(ServiceLocatorImpl.java:632)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandle(ServiceLocatorImpl.java:650)
	at org.jvnet.hk2.internal.FactoryCreator.getFactoryHandle(FactoryCreator.java:103)
	at org.jvnet.hk2.internal.FactoryCreator.dispose(FactoryCreator.java:173)
	at org.jvnet.hk2.internal.SystemDescriptor.dispose(SystemDescriptor.java:526)
	at org.glassfish.jersey.process.internal.RequestScope$Instance.remove(RequestScope.java:532)
	at org.glassfish.jersey.process.internal.RequestScope$Instance.release(RequestScope.java:549)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:319)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139)
	at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:460)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:386)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:334)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:221)
	at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1682)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:318)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:160)
	at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:734)
	at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:673)
	at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:99)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:174)
	at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:416)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:283)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:283)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:200)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:132)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:111)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:536)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571)
	at java.lang.Thread.run(Thread.java:748)
]]

[2018-10-02T11:57:56.860+0200] [glassfish 4.1] [WARNING] [] [javax.enterprise.web] [tid: _ThreadID=31 _ThreadName=http-listener-1(4)] [timeMillis: 1538474276860] [levelValue: 900] [[
  StandardWrapperValve[com.mycompany.frogsssa.service.ApplicationConfig]: Servlet.service() for servlet com.mycompany.frogsssa.service.ApplicationConfig threw exception
java.lang.IllegalStateException: ServiceLocatorImpl(__HK2_Generated_3,5,1928214555) has been shut down
	at org.jvnet.hk2.internal.ServiceLocatorImpl.checkState(ServiceLocatorImpl.java:2270)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandleImpl(ServiceLocatorImpl.java:639)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandle(ServiceLocatorImpl.java:632)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandle(ServiceLocatorImpl.java:650)
	at org.jvnet.hk2.internal.FactoryCreator.getFactoryHandle(FactoryCreator.java:103)
	at org.jvnet.hk2.internal.FactoryCreator.dispose(FactoryCreator.java:173)
	at org.jvnet.hk2.internal.SystemDescriptor.dispose(SystemDescriptor.java:526)
	at org.glassfish.jersey.process.internal.RequestScope$Instance.remove(RequestScope.java:532)
	at org.glassfish.jersey.process.internal.RequestScope$Instance.release(RequestScope.java:549)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:319)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139)
	at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:460)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:386)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:334)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:221)
	at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1682)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:318)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:160)
	at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:734)
	at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:673)
	at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:99)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:174)
	at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:416)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:283)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:283)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:200)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:132)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:111)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:536)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571)
	at java.lang.Thread.run(Thread.java:748)
]]

[2018-10-02T11:57:56.860+0200] [glassfish 4.1] [WARNING] [] [javax.enterprise.web] [tid: _ThreadID=32 _ThreadName=http-listener-1(5)] [timeMillis: 1538474276860] [levelValue: 900] [[
  StandardWrapperValve[com.mycompany.frogsssa.service.ApplicationConfig]: Servlet.service() for servlet com.mycompany.frogsssa.service.ApplicationConfig threw exception
java.lang.IllegalStateException: ServiceLocatorImpl(__HK2_Generated_3,5,1928214555) has been shut down
	at org.jvnet.hk2.internal.ServiceLocatorImpl.checkState(ServiceLocatorImpl.java:2270)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandleImpl(ServiceLocatorImpl.java:639)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandle(ServiceLocatorImpl.java:632)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandle(ServiceLocatorImpl.java:650)
	at org.jvnet.hk2.internal.FactoryCreator.getFactoryHandle(FactoryCreator.java:103)
	at org.jvnet.hk2.internal.FactoryCreator.dispose(FactoryCreator.java:173)
	at org.jvnet.hk2.internal.SystemDescriptor.dispose(SystemDescriptor.java:526)
	at org.glassfish.jersey.process.internal.RequestScope$Instance.remove(RequestScope.java:532)
	at org.glassfish.jersey.process.internal.RequestScope$Instance.release(RequestScope.java:549)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:319)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139)
	at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:460)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:386)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:334)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:221)
	at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1682)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:318)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:160)
	at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:734)
	at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:673)
	at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:99)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:174)
	at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:416)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:283)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:283)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:200)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:132)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:111)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:536)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571)
	at java.lang.Thread.run(Thread.java:748)
]]

[2018-10-02T11:57:56.873+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=149 _ThreadName=Thread-8] [timeMillis: 1538474276873] [levelValue: 800] [[
  JdbcRuntimeExtension,  getAllSystemRAResourcesAndPools = [GlassFishConfigBean.org.glassfish.jdbc.config.JdbcResource, GlassFishConfigBean.org.glassfish.jdbc.config.JdbcResource, GlassFishConfigBean.org.glassfish.jdbc.config.JdbcConnectionPool, GlassFishConfigBean.org.glassfish.jdbc.config.JdbcConnectionPool]]]

[2018-10-02T11:57:56.879+0200] [glassfish 4.1] [INFO] [ra.stop-successful] [javax.enterprise.resource.resourceadapter.com.sun.enterprise.connectors.service] [tid: _ThreadID=153 _ThreadName=Thread-57] [timeMillis: 1538474276879] [levelValue: 800] [[
  RAR7094: __ds_jdbc_ra shutdown successful.]]

[2018-10-02T11:58:02.650+0200] [] [INFO] [NCLS-GFLAUNCHER-00005] [javax.enterprise.launcher] [tid: _ThreadID=1 _ThreadName=main] [timeMillis: 1538474282650] [levelValue: 800] [[
  JVM invocation command line:
/usr/lib/jvm/java-8-oracle/bin/java
-cp
/home/gabriele/Applications/glassfish4/glassfish/modules/glassfish.jar
-XX:+UnlockDiagnosticVMOptions
-XX:NewRatio=2
-XX:MaxPermSize=192m
-Xmx512m
-javaagent:/home/gabriele/Applications/glassfish4/glassfish/lib/monitor/flashlight-agent.jar
-client
-Djavax.xml.accessExternalSchema=all
-Djavax.net.ssl.trustStore=/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/config/cacerts.jks
-Djdk.corba.allowOutputStreamSubclass=true
-Dfelix.fileinstall.dir=/home/gabriele/Applications/glassfish4/glassfish/modules/autostart/
-Dorg.glassfish.additionalOSGiBundlesToStart=org.apache.felix.shell,org.apache.felix.gogo.runtime,org.apache.felix.gogo.shell,org.apache.felix.gogo.command,org.apache.felix.shell.remote,org.apache.felix.fileinstall
-Dcom.sun.aas.installRoot=/home/gabriele/Applications/glassfish4/glassfish
-Dfelix.fileinstall.poll=5000
-Djava.endorsed.dirs=/home/gabriele/Applications/glassfish4/glassfish/modules/endorsed:/home/gabriele/Applications/glassfish4/glassfish/lib/endorsed
-Djava.security.policy=/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/config/server.policy
-Dosgi.shell.telnet.maxconn=1
-Dfelix.fileinstall.bundles.startTransient=true
-Dcom.sun.enterprise.config.config_environment_factory_class=com.sun.enterprise.config.serverbeans.AppserverConfigEnvironmentFactory
-Dfelix.fileinstall.log.level=2
-Djavax.net.ssl.keyStore=/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/config/keystore.jks
-Djava.security.auth.login.config=/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/config/login.conf
-Dfelix.fileinstall.disableConfigSave=false
-Dfelix.fileinstall.bundles.new.start=true
-Dcom.sun.aas.instanceRoot=/home/gabriele/Applications/glassfish4/glassfish/domains/domain1
-Dosgi.shell.telnet.port=6666
-Dgosh.args=--nointeractive
-Dcom.sun.enterprise.security.httpsOutboundKeyAlias=s1as
-Dosgi.shell.telnet.ip=127.0.0.1
-DANTLR_USE_DIRECT_CLASS_LOADING=true
-Djava.awt.headless=true
-Dcom.ctc.wstx.returnNullForDefaultNamespace=true
-Djava.ext.dirs=/usr/lib/jvm/java-8-oracle/lib/ext:/usr/lib/jvm/java-8-oracle/jre/lib/ext:/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/lib/ext
-Djdbc.drivers=org.apache.derby.jdbc.ClientDriver
-Djava.library.path=/home/gabriele/Applications/glassfish4/glassfish/lib:/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib
com.sun.enterprise.glassfish.bootstrap.ASMain
-upgrade
false
-domaindir
/home/gabriele/Applications/glassfish4/glassfish/domains/domain1
-read-stdin
true
-asadmin-args
--host,,,localhost,,,--port,,,4848,,,--secure=false,,,--terse=false,,,--echo=false,,,--interactive=true,,,start-domain,,,--verbose=false,,,--watchdog=false,,,--debug=false,,,--domaindir,,,/home/gabriele/Applications/glassfish4/glassfish/domains,,,domain1
-domainname
domain1
-instancename
server
-type
DAS
-verbose
false
-asadmin-classpath
/home/gabriele/Applications/glassfish4/glassfish/lib/client/appserver-cli.jar
-debug
false
-asadmin-classname
com.sun.enterprise.admin.cli.AdminMain]]

[2018-10-02T11:58:04.035+0200] [glassfish 4.1] [INFO] [NCLS-LOGGING-00009] [javax.enterprise.logging] [tid: _ThreadID=17 _ThreadName=RunLevelControllerThread-1538474283965] [timeMillis: 1538474284035] [levelValue: 800] [[
  Running GlassFish Version: GlassFish Server Open Source Edition  4.1.1  (build 3)]]

[2018-10-02T11:58:04.036+0200] [glassfish 4.1] [INFO] [NCLS-LOGGING-00010] [javax.enterprise.logging] [tid: _ThreadID=17 _ThreadName=RunLevelControllerThread-1538474283965] [timeMillis: 1538474284036] [levelValue: 800] [[
  Server log file is using Formatter class: com.sun.enterprise.server.logging.ODLLogFormatter]]

[2018-10-02T11:58:04.129+0200] [glassfish 4.1] [INFO] [NCLS-SECURITY-01115] [javax.enterprise.system.core.security] [tid: _ThreadID=19 _ThreadName=RunLevelControllerThread-1538474283971] [timeMillis: 1538474284129] [levelValue: 800] [[
  Realm [admin-realm] of classtype [com.sun.enterprise.security.auth.realm.file.FileRealm] successfully created.]]

[2018-10-02T11:58:04.130+0200] [glassfish 4.1] [INFO] [NCLS-SECURITY-01115] [javax.enterprise.system.core.security] [tid: _ThreadID=19 _ThreadName=RunLevelControllerThread-1538474283971] [timeMillis: 1538474284130] [levelValue: 800] [[
  Realm [file] of classtype [com.sun.enterprise.security.auth.realm.file.FileRealm] successfully created.]]

[2018-10-02T11:58:04.134+0200] [glassfish 4.1] [INFO] [NCLS-SECURITY-01115] [javax.enterprise.system.core.security] [tid: _ThreadID=19 _ThreadName=RunLevelControllerThread-1538474283971] [timeMillis: 1538474284134] [levelValue: 800] [[
  Realm [certificate] of classtype [com.sun.enterprise.security.auth.realm.certificate.CertificateRealm] successfully created.]]

[2018-10-02T11:58:04.258+0200] [glassfish 4.1] [INFO] [SEC-SVCS-00100] [javax.enterprise.security.services] [tid: _ThreadID=17 _ThreadName=RunLevelControllerThread-1538474283965] [timeMillis: 1538474284258] [levelValue: 800] [[
  Authorization Service has successfully initialized.]]

[2018-10-02T11:58:04.399+0200] [glassfish 4.1] [INFO] [] [org.glassfish.ha.store.spi.BackingStoreFactoryRegistry] [tid: _ThreadID=17 _ThreadName=RunLevelControllerThread-1538474283965] [timeMillis: 1538474284399] [levelValue: 800] [[
  Registered org.glassfish.ha.store.adapter.cache.ShoalBackingStoreProxy for persistence-type = replicated in BackingStoreFactoryRegistry]]

[2018-10-02T11:58:04.461+0200] [glassfish 4.1] [WARNING] [] [org.glassfish.grizzly.config.Utils] [tid: _ThreadID=16 _ThreadName=RunLevelControllerThread-1538474283965] [timeMillis: 1538474284461] [levelValue: 900] [[
  Instance could not be initialized. Class=interface org.glassfish.grizzly.http.server.AddOn, name=http-listener-1, realClassName=org.glassfish.grizzly.http2.Http2AddOn]]

[2018-10-02T11:58:04.489+0200] [glassfish 4.1] [INFO] [NCLS-CORE-00087] [javax.enterprise.system.core] [tid: _ThreadID=16 _ThreadName=RunLevelControllerThread-1538474283965] [timeMillis: 1538474284489] [levelValue: 800] [[
  Grizzly Framework 2.3.23 started in: 12ms - bound to [/0.0.0.0:9090]]]

[2018-10-02T11:58:04.500+0200] [glassfish 4.1] [WARNING] [] [org.glassfish.grizzly.config.Utils] [tid: _ThreadID=16 _ThreadName=RunLevelControllerThread-1538474283965] [timeMillis: 1538474284500] [levelValue: 900] [[
  Instance could not be initialized. Class=interface org.glassfish.grizzly.http.server.AddOn, name=http-listener-2, realClassName=org.glassfish.grizzly.http2.Http2AddOn]]

[2018-10-02T11:58:04.508+0200] [glassfish 4.1] [INFO] [NCLS-CORE-00087] [javax.enterprise.system.core] [tid: _ThreadID=16 _ThreadName=RunLevelControllerThread-1538474283965] [timeMillis: 1538474284508] [levelValue: 800] [[
  Grizzly Framework 2.3.23 started in: 4ms - bound to [/0.0.0.0:8181]]]

[2018-10-02T11:58:04.510+0200] [glassfish 4.1] [WARNING] [] [org.glassfish.grizzly.config.Utils] [tid: _ThreadID=16 _ThreadName=RunLevelControllerThread-1538474283965] [timeMillis: 1538474284510] [levelValue: 900] [[
  Instance could not be initialized. Class=interface org.glassfish.grizzly.http.server.AddOn, name=admin-listener, realClassName=org.glassfish.grizzly.http2.Http2AddOn]]

[2018-10-02T11:58:04.518+0200] [glassfish 4.1] [INFO] [NCLS-CORE-00087] [javax.enterprise.system.core] [tid: _ThreadID=16 _ThreadName=RunLevelControllerThread-1538474283965] [timeMillis: 1538474284518] [levelValue: 800] [[
  Grizzly Framework 2.3.23 started in: 1ms - bound to [/0.0.0.0:4848]]]

[2018-10-02T11:58:04.545+0200] [glassfish 4.1] [INFO] [NCLS-CORE-00087] [javax.enterprise.system.core] [tid: _ThreadID=18 _ThreadName=RunLevelControllerThread-1538474283970] [timeMillis: 1538474284545] [levelValue: 800] [[
  Grizzly Framework 2.3.23 started in: 0ms - bound to [/0.0.0.0:3700]]]

[2018-10-02T11:58:04.546+0200] [glassfish 4.1] [INFO] [NCLS-CORE-00017] [javax.enterprise.system.core] [tid: _ThreadID=1 _ThreadName=main] [timeMillis: 1538474284546] [levelValue: 800] [[
  GlassFish Server Open Source Edition  4.1.1  (3) startup time : Felix (1.164ms), startup services(586ms), total(1.750ms)]]

[2018-10-02T11:58:04.627+0200] [glassfish 4.1] [INFO] [jts.startup_msg] [javax.enterprise.system.core.transaction.com.sun.jts.CosTransactions] [tid: _ThreadID=17 _ThreadName=RunLevelControllerThread-1538474283965] [timeMillis: 1538474284627] [levelValue: 800] [[
  JTS5014: Recoverable JTS instance, serverId = [100]]]

[2018-10-02T11:58:04.707+0200] [glassfish 4.1] [INFO] [NCLS-CORE-00087] [javax.enterprise.system.core] [tid: _ThreadID=16 _ThreadName=RunLevelControllerThread-1538474283965] [timeMillis: 1538474284707] [levelValue: 800] [[
  Grizzly Framework 2.3.23 started in: 3ms - bound to [/0.0.0.0:7676]]]

[2018-10-02T11:58:04.710+0200] [glassfish 4.1] [INFO] [NCLS-BOOTSTRAP-00027] [javax.enterprise.bootstrap] [tid: _ThreadID=1 _ThreadName=main] [timeMillis: 1538474284710] [levelValue: 800] [[
  Registered com.sun.enterprise.glassfish.bootstrap.osgi.EmbeddedOSGiGlassFishImpl@7c3ebc6b as OSGi service registration: org.apache.felix.framework.ServiceRegistrationImpl@5da7cee2.]]

[2018-10-02T11:58:04.728+0200] [glassfish 4.1] [INFO] [NCLS-JMX-00005] [javax.enterprise.system.jmx] [tid: _ThreadID=52 _ThreadName=Thread-13] [timeMillis: 1538474284728] [levelValue: 800] [[
  JMXStartupService has started JMXConnector on JMXService URL service:jmx:rmi://debian-gabriele-hp:8686/jndi/rmi://debian-gabriele-hp:8686/jmxrmi]]

[2018-10-02T11:58:11.850+0200] [glassfish 4.1] [INFO] [NCLS-REST-00001] [javax.enterprise.admin.rest] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474291850] [levelValue: 800] [[
  Listening to REST requests at context: /command/domain.]]

[2018-10-02T11:58:11.930+0200] [glassfish 4.1] [INFO] [] [org.hibernate.validator.internal.util.Version] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474291930] [levelValue: 800] [[
  HV000001: Hibernate Validator 5.1.2.Final]]

[2018-10-02T11:58:12.468+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474292468] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:58:12.897+0200] [glassfish 4.1] [SEVERE] [NCLS-SECURITY-05054] [javax.enterprise.system.security.ssl] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474292897] [levelValue: 1000] [[
  The SSL certificate has expired: [
[
  Version: V3
  Subject: OU=Equifax Secure Certificate Authority, O=Equifax, C=US
  Signature Algorithm: SHA1withRSA, OID = 1.2.840.113549.1.1.5

  Key:  Sun RSA public key, 1024 bits
  modulus: 135786214035069526348186531221551781468391756233528066061569654028671100866720352830303278016129003918213826297308054231261658522889438712013757624116391437358730449661353175673177742307421061340003741057138887918110217006515773038453829253517076741780039735595086881329494037450587568122088113584549069375417
  public exponent: 65537
  Validity: [From: Sat Aug 22 18:41:51 CEST 1998,
               To: Wed Aug 22 18:41:51 CEST 2018]
  Issuer: OU=Equifax Secure Certificate Authority, O=Equifax, C=US
  SerialNumber: [    35def4cf]

Certificate Extensions: 7
[1]: ObjectId: 1.2.840.113533.7.65.0 Criticality=false
Extension unknown: DER encoded OCTET string =
0000: 04 0D 30 0B 1B 05 56 33   2E 30 63 03 02 06 C0     ..0...V3.0c....


[2]: ObjectId: 2.5.29.35 Criticality=false
AuthorityKeyIdentifier [
KeyIdentifier [
0000: 48 E6 68 F9 2B D2 B2 95   D7 47 D8 23 20 10 4F 33  H.h.+....G.# .O3
0010: 98 90 9F D4                                        ....
]
]

[3]: ObjectId: 2.5.29.19 Criticality=false
BasicConstraints:[
  CA:true
  PathLen:2147483647
]

[4]: ObjectId: 2.5.29.31 Criticality=false
CRLDistributionPoints [
  [DistributionPoint:
     [CN=CRL1, OU=Equifax Secure Certificate Authority, O=Equifax, C=US]
]]

[5]: ObjectId: 2.5.29.15 Criticality=false
KeyUsage [
  Key_CertSign
  Crl_Sign
]

[6]: ObjectId: 2.5.29.16 Criticality=false
PrivateKeyUsage: [
To: Wed Aug 22 18:41:51 CEST 2018]

[7]: ObjectId: 2.5.29.14 Criticality=false
SubjectKeyIdentifier [
KeyIdentifier [
0000: 48 E6 68 F9 2B D2 B2 95   D7 47 D8 23 20 10 4F 33  H.h.+....G.# .O3
0010: 98 90 9F D4                                        ....
]
]

]
  Algorithm: [SHA1withRSA]
  Signature:
0000: 58 CE 29 EA FC F7 DE B5   CE 02 B9 17 B5 85 D1 B9  X.).............
0010: E3 E0 95 CC 25 31 0D 00   A6 92 6E 7F B6 92 63 9E  ....%1....n...c.
0020: 50 95 D1 9A 6F E4 11 DE   63 85 6E 98 EE A8 FF 5A  P...o...c.n....Z
0030: C8 D3 55 B2 66 71 57 DE   C0 21 EB 3D 2A A7 23 49  ..U.fqW..!.=*.#I
0040: 01 04 86 42 7B FC EE 7F   A2 16 52 B5 67 67 D3 40  ...B......R.gg.@
0050: DB 3B 26 58 B2 28 77 3D   AE 14 77 61 D6 FA 2A 66  .;&X.(w=..wa..*f
0060: 27 A0 0D FA A7 73 5C EA   70 F1 94 21 65 44 5F FA  '....s\.p..!eD_.
0070: FC EF 29 68 A9 A2 87 79   EF 79 EF 4F AC 07 77 38  ..)h...y.y.O..w8

]]]

[2018-10-02T11:58:12.905+0200] [glassfish 4.1] [SEVERE] [NCLS-SECURITY-05054] [javax.enterprise.system.security.ssl] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474292905] [levelValue: 1000] [[
  The SSL certificate has expired: [
[
  Version: V1
  Subject: CN=GTE CyberTrust Global Root, OU="GTE CyberTrust Solutions, Inc.", O=GTE Corporation, C=US
  Signature Algorithm: MD5withRSA, OID = 1.2.840.113549.1.1.4

  Key:  Sun RSA public key, 1024 bits
  modulus: 104674226241368487598835828377585222181792546532354327780214427055917513664449991602803276678454577364904540367827644455215731003386468752240014232146814457308076052176227490263634768927290191763858631579785604655038492469791381988347440106477066514204303723029602991655085187937840556671697442212352844587673
  public exponent: 65537
  Validity: [From: Thu Aug 13 02:29:00 CEST 1998,
               To: Tue Aug 14 01:59:00 CEST 2018]
  Issuer: CN=GTE CyberTrust Global Root, OU="GTE CyberTrust Solutions, Inc.", O=GTE Corporation, C=US
  SerialNumber: [    01a5]

]
  Algorithm: [MD5withRSA]
  Signature:
0000: 6D EB 1B 09 E9 5E D9 51   DB 67 22 61 A4 2A 3C 48  m....^.Q.g"a.*<H
0010: 77 E3 A0 7C A6 DE 73 A2   14 03 85 3D FB AB 0E 30  w.....s....=...0
0020: C5 83 16 33 81 13 08 9E   7B 34 4E DF 40 C8 74 D7  ...3.....4N.@.t.
0030: B9 7D DC F4 76 55 7D 9B   63 54 18 E9 F0 EA F3 5C  ....vU..cT.....\
0040: B1 D9 8B 42 1E B9 C0 95   4E BA FA D5 E2 7C F5 68  ...B....N......h
0050: 61 BF 8E EC 05 97 5F 5B   B0 D7 A3 85 34 C4 24 A7  a....._[....4.$.
0060: 0D 0F 95 93 EF CB 94 D8   9E 1F 9D 5C 85 6D C7 AA  ...........\.m..
0070: AE 4F 1F 22 B5 CD 95 AD   BA A7 CC F9 AB 0B 7A 7F  .O."..........z.

]]]

[2018-10-02T11:58:12.916+0200] [glassfish 4.1] [INFO] [NCLS-SECURITY-01002] [javax.enterprise.system.core.security] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474292916] [levelValue: 800] [[
  Java security manager is disabled.]]

[2018-10-02T11:58:12.917+0200] [glassfish 4.1] [INFO] [NCLS-SECURITY-01010] [javax.enterprise.system.core.security] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474292917] [levelValue: 800] [[
  Entering Security Startup Service.]]

[2018-10-02T11:58:12.919+0200] [glassfish 4.1] [INFO] [NCLS-SECURITY-01143] [javax.enterprise.system.core.security] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474292919] [levelValue: 800] [[
  Loading policy provider com.sun.enterprise.security.provider.PolicyWrapper.]]

[2018-10-02T11:58:12.945+0200] [glassfish 4.1] [INFO] [NCLS-SECURITY-01011] [javax.enterprise.system.core.security] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474292945] [levelValue: 800] [[
  Security Service(s) started successfully.]]

[2018-10-02T11:58:13.066+0200] [glassfish 4.1] [INFO] [AS-WEB-GLUE-00198] [javax.enterprise.web] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474293066] [levelValue: 800] [[
  Created HTTP listener http-listener-1 on host/port 0.0.0.0:9090]]

[2018-10-02T11:58:13.071+0200] [glassfish 4.1] [INFO] [AS-WEB-GLUE-00198] [javax.enterprise.web] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474293071] [levelValue: 800] [[
  Created HTTP listener http-listener-2 on host/port 0.0.0.0:8181]]

[2018-10-02T11:58:13.074+0200] [glassfish 4.1] [INFO] [AS-WEB-GLUE-00198] [javax.enterprise.web] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474293074] [levelValue: 800] [[
  Created HTTP listener admin-listener on host/port 0.0.0.0:4848]]

[2018-10-02T11:58:13.091+0200] [glassfish 4.1] [INFO] [AS-WEB-GLUE-00200] [javax.enterprise.web] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474293091] [levelValue: 800] [[
  Created virtual server server]]

[2018-10-02T11:58:13.092+0200] [glassfish 4.1] [INFO] [AS-WEB-GLUE-00200] [javax.enterprise.web] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474293092] [levelValue: 800] [[
  Created virtual server __asadmin]]

[2018-10-02T11:58:13.218+0200] [glassfish 4.1] [INFO] [AS-WEB-CORE-00306] [javax.enterprise.web.core] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474293218] [levelValue: 800] [[
  Setting JAAS app name glassfish-web]]

[2018-10-02T11:58:13.218+0200] [glassfish 4.1] [INFO] [AS-WEB-GLUE-00201] [javax.enterprise.web] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474293218] [levelValue: 800] [[
  Virtual server server loaded default web module ]]

[2018-10-02T11:58:13.578+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474293578] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:58:13.687+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474293687] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:58:13.701+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474293701] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:58:13.702+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474293702] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:58:13.702+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474293702] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:58:13.703+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474293703] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:58:13.703+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474293703] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:58:13.704+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474293704] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:58:13.704+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474293704] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:58:13.705+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474293705] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:58:13.705+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474293705] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:58:13.705+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474293705] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:58:13.706+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474293706] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:58:13.706+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474293706] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:58:13.707+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474293707] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:58:13.707+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474293707] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:58:13.708+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474293708] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:58:13.708+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474293708] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:58:13.709+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474293709] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:58:13.709+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474293709] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:58:13.710+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474293710] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:58:13.710+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474293710] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:58:13.711+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474293711] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:58:13.711+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474293711] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:58:13.712+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474293712] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:58:13.712+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474293712] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:58:13.712+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474293712] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:58:13.713+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474293713] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:58:13.713+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474293713] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:58:13.714+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474293714] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:58:13.714+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474293714] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:58:13.715+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474293715] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:58:13.835+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.dol] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474293835] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T11:58:14.864+0200] [glassfish 4.1] [WARNING] [] [org.eclipse.persistence.default] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474294864] [levelValue: 900] [[
  
java.lang.NullPointerException
	at org.eclipse.persistence.platform.server.ServerPlatformUtils.createServerPlatform(ServerPlatformUtils.java:99)
	at org.eclipse.persistence.sessions.factories.SessionManager.init(SessionManager.java:77)
	at org.eclipse.persistence.sessions.factories.SessionManager.<clinit>(SessionManager.java:71)
	at org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl.addSessionToGlobalSessionManager(EntityManagerSetupImpl.java:907)
	at org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl.initSession(EntityManagerSetupImpl.java:2671)
	at org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl.deploy(EntityManagerSetupImpl.java:675)
	at org.eclipse.persistence.internal.jpa.EntityManagerFactoryDelegate.getAbstractSession(EntityManagerFactoryDelegate.java:205)
	at org.eclipse.persistence.internal.jpa.EntityManagerFactoryDelegate.getDatabaseSession(EntityManagerFactoryDelegate.java:183)
	at org.eclipse.persistence.internal.jpa.EntityManagerFactoryImpl.getDatabaseSession(EntityManagerFactoryImpl.java:528)
	at org.eclipse.persistence.jpa.PersistenceProvider.createContainerEntityManagerFactoryImpl(PersistenceProvider.java:385)
	at org.eclipse.persistence.jpa.PersistenceProvider.createContainerEntityManagerFactory(PersistenceProvider.java:313)
	at org.glassfish.persistence.jpa.PersistenceUnitLoader.loadPU(PersistenceUnitLoader.java:199)
	at org.glassfish.persistence.jpa.PersistenceUnitLoader.<init>(PersistenceUnitLoader.java:107)
	at org.glassfish.persistence.jpa.JPADeployer$1.visitPUD(JPADeployer.java:223)
	at org.glassfish.persistence.jpa.JPADeployer$PersistenceUnitDescriptorIterator.iteratePUDs(JPADeployer.java:510)
	at org.glassfish.persistence.jpa.JPADeployer.createEMFs(JPADeployer.java:230)
	at org.glassfish.persistence.jpa.JPADeployer.prepare(JPADeployer.java:168)
	at com.sun.enterprise.v3.server.ApplicationLifecycle.prepareModule(ApplicationLifecycle.java:925)
	at com.sun.enterprise.v3.server.ApplicationLifecycle.deploy(ApplicationLifecycle.java:434)
	at com.sun.enterprise.v3.server.ApplicationLifecycle.deploy(ApplicationLifecycle.java:219)
	at org.glassfish.deployment.admin.DeployCommand.execute(DeployCommand.java:491)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$2$1.run(CommandRunnerImpl.java:539)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$2$1.run(CommandRunnerImpl.java:535)
	at java.security.AccessController.doPrivileged(Native Method)
	at javax.security.auth.Subject.doAs(Subject.java:360)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$2.execute(CommandRunnerImpl.java:534)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$3.run(CommandRunnerImpl.java:565)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$3.run(CommandRunnerImpl.java:557)
	at java.security.AccessController.doPrivileged(Native Method)
	at javax.security.auth.Subject.doAs(Subject.java:360)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl.doCommand(CommandRunnerImpl.java:556)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl.doCommand(CommandRunnerImpl.java:1464)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl.access$1300(CommandRunnerImpl.java:109)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$ExecutionContext.execute(CommandRunnerImpl.java:1846)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$ExecutionContext.execute(CommandRunnerImpl.java:1722)
	at org.glassfish.admin.rest.resources.admin.CommandResource.executeCommand(CommandResource.java:404)
	at org.glassfish.admin.rest.resources.admin.CommandResource.execCommandSimpInMultOut(CommandResource.java:234)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory$1.invoke(ResourceMethodInvocationHandlerFactory.java:81)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:144)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:161)
	at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:160)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:99)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:389)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:347)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:102)
	at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:309)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:315)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:297)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:267)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139)
	at org.glassfish.jersey.grizzly2.httpserver.GrizzlyHttpContainer.service(GrizzlyHttpContainer.java:375)
	at org.glassfish.admin.rest.adapter.JerseyContainerCommandService$3.service(JerseyContainerCommandService.java:173)
	at org.glassfish.admin.rest.adapter.RestAdapter.service(RestAdapter.java:179)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:283)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:200)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:132)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:111)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:536)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571)
	at java.lang.Thread.run(Thread.java:748)
]]

[2018-10-02T11:58:14.884+0200] [glassfish 4.1] [INFO] [] [org.eclipse.persistence.session./file:/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/applications/ConnectionModule/WEB-INF/classes/_com.mycompany_frogsssa_war_1.0-SNAPSHOTPU] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474294884] [levelValue: 800] [[
  EclipseLink, version: Eclipse Persistence Services - 2.6.1.v20150605-31e8258]]

[2018-10-02T11:58:15.467+0200] [glassfish 4.1] [INFO] [] [org.eclipse.persistence.session./file:/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/applications/ConnectionModule/WEB-INF/classes/_com.mycompany_frogsssa_war_1.0-SNAPSHOTPU.connection] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474295467] [levelValue: 800] [[
  /file:/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/applications/ConnectionModule/WEB-INF/classes/_com.mycompany_frogsssa_war_1.0-SNAPSHOTPU login successful]]

[2018-10-02T11:58:15.540+0200] [glassfish 4.1] [WARNING] [] [org.eclipse.persistence.session./file:/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/applications/ConnectionModule/WEB-INF/classes/_com.mycompany_frogsssa_war_1.0-SNAPSHOTPU] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474295540] [levelValue: 900] [[
  
Local Exception Stack: 
Exception [EclipseLink-4002] (Eclipse Persistence Services - 2.6.1.v20150605-31e8258): org.eclipse.persistence.exceptions.DatabaseException
Internal Exception: java.sql.SQLSyntaxErrorException: Errore di sintassi: Encountered "VALUES" at line 1, column 108.
Error Code: 30000
Call: CREATE TABLE RESOURCES (ID VARCHAR(255) NOT NULL, CORRESPONDENCE BLOB(2147483647), DATAMODEL VARCHAR(255), VALUES BLOB(2147483647), PRIMARY KEY (ID))
Query: DataModifyQuery(sql="CREATE TABLE RESOURCES (ID VARCHAR(255) NOT NULL, CORRESPONDENCE BLOB(2147483647), DATAMODEL VARCHAR(255), VALUES BLOB(2147483647), PRIMARY KEY (ID))")
	at org.eclipse.persistence.exceptions.DatabaseException.sqlException(DatabaseException.java:340)
	at org.eclipse.persistence.internal.databaseaccess.DatabaseAccessor.basicExecuteCall(DatabaseAccessor.java:684)
	at org.eclipse.persistence.internal.databaseaccess.DatabaseAccessor.executeCall(DatabaseAccessor.java:560)
	at org.eclipse.persistence.internal.sessions.AbstractSession.basicExecuteCall(AbstractSession.java:2055)
	at org.eclipse.persistence.sessions.server.ServerSession.executeCall(ServerSession.java:570)
	at org.eclipse.persistence.internal.queries.DatasourceCallQueryMechanism.executeCall(DatasourceCallQueryMechanism.java:242)
	at org.eclipse.persistence.internal.queries.DatasourceCallQueryMechanism.executeCall(DatasourceCallQueryMechanism.java:228)
	at org.eclipse.persistence.internal.queries.DatasourceCallQueryMechanism.executeNoSelectCall(DatasourceCallQueryMechanism.java:271)
	at org.eclipse.persistence.internal.queries.DatasourceCallQueryMechanism.executeNoSelect(DatasourceCallQueryMechanism.java:251)
	at org.eclipse.persistence.queries.DataModifyQuery.executeDatabaseQuery(DataModifyQuery.java:85)
	at org.eclipse.persistence.queries.DatabaseQuery.execute(DatabaseQuery.java:904)
	at org.eclipse.persistence.internal.sessions.AbstractSession.internalExecuteQuery(AbstractSession.java:3267)
	at org.eclipse.persistence.internal.sessions.AbstractSession.executeQuery(AbstractSession.java:1857)
	at org.eclipse.persistence.internal.sessions.AbstractSession.executeQuery(AbstractSession.java:1839)
	at org.eclipse.persistence.internal.sessions.AbstractSession.executeQuery(AbstractSession.java:1790)
	at org.eclipse.persistence.internal.sessions.AbstractSession.priviledgedExecuteNonSelectingCall(AbstractSession.java:5075)
	at org.eclipse.persistence.tools.schemaframework.DatabaseObjectDefinition.createOnDatabase(DatabaseObjectDefinition.java:202)
	at org.eclipse.persistence.tools.schemaframework.SchemaManager.createObject(SchemaManager.java:223)
	at org.eclipse.persistence.tools.schemaframework.TableCreator.createTables(TableCreator.java:165)
	at org.eclipse.persistence.tools.schemaframework.TableCreator.createTables(TableCreator.java:142)
	at org.eclipse.persistence.tools.schemaframework.TableCreator.createTables(TableCreator.java:134)
	at org.eclipse.persistence.tools.schemaframework.SchemaManager.createDefaultTables(SchemaManager.java:1032)
	at org.eclipse.persistence.internal.jpa.EntityManagerFactoryProvider.generateDefaultTables(EntityManagerFactoryProvider.java:109)
	at org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl.writeDDLToDatabase(EntityManagerSetupImpl.java:4215)
	at org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl.writeMetadataDDLToDatabase(EntityManagerSetupImpl.java:4281)
	at org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl.writeDDL(EntityManagerSetupImpl.java:4181)
	at org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl.writeDDL(EntityManagerSetupImpl.java:4054)
	at org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl.deploy(EntityManagerSetupImpl.java:777)
	at org.eclipse.persistence.internal.jpa.EntityManagerFactoryDelegate.getAbstractSession(EntityManagerFactoryDelegate.java:205)
	at org.eclipse.persistence.internal.jpa.EntityManagerFactoryDelegate.getDatabaseSession(EntityManagerFactoryDelegate.java:183)
	at org.eclipse.persistence.internal.jpa.EntityManagerFactoryImpl.getDatabaseSession(EntityManagerFactoryImpl.java:528)
	at org.eclipse.persistence.jpa.PersistenceProvider.createContainerEntityManagerFactoryImpl(PersistenceProvider.java:385)
	at org.eclipse.persistence.jpa.PersistenceProvider.createContainerEntityManagerFactory(PersistenceProvider.java:313)
	at org.glassfish.persistence.jpa.PersistenceUnitLoader.loadPU(PersistenceUnitLoader.java:199)
	at org.glassfish.persistence.jpa.PersistenceUnitLoader.<init>(PersistenceUnitLoader.java:107)
	at org.glassfish.persistence.jpa.JPADeployer$1.visitPUD(JPADeployer.java:223)
	at org.glassfish.persistence.jpa.JPADeployer$PersistenceUnitDescriptorIterator.iteratePUDs(JPADeployer.java:510)
	at org.glassfish.persistence.jpa.JPADeployer.createEMFs(JPADeployer.java:230)
	at org.glassfish.persistence.jpa.JPADeployer.prepare(JPADeployer.java:168)
	at com.sun.enterprise.v3.server.ApplicationLifecycle.prepareModule(ApplicationLifecycle.java:925)
	at com.sun.enterprise.v3.server.ApplicationLifecycle.deploy(ApplicationLifecycle.java:434)
	at com.sun.enterprise.v3.server.ApplicationLifecycle.deploy(ApplicationLifecycle.java:219)
	at org.glassfish.deployment.admin.DeployCommand.execute(DeployCommand.java:491)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$2$1.run(CommandRunnerImpl.java:539)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$2$1.run(CommandRunnerImpl.java:535)
	at java.security.AccessController.doPrivileged(Native Method)
	at javax.security.auth.Subject.doAs(Subject.java:360)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$2.execute(CommandRunnerImpl.java:534)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$3.run(CommandRunnerImpl.java:565)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$3.run(CommandRunnerImpl.java:557)
	at java.security.AccessController.doPrivileged(Native Method)
	at javax.security.auth.Subject.doAs(Subject.java:360)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl.doCommand(CommandRunnerImpl.java:556)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl.doCommand(CommandRunnerImpl.java:1464)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl.access$1300(CommandRunnerImpl.java:109)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$ExecutionContext.execute(CommandRunnerImpl.java:1846)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$ExecutionContext.execute(CommandRunnerImpl.java:1722)
	at org.glassfish.admin.rest.resources.admin.CommandResource.executeCommand(CommandResource.java:404)
	at org.glassfish.admin.rest.resources.admin.CommandResource.execCommandSimpInMultOut(CommandResource.java:234)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory$1.invoke(ResourceMethodInvocationHandlerFactory.java:81)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:144)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:161)
	at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:160)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:99)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:389)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:347)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:102)
	at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:309)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:315)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:297)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:267)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139)
	at org.glassfish.jersey.grizzly2.httpserver.GrizzlyHttpContainer.service(GrizzlyHttpContainer.java:375)
	at org.glassfish.admin.rest.adapter.JerseyContainerCommandService$3.service(JerseyContainerCommandService.java:173)
	at org.glassfish.admin.rest.adapter.RestAdapter.service(RestAdapter.java:179)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:283)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:200)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:132)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:111)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:536)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.sql.SQLSyntaxErrorException: Errore di sintassi: Encountered "VALUES" at line 1, column 108.
	at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(Unknown Source)
	at org.apache.derby.client.am.SqlException.getSQLException(Unknown Source)
	at org.apache.derby.client.am.Connection.prepareStatement(Unknown Source)
	at com.sun.gjc.spi.base.ConnectionHolder.prepareStatement(ConnectionHolder.java:586)
	at com.sun.gjc.spi.jdbc40.ConnectionWrapper40.prepareCachedStatement(ConnectionWrapper40.java:255)
	at com.sun.gjc.spi.jdbc40.ConnectionWrapper40.prepareCachedStatement(ConnectionWrapper40.java:52)
	at com.sun.gjc.spi.ManagedConnectionImpl.prepareCachedStatement(ManagedConnectionImpl.java:992)
	at com.sun.gjc.spi.jdbc40.ConnectionWrapper40.prepareStatement(ConnectionWrapper40.java:173)
	at org.eclipse.persistence.internal.databaseaccess.DatabaseAccessor.prepareStatement(DatabaseAccessor.java:1565)
	at org.eclipse.persistence.internal.databaseaccess.DatabaseAccessor.prepareStatement(DatabaseAccessor.java:1514)
	at org.eclipse.persistence.internal.databaseaccess.DatabaseCall.prepareStatement(DatabaseCall.java:778)
	at org.eclipse.persistence.internal.databaseaccess.DatabaseAccessor.basicExecuteCall(DatabaseAccessor.java:621)
	... 100 more
Caused by: org.apache.derby.client.am.SqlException: Errore di sintassi: Encountered "VALUES" at line 1, column 108.
	at org.apache.derby.client.am.Statement.completeSqlca(Unknown Source)
	at org.apache.derby.client.net.NetStatementReply.parsePrepareError(Unknown Source)
	at org.apache.derby.client.net.NetStatementReply.parsePRPSQLSTTreply(Unknown Source)
	at org.apache.derby.client.net.NetStatementReply.readPrepareDescribeOutput(Unknown Source)
	at org.apache.derby.client.net.StatementReply.readPrepareDescribeOutput(Unknown Source)
	at org.apache.derby.client.net.NetStatement.readPrepareDescribeOutput_(Unknown Source)
	at org.apache.derby.client.am.Statement.readPrepareDescribeOutput(Unknown Source)
	at org.apache.derby.client.am.PreparedStatement.readPrepareDescribeInputOutput(Unknown Source)
	at org.apache.derby.client.am.PreparedStatement.flowPrepareDescribeInputOutput(Unknown Source)
	at org.apache.derby.client.am.PreparedStatement.prepare(Unknown Source)
	at org.apache.derby.client.am.Connection.prepareStatementX(Unknown Source)
	... 110 more
]]

[2018-10-02T11:58:15.682+0200] [glassfish 4.1] [INFO] [AS-EJB-00054] [javax.enterprise.ejb.container] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474295682] [levelValue: 800] [[
  Portable JNDI names for EJB ConnectionModule: [java:global/ConnectionModule/ConnectionModule!com.mycompany.frogsssa.service.ConnectionModule, java:global/ConnectionModule/ConnectionModule]]]

[2018-10-02T11:58:15.703+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=42 _ThreadName=Thread-8] [timeMillis: 1538474295703] [levelValue: 800] [[
  ---PATH---/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/applications/ConnectionModule/WEB-INF/classes/files/keys.json]]

[2018-10-02T11:58:16.150+0200] [glassfish 4.1] [INFO] [] [org.jboss.weld.Version] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474296150] [levelValue: 800] [[
  WELD-000900: 2.2.13 (Final)]]

[2018-10-02T11:58:16.178+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=97 _ThreadName=Thread-8] [timeMillis: 1538474296178] [levelValue: 800] [[
  DD: Registered, cookie: [B@6ed747e4]]

[2018-10-02T11:58:16.178+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=97 _ThreadName=Thread-8] [timeMillis: 1538474296178] [levelValue: 800] [[
  Test DD registered: tcp://127.0.0.1:5555]]

[2018-10-02T11:58:16.607+0200] [glassfish 4.1] [WARN] [] [org.jboss.weld.Interceptor] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474296607] [levelValue: 900] [[
  WELD-001700: Interceptor annotation class javax.ejb.PostActivate not found, interception based on it is not enabled]]

[2018-10-02T11:58:16.607+0200] [glassfish 4.1] [WARN] [] [org.jboss.weld.Interceptor] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474296607] [levelValue: 900] [[
  WELD-001700: Interceptor annotation class javax.ejb.PrePassivate not found, interception based on it is not enabled]]

[2018-10-02T11:58:16.772+0200] [glassfish 4.1] [WARN] [] [org.jboss.weld.Event] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474296772] [levelValue: 900] [[
  WELD-000411: Observer method [BackedAnnotatedMethod] org.glassfish.sse.impl.ServerSentEventCdiExtension.processAnnotatedType(@Observes ProcessAnnotatedType<Object>, BeanManager) receives events for all annotated types. Consider restricting events using @WithAnnotations or a generic type with bounds.]]

[2018-10-02T11:58:16.790+0200] [glassfish 4.1] [WARN] [] [org.jboss.weld.Event] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474296790] [levelValue: 900] [[
  WELD-000411: Observer method [BackedAnnotatedMethod] private org.glassfish.jersey.ext.cdi1x.internal.CdiComponentProvider.processAnnotatedType(@Observes ProcessAnnotatedType<Object>) receives events for all annotated types. Consider restricting events using @WithAnnotations or a generic type with bounds.]]

[2018-10-02T11:58:16.794+0200] [glassfish 4.1] [WARN] [] [org.jboss.weld.Event] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474296794] [levelValue: 900] [[
  WELD-000411: Observer method [BackedAnnotatedMethod] public org.glassfish.jms.injection.JMSCDIExtension.processAnnotatedType(@Observes ProcessAnnotatedType<Object>) receives events for all annotated types. Consider restricting events using @WithAnnotations or a generic type with bounds.]]

[2018-10-02T11:58:17.587+0200] [glassfish 4.1] [SEVERE] [] [] [tid: _ThreadID=42 _ThreadName=Thread-9] [timeMillis: 1538474297587] [levelValue: 1000] [[
  SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".]]

[2018-10-02T11:58:17.587+0200] [glassfish 4.1] [SEVERE] [] [] [tid: _ThreadID=42 _ThreadName=Thread-9] [timeMillis: 1538474297587] [levelValue: 1000] [[
  SLF4J: Defaulting to no-operation (NOP) logger implementation]]

[2018-10-02T11:58:17.587+0200] [glassfish 4.1] [SEVERE] [] [] [tid: _ThreadID=42 _ThreadName=Thread-9] [timeMillis: 1538474297587] [levelValue: 1000] [[
  SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.]]

[2018-10-02T11:58:17.773+0200] [glassfish 4.1] [INFO] [AS-WEB-GLUE-00172] [javax.enterprise.web] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474297773] [levelValue: 800] [[
  Loading application [ConnectionModule] at [/ConnectionModule-1.0-SNAPSHOT]]]

[2018-10-02T11:58:17.865+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.core] [tid: _ThreadID=42 _ThreadName=admin-listener(1)] [timeMillis: 1538474297865] [levelValue: 800] [[
  ConnectionModule was successfully deployed in 5.868 milliseconds.]]

[2018-10-02T11:58:24.933+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538474304933] [levelValue: 800] [[
  Setted DM for sssaLara module orchestrator{	namespace "urn:sssa:orchestrator";	prefix "orchestrator";	extension advertise{		argument advertise{			yin-element false;		}	}	extension period{		argument period{			yin-element false;		}	}	extension minthreshold{		argument minthreshold{			yin-element false;		}	}	extension maxthreshold{		argument maxthreshold{			yin-element false;		}	}	list switches{		key id;		leaf id{			type string;			orchestrator:advertise onchange;		}		leaf ip{			type string;			orchestrator:advertise onchange;		}		leaf mac{			type string;			orchestrator:advertise onchange;		}	}	list load{		key id;		leaf id{			type string;		}		leaf tp{			type int32;			orchestrator:advertise onthreshold;			orchestrator:minthreshold 500;		}	}	container a {		leaf l1 {			type int32;			orchestrator:advertise onchange;		}		leaf l2 {			type string;			orchestrator:advertise onchange;		}		container b {			leaf l1 {				type int32;				orchestrator:advertise onchange;			}			leaf l2 {				type string;				orchestrator:advertise onchange;			}			container c {				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				leaf l3 {					type string;					orchestrator:advertise onchange;				}			}			list l {				key l1;				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }				container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;]]

[2018-10-02T11:58:24.933+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538474304933] [levelValue: 800] [[
  orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }			}		}		container c {			leaf l1 {				type int32;				orchestrator:advertise onchange;			}			leaf l2 {				type string;				orchestrator:advertise onchange;			}			leaf l3 {				type string;				orchestrator:advertise onchange;			}			container a {				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				container b {					leaf l1 {						type int32;						orchestrator:advertise onchange;					}					leaf l2 {						type string;						orchestrator:advertise onchange;					}					container c {						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						leaf l3 {							type string;							orchestrator:advertise onchange;						}						container a {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}					}					list l {						key l1;						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						container b {							leaf l1 {								type int32;								orchestrator:advertise onchange;							}							leaf l2 {								type string;								orchestrator:advertise onchange;							}							list l {								key l1;								leaf l1 {									type int32;									orchestrator:advertise onchange;								}								leaf l2 {									type string;									orchestrator:advertise onchange;								}								container c {									leaf l1 {										type int32;										orchestrator:advertise onchange;									}									leaf l2 {										type string;										orchestrator:advertise onchange;									}									leaf l3 {										type string;										orchestrator:advertise onchange;									}								}							}						}						container c {							leaf l1 {								type int32;								orchestrator:advertise onchange;							}							leaf l2 {								type string;								orchestrator:advertise onchange;							}							leaf l3 {								type string;								orchestrator:advertise onchange;							}							container a {								leaf l1 {									type int32;									orchestrator:advertise onchange;								}								leaf l2 {									type string;									orchestrator:advertise onchange;								}							}						}					}				}				container c {					leaf l1 {						type int32;						orchestrator:advertise onchange;					}					leaf l2 {						type string;						orchestrator:advertise onchange;					}					leaf l3 {						type string;						orchestrator:advertise onchange;					}					container a {						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						container b {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    ty]]

[2018-10-02T11:58:24.933+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538474304933] [levelValue: 800] [[
  pe string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}						container c {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}					}				}			}			container c {			    leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }			    container a {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container b {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        list l {                            key l1;                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1]]

[2018-10-02T11:58:24.933+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538474304933] [levelValue: 800] [[
  {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }			}		}	}	container a2 {        leaf l1 {            type int32;            orchestrator:advertise onchange;        }        leaf l2 {            type string;            orchestrator:advertise onchange;        }        container b {            leaf l1 {                type int32;                orchestrator:advertise onchange;            }            leaf l2 {                type string;                orchestrator:advertise onchange;            }            container c {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }            }            list l {                key l1;                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2]]

[2018-10-02T11:58:24.933+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538474304933] [levelValue: 800] [[
  {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }            }        }        container c {            leaf l1 {                type int32;                orchestrator:advertise onchange;            }            leaf l2 {                type string;                orchestrator:advertise onchange;            }            leaf l3 {                type string;                orchestrator:advertise onchange;            }            container a {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container c {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }]]

[2018-10-02T11:58:24.933+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538474304933] [levelValue: 800] [[
  leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    leaf l3 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }            }            container c {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }                container a {                    leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container a {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type]]

[2018-10-02T11:58:24.933+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538474304933] [levelValue: 800] [[
  string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container b {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    list l {                                        key l1;                                        leaf l1 {                                            type int32;                                            orchestrator:advertise onchange;                                        }                                        leaf l2 {                                            type string;                                            orchestrator:advertise onchange;                                        }                                    }                                }                            }                        }                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                                container c {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    leaf l3 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container a {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                    }    			}    		}    	}}]]

[2018-10-02T11:58:27.919+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538474307919] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T12:02:24.675+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538474544675] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T12:07:49.948+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538474869948] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T12:07:58.379+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538474878379] [levelValue: 800] [[
  Setted DM for sssaLara module orchestrator{	namespace "urn:sssa:orchestrator";	prefix "orchestrator";	extension advertise{		argument advertise{			yin-element false;		}	}	extension period{		argument period{			yin-element false;		}	}	extension minthreshold{		argument minthreshold{			yin-element false;		}	}	extension maxthreshold{		argument maxthreshold{			yin-element false;		}	}	list switches{		key id;		leaf id{			type string;			orchestrator:advertise onchange;		}		leaf ip{			type string;			orchestrator:advertise onchange;		}		leaf mac{			type string;			orchestrator:advertise onchange;		}	}	list load{		key id;		leaf id{			type string;		}		leaf tp{			type int32;			orchestrator:advertise onthreshold;			orchestrator:minthreshold 500;		}	}	container a {		leaf l1 {			type int32;			orchestrator:advertise onchange;		}		leaf l2 {			type string;			orchestrator:advertise onchange;		}		container b {			leaf l1 {				type int32;				orchestrator:advertise onchange;			}			leaf l2 {				type string;				orchestrator:advertise onchange;			}			container c {				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				leaf l3 {					type string;					orchestrator:advertise onchange;				}			}			list l {				key l1;				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }				container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;]]

[2018-10-02T12:07:58.379+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538474878379] [levelValue: 800] [[
  orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }			}		}		container c {			leaf l1 {				type int32;				orchestrator:advertise onchange;			}			leaf l2 {				type string;				orchestrator:advertise onchange;			}			leaf l3 {				type string;				orchestrator:advertise onchange;			}			container a {				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				container b {					leaf l1 {						type int32;						orchestrator:advertise onchange;					}					leaf l2 {						type string;						orchestrator:advertise onchange;					}					container c {						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						leaf l3 {							type string;							orchestrator:advertise onchange;						}						container a {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}					}					list l {						key l1;						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						container b {							leaf l1 {								type int32;								orchestrator:advertise onchange;							}							leaf l2 {								type string;								orchestrator:advertise onchange;							}							list l {								key l1;								leaf l1 {									type int32;									orchestrator:advertise onchange;								}								leaf l2 {									type string;									orchestrator:advertise onchange;								}								container c {									leaf l1 {										type int32;										orchestrator:advertise onchange;									}									leaf l2 {										type string;										orchestrator:advertise onchange;									}									leaf l3 {										type string;										orchestrator:advertise onchange;									}								}							}						}						container c {							leaf l1 {								type int32;								orchestrator:advertise onchange;							}							leaf l2 {								type string;								orchestrator:advertise onchange;							}							leaf l3 {								type string;								orchestrator:advertise onchange;							}							container a {								leaf l1 {									type int32;									orchestrator:advertise onchange;								}								leaf l2 {									type string;									orchestrator:advertise onchange;								}							}						}					}				}				container c {					leaf l1 {						type int32;						orchestrator:advertise onchange;					}					leaf l2 {						type string;						orchestrator:advertise onchange;					}					leaf l3 {						type string;						orchestrator:advertise onchange;					}					container a {						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						container b {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    ty]]

[2018-10-02T12:07:58.379+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538474878379] [levelValue: 800] [[
  pe string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}						container c {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}					}				}			}			container c {			    leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }			    container a {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container b {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        list l {                            key l1;                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1]]

[2018-10-02T12:07:58.380+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538474878380] [levelValue: 800] [[
  {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }			}		}	}	container a2 {        leaf l1 {            type int32;            orchestrator:advertise onchange;        }        leaf l2 {            type string;            orchestrator:advertise onchange;        }        container b {            leaf l1 {                type int32;                orchestrator:advertise onchange;            }            leaf l2 {                type string;                orchestrator:advertise onchange;            }            container c {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }            }            list l {                key l1;                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2]]

[2018-10-02T12:07:58.380+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538474878380] [levelValue: 800] [[
  {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }            }        }        container c {            leaf l1 {                type int32;                orchestrator:advertise onchange;            }            leaf l2 {                type string;                orchestrator:advertise onchange;            }            leaf l3 {                type string;                orchestrator:advertise onchange;            }            container a {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container c {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }]]

[2018-10-02T12:07:58.380+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538474878380] [levelValue: 800] [[
  leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    leaf l3 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }            }            container c {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }                container a {                    leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container a {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type]]

[2018-10-02T12:07:58.380+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538474878380] [levelValue: 800] [[
  string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container b {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    list l {                                        key l1;                                        leaf l1 {                                            type int32;                                            orchestrator:advertise onchange;                                        }                                        leaf l2 {                                            type string;                                            orchestrator:advertise onchange;                                        }                                    }                                }                            }                        }                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                                container c {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    leaf l3 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container a {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                    }    			}    		}    	}}]]

[2018-10-02T12:08:01.329+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538474881329] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T12:09:30.250+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538474970250] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T12:12:43.061+0200] [glassfish 4.1] [INFO] [] [org.eclipse.persistence.session./file:/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/applications/ConnectionModule/WEB-INF/classes/_com.mycompany_frogsssa_war_1.0-SNAPSHOTPU.connection] [tid: _ThreadID=45 _ThreadName=admin-listener(4)] [timeMillis: 1538475163061] [levelValue: 800] [[
  /file:/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/applications/ConnectionModule/WEB-INF/classes/_com.mycompany_frogsssa_war_1.0-SNAPSHOTPU logout successful]]

[2018-10-02T12:12:43.070+0200] [glassfish 4.1] [SEVERE] [] [javax.enterprise.web.util] [tid: _ThreadID=45 _ThreadName=admin-listener(4)] [timeMillis: 1538475163070] [levelValue: 1000] [[
  The web application [/ConnectionModule-1.0-SNAPSHOT] created a ThreadLocal with key of type [java.lang.ThreadLocal] (value [java.lang.ThreadLocal@7ed1dddc]) and a value of type [zmq.ZMQ.PollSelector] (value [zmq.ZMQ$PollSelector@29f682f0]) but failed to remove it when the web application was stopped. Threads are going to be renewed over time to try and avoid a probable memory leak.]]

[2018-10-02T12:12:47.897+0200] [glassfish 4.1] [INFO] [NCLS-CORE-00092] [javax.enterprise.system.core] [tid: _ThreadID=143 _ThreadName=Thread-47] [timeMillis: 1538475167897] [levelValue: 800] [[
  Server shutdown initiated]]

[2018-10-02T12:12:47.903+0200] [glassfish 4.1] [INFO] [NCLS-BOOTSTRAP-00028] [javax.enterprise.bootstrap] [tid: _ThreadID=143 _ThreadName=Thread-47] [timeMillis: 1538475167903] [levelValue: 800] [[
  Unregistered com.sun.enterprise.glassfish.bootstrap.osgi.EmbeddedOSGiGlassFishImpl@7c3ebc6b from service registry.]]

[2018-10-02T12:12:47.903+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=143 _ThreadName=Thread-8] [timeMillis: 1538475167903] [levelValue: 800] [[
  FileMonitoring shutdown]]

[2018-10-02T12:12:47.907+0200] [glassfish 4.1] [INFO] [NCLS-JMX-00002] [javax.enterprise.system.jmx] [tid: _ThreadID=143 _ThreadName=Thread-47] [timeMillis: 1538475167907] [levelValue: 800] [[
  JMXStartupService: Stopped JMXConnectorServer: null]]

[2018-10-02T12:12:47.907+0200] [glassfish 4.1] [INFO] [NCLS-JMX-00001] [javax.enterprise.system.jmx] [tid: _ThreadID=143 _ThreadName=Thread-47] [timeMillis: 1538475167907] [levelValue: 800] [[
  JMXStartupService and JMXConnectors have been shut down.]]

[2018-10-02T12:12:47.925+0200] [glassfish 4.1] [WARNING] [] [javax.enterprise.web] [tid: _ThreadID=28 _ThreadName=http-listener-1(1)] [timeMillis: 1538475167925] [levelValue: 900] [[
  StandardWrapperValve[com.mycompany.frogsssa.service.ApplicationConfig]: Servlet.service() for servlet com.mycompany.frogsssa.service.ApplicationConfig threw exception
java.lang.IllegalStateException: ServiceLocatorImpl(__HK2_Generated_3,5,1992269491) has been shut down
	at org.jvnet.hk2.internal.ServiceLocatorImpl.checkState(ServiceLocatorImpl.java:2270)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandleImpl(ServiceLocatorImpl.java:639)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandle(ServiceLocatorImpl.java:632)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandle(ServiceLocatorImpl.java:650)
	at org.jvnet.hk2.internal.FactoryCreator.getFactoryHandle(FactoryCreator.java:103)
	at org.jvnet.hk2.internal.FactoryCreator.dispose(FactoryCreator.java:173)
	at org.jvnet.hk2.internal.SystemDescriptor.dispose(SystemDescriptor.java:526)
	at org.glassfish.jersey.process.internal.RequestScope$Instance.remove(RequestScope.java:532)
	at org.glassfish.jersey.process.internal.RequestScope$Instance.release(RequestScope.java:549)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:319)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139)
	at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:460)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:386)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:334)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:221)
	at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1682)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:318)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:160)
	at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:734)
	at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:673)
	at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:99)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:174)
	at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:416)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:283)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:283)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:200)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:132)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:111)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:536)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571)
	at java.lang.Thread.run(Thread.java:748)
]]

[2018-10-02T12:12:47.925+0200] [glassfish 4.1] [WARNING] [] [javax.enterprise.web] [tid: _ThreadID=29 _ThreadName=http-listener-1(2)] [timeMillis: 1538475167925] [levelValue: 900] [[
  StandardWrapperValve[com.mycompany.frogsssa.service.ApplicationConfig]: Servlet.service() for servlet com.mycompany.frogsssa.service.ApplicationConfig threw exception
java.lang.IllegalStateException: ServiceLocatorImpl(__HK2_Generated_3,5,1992269491) has been shut down
	at org.jvnet.hk2.internal.ServiceLocatorImpl.checkState(ServiceLocatorImpl.java:2270)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandleImpl(ServiceLocatorImpl.java:639)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandle(ServiceLocatorImpl.java:632)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandle(ServiceLocatorImpl.java:650)
	at org.jvnet.hk2.internal.FactoryCreator.getFactoryHandle(FactoryCreator.java:103)
	at org.jvnet.hk2.internal.FactoryCreator.dispose(FactoryCreator.java:173)
	at org.jvnet.hk2.internal.SystemDescriptor.dispose(SystemDescriptor.java:526)
	at org.glassfish.jersey.process.internal.RequestScope$Instance.remove(RequestScope.java:532)
	at org.glassfish.jersey.process.internal.RequestScope$Instance.release(RequestScope.java:549)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:319)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139)
	at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:460)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:386)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:334)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:221)
	at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1682)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:318)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:160)
	at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:734)
	at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:673)
	at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:99)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:174)
	at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:416)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:283)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:283)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:200)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:132)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:111)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:536)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571)
	at java.lang.Thread.run(Thread.java:748)
]]

[2018-10-02T12:12:47.926+0200] [glassfish 4.1] [WARNING] [] [javax.enterprise.web] [tid: _ThreadID=31 _ThreadName=http-listener-1(4)] [timeMillis: 1538475167926] [levelValue: 900] [[
  StandardWrapperValve[com.mycompany.frogsssa.service.ApplicationConfig]: Servlet.service() for servlet com.mycompany.frogsssa.service.ApplicationConfig threw exception
java.lang.IllegalStateException: ServiceLocatorImpl(__HK2_Generated_3,5,1992269491) has been shut down
	at org.jvnet.hk2.internal.ServiceLocatorImpl.checkState(ServiceLocatorImpl.java:2270)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandleImpl(ServiceLocatorImpl.java:639)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandle(ServiceLocatorImpl.java:632)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandle(ServiceLocatorImpl.java:650)
	at org.jvnet.hk2.internal.FactoryCreator.getFactoryHandle(FactoryCreator.java:103)
	at org.jvnet.hk2.internal.FactoryCreator.dispose(FactoryCreator.java:173)
	at org.jvnet.hk2.internal.SystemDescriptor.dispose(SystemDescriptor.java:526)
	at org.glassfish.jersey.process.internal.RequestScope$Instance.remove(RequestScope.java:532)
	at org.glassfish.jersey.process.internal.RequestScope$Instance.release(RequestScope.java:549)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:319)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139)
	at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:460)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:386)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:334)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:221)
	at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1682)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:318)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:160)
	at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:734)
	at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:673)
	at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:99)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:174)
	at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:416)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:283)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:283)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:200)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:132)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:111)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:536)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571)
	at java.lang.Thread.run(Thread.java:748)
]]

[2018-10-02T12:12:47.925+0200] [glassfish 4.1] [WARNING] [] [javax.enterprise.web] [tid: _ThreadID=30 _ThreadName=http-listener-1(3)] [timeMillis: 1538475167925] [levelValue: 900] [[
  StandardWrapperValve[com.mycompany.frogsssa.service.ApplicationConfig]: Servlet.service() for servlet com.mycompany.frogsssa.service.ApplicationConfig threw exception
java.lang.IllegalStateException: ServiceLocatorImpl(__HK2_Generated_3,5,1992269491) has been shut down
	at org.jvnet.hk2.internal.ServiceLocatorImpl.checkState(ServiceLocatorImpl.java:2270)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandleImpl(ServiceLocatorImpl.java:639)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandle(ServiceLocatorImpl.java:632)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandle(ServiceLocatorImpl.java:650)
	at org.jvnet.hk2.internal.FactoryCreator.getFactoryHandle(FactoryCreator.java:103)
	at org.jvnet.hk2.internal.FactoryCreator.dispose(FactoryCreator.java:173)
	at org.jvnet.hk2.internal.SystemDescriptor.dispose(SystemDescriptor.java:526)
	at org.glassfish.jersey.process.internal.RequestScope$Instance.remove(RequestScope.java:532)
	at org.glassfish.jersey.process.internal.RequestScope$Instance.release(RequestScope.java:549)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:319)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139)
	at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:460)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:386)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:334)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:221)
	at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1682)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:318)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:160)
	at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:734)
	at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:673)
	at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:99)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:174)
	at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:416)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:283)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:283)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:200)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:132)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:111)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:536)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571)
	at java.lang.Thread.run(Thread.java:748)
]]

[2018-10-02T12:12:47.928+0200] [glassfish 4.1] [WARNING] [] [javax.enterprise.web] [tid: _ThreadID=32 _ThreadName=http-listener-1(5)] [timeMillis: 1538475167928] [levelValue: 900] [[
  StandardWrapperValve[com.mycompany.frogsssa.service.ApplicationConfig]: Servlet.service() for servlet com.mycompany.frogsssa.service.ApplicationConfig threw exception
java.lang.IllegalStateException: ServiceLocatorImpl(__HK2_Generated_3,5,1992269491) has been shut down
	at org.jvnet.hk2.internal.ServiceLocatorImpl.checkState(ServiceLocatorImpl.java:2270)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandleImpl(ServiceLocatorImpl.java:639)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandle(ServiceLocatorImpl.java:632)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandle(ServiceLocatorImpl.java:650)
	at org.jvnet.hk2.internal.FactoryCreator.getFactoryHandle(FactoryCreator.java:103)
	at org.jvnet.hk2.internal.FactoryCreator.dispose(FactoryCreator.java:173)
	at org.jvnet.hk2.internal.SystemDescriptor.dispose(SystemDescriptor.java:526)
	at org.glassfish.jersey.process.internal.RequestScope$Instance.remove(RequestScope.java:532)
	at org.glassfish.jersey.process.internal.RequestScope$Instance.release(RequestScope.java:549)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:319)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139)
	at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:460)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:386)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:334)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:221)
	at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1682)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:318)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:160)
	at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:734)
	at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:673)
	at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:99)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:174)
	at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:416)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:283)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:283)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:200)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:132)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:111)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:536)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571)
	at java.lang.Thread.run(Thread.java:748)
]]

[2018-10-02T12:12:47.942+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=150 _ThreadName=Thread-8] [timeMillis: 1538475167942] [levelValue: 800] [[
  JdbcRuntimeExtension,  getAllSystemRAResourcesAndPools = [GlassFishConfigBean.org.glassfish.jdbc.config.JdbcResource, GlassFishConfigBean.org.glassfish.jdbc.config.JdbcResource, GlassFishConfigBean.org.glassfish.jdbc.config.JdbcConnectionPool, GlassFishConfigBean.org.glassfish.jdbc.config.JdbcConnectionPool]]]

[2018-10-02T12:12:47.951+0200] [glassfish 4.1] [INFO] [ra.stop-successful] [javax.enterprise.resource.resourceadapter.com.sun.enterprise.connectors.service] [tid: _ThreadID=154 _ThreadName=Thread-57] [timeMillis: 1538475167951] [levelValue: 800] [[
  RAR7094: __ds_jdbc_ra shutdown successful.]]

[2018-10-02T12:12:52.480+0200] [] [INFO] [NCLS-GFLAUNCHER-00005] [javax.enterprise.launcher] [tid: _ThreadID=1 _ThreadName=main] [timeMillis: 1538475172480] [levelValue: 800] [[
  JVM invocation command line:
/usr/lib/jvm/java-8-oracle/bin/java
-cp
/home/gabriele/Applications/glassfish4/glassfish/modules/glassfish.jar
-XX:+UnlockDiagnosticVMOptions
-XX:NewRatio=2
-XX:MaxPermSize=192m
-Xmx512m
-javaagent:/home/gabriele/Applications/glassfish4/glassfish/lib/monitor/flashlight-agent.jar
-client
-Djavax.xml.accessExternalSchema=all
-Djavax.net.ssl.trustStore=/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/config/cacerts.jks
-Djdk.corba.allowOutputStreamSubclass=true
-Dfelix.fileinstall.dir=/home/gabriele/Applications/glassfish4/glassfish/modules/autostart/
-Dorg.glassfish.additionalOSGiBundlesToStart=org.apache.felix.shell,org.apache.felix.gogo.runtime,org.apache.felix.gogo.shell,org.apache.felix.gogo.command,org.apache.felix.shell.remote,org.apache.felix.fileinstall
-Dcom.sun.aas.installRoot=/home/gabriele/Applications/glassfish4/glassfish
-Dfelix.fileinstall.poll=5000
-Djava.endorsed.dirs=/home/gabriele/Applications/glassfish4/glassfish/modules/endorsed:/home/gabriele/Applications/glassfish4/glassfish/lib/endorsed
-Djava.security.policy=/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/config/server.policy
-Dosgi.shell.telnet.maxconn=1
-Dfelix.fileinstall.bundles.startTransient=true
-Dcom.sun.enterprise.config.config_environment_factory_class=com.sun.enterprise.config.serverbeans.AppserverConfigEnvironmentFactory
-Dfelix.fileinstall.log.level=2
-Djavax.net.ssl.keyStore=/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/config/keystore.jks
-Djava.security.auth.login.config=/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/config/login.conf
-Dfelix.fileinstall.disableConfigSave=false
-Dfelix.fileinstall.bundles.new.start=true
-Dcom.sun.aas.instanceRoot=/home/gabriele/Applications/glassfish4/glassfish/domains/domain1
-Dosgi.shell.telnet.port=6666
-Dgosh.args=--nointeractive
-Dcom.sun.enterprise.security.httpsOutboundKeyAlias=s1as
-Dosgi.shell.telnet.ip=127.0.0.1
-DANTLR_USE_DIRECT_CLASS_LOADING=true
-Djava.awt.headless=true
-Dcom.ctc.wstx.returnNullForDefaultNamespace=true
-Djava.ext.dirs=/usr/lib/jvm/java-8-oracle/lib/ext:/usr/lib/jvm/java-8-oracle/jre/lib/ext:/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/lib/ext
-Djdbc.drivers=org.apache.derby.jdbc.ClientDriver
-Djava.library.path=/home/gabriele/Applications/glassfish4/glassfish/lib:/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib
com.sun.enterprise.glassfish.bootstrap.ASMain
-upgrade
false
-domaindir
/home/gabriele/Applications/glassfish4/glassfish/domains/domain1
-read-stdin
true
-asadmin-args
--host,,,localhost,,,--port,,,4848,,,--secure=false,,,--terse=false,,,--echo=false,,,--interactive=true,,,start-domain,,,--verbose=false,,,--watchdog=false,,,--debug=false,,,--domaindir,,,/home/gabriele/Applications/glassfish4/glassfish/domains,,,domain1
-domainname
domain1
-instancename
server
-type
DAS
-verbose
false
-asadmin-classpath
/home/gabriele/Applications/glassfish4/glassfish/lib/client/appserver-cli.jar
-debug
false
-asadmin-classname
com.sun.enterprise.admin.cli.AdminMain]]

[2018-10-02T12:12:54.181+0200] [glassfish 4.1] [INFO] [NCLS-LOGGING-00009] [javax.enterprise.logging] [tid: _ThreadID=17 _ThreadName=RunLevelControllerThread-1538475174113] [timeMillis: 1538475174181] [levelValue: 800] [[
  Running GlassFish Version: GlassFish Server Open Source Edition  4.1.1  (build 3)]]

[2018-10-02T12:12:54.182+0200] [glassfish 4.1] [INFO] [NCLS-LOGGING-00010] [javax.enterprise.logging] [tid: _ThreadID=17 _ThreadName=RunLevelControllerThread-1538475174113] [timeMillis: 1538475174182] [levelValue: 800] [[
  Server log file is using Formatter class: com.sun.enterprise.server.logging.ODLLogFormatter]]

[2018-10-02T12:12:54.250+0200] [glassfish 4.1] [INFO] [NCLS-SECURITY-01115] [javax.enterprise.system.core.security] [tid: _ThreadID=18 _ThreadName=RunLevelControllerThread-1538475174118] [timeMillis: 1538475174250] [levelValue: 800] [[
  Realm [admin-realm] of classtype [com.sun.enterprise.security.auth.realm.file.FileRealm] successfully created.]]

[2018-10-02T12:12:54.251+0200] [glassfish 4.1] [INFO] [NCLS-SECURITY-01115] [javax.enterprise.system.core.security] [tid: _ThreadID=18 _ThreadName=RunLevelControllerThread-1538475174118] [timeMillis: 1538475174251] [levelValue: 800] [[
  Realm [file] of classtype [com.sun.enterprise.security.auth.realm.file.FileRealm] successfully created.]]

[2018-10-02T12:12:54.253+0200] [glassfish 4.1] [INFO] [NCLS-SECURITY-01115] [javax.enterprise.system.core.security] [tid: _ThreadID=18 _ThreadName=RunLevelControllerThread-1538475174118] [timeMillis: 1538475174253] [levelValue: 800] [[
  Realm [certificate] of classtype [com.sun.enterprise.security.auth.realm.certificate.CertificateRealm] successfully created.]]

[2018-10-02T12:12:54.333+0200] [glassfish 4.1] [INFO] [SEC-SVCS-00100] [javax.enterprise.security.services] [tid: _ThreadID=17 _ThreadName=RunLevelControllerThread-1538475174113] [timeMillis: 1538475174333] [levelValue: 800] [[
  Authorization Service has successfully initialized.]]

[2018-10-02T12:12:54.483+0200] [glassfish 4.1] [INFO] [] [org.glassfish.ha.store.spi.BackingStoreFactoryRegistry] [tid: _ThreadID=19 _ThreadName=RunLevelControllerThread-1538475174118] [timeMillis: 1538475174483] [levelValue: 800] [[
  Registered org.glassfish.ha.store.adapter.cache.ShoalBackingStoreProxy for persistence-type = replicated in BackingStoreFactoryRegistry]]

[2018-10-02T12:12:54.536+0200] [glassfish 4.1] [WARNING] [] [org.glassfish.grizzly.config.Utils] [tid: _ThreadID=16 _ThreadName=RunLevelControllerThread-1538475174113] [timeMillis: 1538475174536] [levelValue: 900] [[
  Instance could not be initialized. Class=interface org.glassfish.grizzly.http.server.AddOn, name=http-listener-1, realClassName=org.glassfish.grizzly.http2.Http2AddOn]]

[2018-10-02T12:12:54.568+0200] [glassfish 4.1] [INFO] [NCLS-CORE-00087] [javax.enterprise.system.core] [tid: _ThreadID=16 _ThreadName=RunLevelControllerThread-1538475174113] [timeMillis: 1538475174568] [levelValue: 800] [[
  Grizzly Framework 2.3.23 started in: 15ms - bound to [/0.0.0.0:9090]]]

[2018-10-02T12:12:54.584+0200] [glassfish 4.1] [WARNING] [] [org.glassfish.grizzly.config.Utils] [tid: _ThreadID=16 _ThreadName=RunLevelControllerThread-1538475174113] [timeMillis: 1538475174584] [levelValue: 900] [[
  Instance could not be initialized. Class=interface org.glassfish.grizzly.http.server.AddOn, name=http-listener-2, realClassName=org.glassfish.grizzly.http2.Http2AddOn]]

[2018-10-02T12:12:54.596+0200] [glassfish 4.1] [INFO] [NCLS-CORE-00087] [javax.enterprise.system.core] [tid: _ThreadID=16 _ThreadName=RunLevelControllerThread-1538475174113] [timeMillis: 1538475174596] [levelValue: 800] [[
  Grizzly Framework 2.3.23 started in: 6ms - bound to [/0.0.0.0:8181]]]

[2018-10-02T12:12:54.599+0200] [glassfish 4.1] [WARNING] [] [org.glassfish.grizzly.config.Utils] [tid: _ThreadID=16 _ThreadName=RunLevelControllerThread-1538475174113] [timeMillis: 1538475174599] [levelValue: 900] [[
  Instance could not be initialized. Class=interface org.glassfish.grizzly.http.server.AddOn, name=admin-listener, realClassName=org.glassfish.grizzly.http2.Http2AddOn]]

[2018-10-02T12:12:54.608+0200] [glassfish 4.1] [INFO] [NCLS-CORE-00087] [javax.enterprise.system.core] [tid: _ThreadID=16 _ThreadName=RunLevelControllerThread-1538475174113] [timeMillis: 1538475174608] [levelValue: 800] [[
  Grizzly Framework 2.3.23 started in: 2ms - bound to [/0.0.0.0:4848]]]

[2018-10-02T12:12:54.640+0200] [glassfish 4.1] [INFO] [NCLS-CORE-00087] [javax.enterprise.system.core] [tid: _ThreadID=18 _ThreadName=RunLevelControllerThread-1538475174118] [timeMillis: 1538475174640] [levelValue: 800] [[
  Grizzly Framework 2.3.23 started in: 0ms - bound to [/0.0.0.0:3700]]]

[2018-10-02T12:12:54.641+0200] [glassfish 4.1] [INFO] [NCLS-CORE-00017] [javax.enterprise.system.core] [tid: _ThreadID=1 _ThreadName=main] [timeMillis: 1538475174641] [levelValue: 800] [[
  GlassFish Server Open Source Edition  4.1.1  (3) startup time : Felix (1.486ms), startup services(533ms), total(2.019ms)]]

[2018-10-02T12:12:54.730+0200] [glassfish 4.1] [INFO] [jts.startup_msg] [javax.enterprise.system.core.transaction.com.sun.jts.CosTransactions] [tid: _ThreadID=16 _ThreadName=RunLevelControllerThread-1538475174113] [timeMillis: 1538475174730] [levelValue: 800] [[
  JTS5014: Recoverable JTS instance, serverId = [100]]]

[2018-10-02T12:12:54.807+0200] [glassfish 4.1] [INFO] [NCLS-CORE-00087] [javax.enterprise.system.core] [tid: _ThreadID=17 _ThreadName=RunLevelControllerThread-1538475174113] [timeMillis: 1538475174807] [levelValue: 800] [[
  Grizzly Framework 2.3.23 started in: 4ms - bound to [/0.0.0.0:7676]]]

[2018-10-02T12:12:54.824+0200] [glassfish 4.1] [INFO] [NCLS-BOOTSTRAP-00027] [javax.enterprise.bootstrap] [tid: _ThreadID=1 _ThreadName=main] [timeMillis: 1538475174824] [levelValue: 800] [[
  Registered com.sun.enterprise.glassfish.bootstrap.osgi.EmbeddedOSGiGlassFishImpl@7c3ebc6b as OSGi service registration: org.apache.felix.framework.ServiceRegistrationImpl@5da7cee2.]]

[2018-10-02T12:12:54.850+0200] [glassfish 4.1] [INFO] [NCLS-JMX-00005] [javax.enterprise.system.jmx] [tid: _ThreadID=54 _ThreadName=Thread-15] [timeMillis: 1538475174850] [levelValue: 800] [[
  JMXStartupService has started JMXConnector on JMXService URL service:jmx:rmi://debian-gabriele-hp:8686/jndi/rmi://debian-gabriele-hp:8686/jmxrmi]]

[2018-10-02T12:12:59.484+0200] [glassfish 4.1] [INFO] [NCLS-REST-00001] [javax.enterprise.admin.rest] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475179484] [levelValue: 800] [[
  Listening to REST requests at context: /command/domain.]]

[2018-10-02T12:12:59.561+0200] [glassfish 4.1] [INFO] [] [org.hibernate.validator.internal.util.Version] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475179561] [levelValue: 800] [[
  HV000001: Hibernate Validator 5.1.2.Final]]

[2018-10-02T12:13:00.148+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475180148] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:13:00.543+0200] [glassfish 4.1] [SEVERE] [NCLS-SECURITY-05054] [javax.enterprise.system.security.ssl] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475180543] [levelValue: 1000] [[
  The SSL certificate has expired: [
[
  Version: V3
  Subject: OU=Equifax Secure Certificate Authority, O=Equifax, C=US
  Signature Algorithm: SHA1withRSA, OID = 1.2.840.113549.1.1.5

  Key:  Sun RSA public key, 1024 bits
  modulus: 135786214035069526348186531221551781468391756233528066061569654028671100866720352830303278016129003918213826297308054231261658522889438712013757624116391437358730449661353175673177742307421061340003741057138887918110217006515773038453829253517076741780039735595086881329494037450587568122088113584549069375417
  public exponent: 65537
  Validity: [From: Sat Aug 22 18:41:51 CEST 1998,
               To: Wed Aug 22 18:41:51 CEST 2018]
  Issuer: OU=Equifax Secure Certificate Authority, O=Equifax, C=US
  SerialNumber: [    35def4cf]

Certificate Extensions: 7
[1]: ObjectId: 1.2.840.113533.7.65.0 Criticality=false
Extension unknown: DER encoded OCTET string =
0000: 04 0D 30 0B 1B 05 56 33   2E 30 63 03 02 06 C0     ..0...V3.0c....


[2]: ObjectId: 2.5.29.35 Criticality=false
AuthorityKeyIdentifier [
KeyIdentifier [
0000: 48 E6 68 F9 2B D2 B2 95   D7 47 D8 23 20 10 4F 33  H.h.+....G.# .O3
0010: 98 90 9F D4                                        ....
]
]

[3]: ObjectId: 2.5.29.19 Criticality=false
BasicConstraints:[
  CA:true
  PathLen:2147483647
]

[4]: ObjectId: 2.5.29.31 Criticality=false
CRLDistributionPoints [
  [DistributionPoint:
     [CN=CRL1, OU=Equifax Secure Certificate Authority, O=Equifax, C=US]
]]

[5]: ObjectId: 2.5.29.15 Criticality=false
KeyUsage [
  Key_CertSign
  Crl_Sign
]

[6]: ObjectId: 2.5.29.16 Criticality=false
PrivateKeyUsage: [
To: Wed Aug 22 18:41:51 CEST 2018]

[7]: ObjectId: 2.5.29.14 Criticality=false
SubjectKeyIdentifier [
KeyIdentifier [
0000: 48 E6 68 F9 2B D2 B2 95   D7 47 D8 23 20 10 4F 33  H.h.+....G.# .O3
0010: 98 90 9F D4                                        ....
]
]

]
  Algorithm: [SHA1withRSA]
  Signature:
0000: 58 CE 29 EA FC F7 DE B5   CE 02 B9 17 B5 85 D1 B9  X.).............
0010: E3 E0 95 CC 25 31 0D 00   A6 92 6E 7F B6 92 63 9E  ....%1....n...c.
0020: 50 95 D1 9A 6F E4 11 DE   63 85 6E 98 EE A8 FF 5A  P...o...c.n....Z
0030: C8 D3 55 B2 66 71 57 DE   C0 21 EB 3D 2A A7 23 49  ..U.fqW..!.=*.#I
0040: 01 04 86 42 7B FC EE 7F   A2 16 52 B5 67 67 D3 40  ...B......R.gg.@
0050: DB 3B 26 58 B2 28 77 3D   AE 14 77 61 D6 FA 2A 66  .;&X.(w=..wa..*f
0060: 27 A0 0D FA A7 73 5C EA   70 F1 94 21 65 44 5F FA  '....s\.p..!eD_.
0070: FC EF 29 68 A9 A2 87 79   EF 79 EF 4F AC 07 77 38  ..)h...y.y.O..w8

]]]

[2018-10-02T12:13:00.548+0200] [glassfish 4.1] [SEVERE] [NCLS-SECURITY-05054] [javax.enterprise.system.security.ssl] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475180548] [levelValue: 1000] [[
  The SSL certificate has expired: [
[
  Version: V1
  Subject: CN=GTE CyberTrust Global Root, OU="GTE CyberTrust Solutions, Inc.", O=GTE Corporation, C=US
  Signature Algorithm: MD5withRSA, OID = 1.2.840.113549.1.1.4

  Key:  Sun RSA public key, 1024 bits
  modulus: 104674226241368487598835828377585222181792546532354327780214427055917513664449991602803276678454577364904540367827644455215731003386468752240014232146814457308076052176227490263634768927290191763858631579785604655038492469791381988347440106477066514204303723029602991655085187937840556671697442212352844587673
  public exponent: 65537
  Validity: [From: Thu Aug 13 02:29:00 CEST 1998,
               To: Tue Aug 14 01:59:00 CEST 2018]
  Issuer: CN=GTE CyberTrust Global Root, OU="GTE CyberTrust Solutions, Inc.", O=GTE Corporation, C=US
  SerialNumber: [    01a5]

]
  Algorithm: [MD5withRSA]
  Signature:
0000: 6D EB 1B 09 E9 5E D9 51   DB 67 22 61 A4 2A 3C 48  m....^.Q.g"a.*<H
0010: 77 E3 A0 7C A6 DE 73 A2   14 03 85 3D FB AB 0E 30  w.....s....=...0
0020: C5 83 16 33 81 13 08 9E   7B 34 4E DF 40 C8 74 D7  ...3.....4N.@.t.
0030: B9 7D DC F4 76 55 7D 9B   63 54 18 E9 F0 EA F3 5C  ....vU..cT.....\
0040: B1 D9 8B 42 1E B9 C0 95   4E BA FA D5 E2 7C F5 68  ...B....N......h
0050: 61 BF 8E EC 05 97 5F 5B   B0 D7 A3 85 34 C4 24 A7  a....._[....4.$.
0060: 0D 0F 95 93 EF CB 94 D8   9E 1F 9D 5C 85 6D C7 AA  ...........\.m..
0070: AE 4F 1F 22 B5 CD 95 AD   BA A7 CC F9 AB 0B 7A 7F  .O."..........z.

]]]

[2018-10-02T12:13:00.557+0200] [glassfish 4.1] [INFO] [NCLS-SECURITY-01002] [javax.enterprise.system.core.security] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475180557] [levelValue: 800] [[
  Java security manager is disabled.]]

[2018-10-02T12:13:00.557+0200] [glassfish 4.1] [INFO] [NCLS-SECURITY-01010] [javax.enterprise.system.core.security] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475180557] [levelValue: 800] [[
  Entering Security Startup Service.]]

[2018-10-02T12:13:00.559+0200] [glassfish 4.1] [INFO] [NCLS-SECURITY-01143] [javax.enterprise.system.core.security] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475180559] [levelValue: 800] [[
  Loading policy provider com.sun.enterprise.security.provider.PolicyWrapper.]]

[2018-10-02T12:13:00.577+0200] [glassfish 4.1] [INFO] [NCLS-SECURITY-01011] [javax.enterprise.system.core.security] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475180577] [levelValue: 800] [[
  Security Service(s) started successfully.]]

[2018-10-02T12:13:00.698+0200] [glassfish 4.1] [INFO] [AS-WEB-GLUE-00198] [javax.enterprise.web] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475180698] [levelValue: 800] [[
  Created HTTP listener http-listener-1 on host/port 0.0.0.0:9090]]

[2018-10-02T12:13:00.702+0200] [glassfish 4.1] [INFO] [AS-WEB-GLUE-00198] [javax.enterprise.web] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475180702] [levelValue: 800] [[
  Created HTTP listener http-listener-2 on host/port 0.0.0.0:8181]]

[2018-10-02T12:13:00.704+0200] [glassfish 4.1] [INFO] [AS-WEB-GLUE-00198] [javax.enterprise.web] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475180704] [levelValue: 800] [[
  Created HTTP listener admin-listener on host/port 0.0.0.0:4848]]

[2018-10-02T12:13:00.720+0200] [glassfish 4.1] [INFO] [AS-WEB-GLUE-00200] [javax.enterprise.web] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475180720] [levelValue: 800] [[
  Created virtual server server]]

[2018-10-02T12:13:00.722+0200] [glassfish 4.1] [INFO] [AS-WEB-GLUE-00200] [javax.enterprise.web] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475180722] [levelValue: 800] [[
  Created virtual server __asadmin]]

[2018-10-02T12:13:00.847+0200] [glassfish 4.1] [INFO] [AS-WEB-CORE-00306] [javax.enterprise.web.core] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475180847] [levelValue: 800] [[
  Setting JAAS app name glassfish-web]]

[2018-10-02T12:13:00.848+0200] [glassfish 4.1] [INFO] [AS-WEB-GLUE-00201] [javax.enterprise.web] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475180848] [levelValue: 800] [[
  Virtual server server loaded default web module ]]

[2018-10-02T12:13:01.228+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475181228] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:13:01.355+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475181355] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:13:01.370+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475181370] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:13:01.371+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475181371] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:13:01.372+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475181372] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:13:01.372+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475181372] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:13:01.373+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475181373] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:13:01.373+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475181373] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:13:01.374+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475181374] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:13:01.375+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475181375] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:13:01.375+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475181375] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:13:01.376+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475181376] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:13:01.377+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475181377] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:13:01.377+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475181377] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:13:01.378+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475181378] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:13:01.379+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475181379] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:13:01.380+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475181380] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:13:01.381+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475181381] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:13:01.381+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475181381] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:13:01.382+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475181382] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:13:01.383+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475181383] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:13:01.383+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475181383] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:13:01.384+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475181384] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:13:01.384+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475181384] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:13:01.385+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475181385] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:13:01.386+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475181386] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:13:01.386+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475181386] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:13:01.387+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475181387] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:13:01.387+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475181387] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:13:01.388+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475181388] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:13:01.389+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475181389] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:13:01.390+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475181390] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:13:01.515+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.dol] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475181515] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:13:02.580+0200] [glassfish 4.1] [WARNING] [] [org.eclipse.persistence.default] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475182580] [levelValue: 900] [[
  
java.lang.NullPointerException
	at org.eclipse.persistence.platform.server.ServerPlatformUtils.createServerPlatform(ServerPlatformUtils.java:99)
	at org.eclipse.persistence.sessions.factories.SessionManager.init(SessionManager.java:77)
	at org.eclipse.persistence.sessions.factories.SessionManager.<clinit>(SessionManager.java:71)
	at org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl.addSessionToGlobalSessionManager(EntityManagerSetupImpl.java:907)
	at org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl.initSession(EntityManagerSetupImpl.java:2671)
	at org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl.deploy(EntityManagerSetupImpl.java:675)
	at org.eclipse.persistence.internal.jpa.EntityManagerFactoryDelegate.getAbstractSession(EntityManagerFactoryDelegate.java:205)
	at org.eclipse.persistence.internal.jpa.EntityManagerFactoryDelegate.getDatabaseSession(EntityManagerFactoryDelegate.java:183)
	at org.eclipse.persistence.internal.jpa.EntityManagerFactoryImpl.getDatabaseSession(EntityManagerFactoryImpl.java:528)
	at org.eclipse.persistence.jpa.PersistenceProvider.createContainerEntityManagerFactoryImpl(PersistenceProvider.java:385)
	at org.eclipse.persistence.jpa.PersistenceProvider.createContainerEntityManagerFactory(PersistenceProvider.java:313)
	at org.glassfish.persistence.jpa.PersistenceUnitLoader.loadPU(PersistenceUnitLoader.java:199)
	at org.glassfish.persistence.jpa.PersistenceUnitLoader.<init>(PersistenceUnitLoader.java:107)
	at org.glassfish.persistence.jpa.JPADeployer$1.visitPUD(JPADeployer.java:223)
	at org.glassfish.persistence.jpa.JPADeployer$PersistenceUnitDescriptorIterator.iteratePUDs(JPADeployer.java:510)
	at org.glassfish.persistence.jpa.JPADeployer.createEMFs(JPADeployer.java:230)
	at org.glassfish.persistence.jpa.JPADeployer.prepare(JPADeployer.java:168)
	at com.sun.enterprise.v3.server.ApplicationLifecycle.prepareModule(ApplicationLifecycle.java:925)
	at com.sun.enterprise.v3.server.ApplicationLifecycle.deploy(ApplicationLifecycle.java:434)
	at com.sun.enterprise.v3.server.ApplicationLifecycle.deploy(ApplicationLifecycle.java:219)
	at org.glassfish.deployment.admin.DeployCommand.execute(DeployCommand.java:491)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$2$1.run(CommandRunnerImpl.java:539)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$2$1.run(CommandRunnerImpl.java:535)
	at java.security.AccessController.doPrivileged(Native Method)
	at javax.security.auth.Subject.doAs(Subject.java:360)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$2.execute(CommandRunnerImpl.java:534)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$3.run(CommandRunnerImpl.java:565)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$3.run(CommandRunnerImpl.java:557)
	at java.security.AccessController.doPrivileged(Native Method)
	at javax.security.auth.Subject.doAs(Subject.java:360)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl.doCommand(CommandRunnerImpl.java:556)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl.doCommand(CommandRunnerImpl.java:1464)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl.access$1300(CommandRunnerImpl.java:109)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$ExecutionContext.execute(CommandRunnerImpl.java:1846)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$ExecutionContext.execute(CommandRunnerImpl.java:1722)
	at org.glassfish.admin.rest.resources.admin.CommandResource.executeCommand(CommandResource.java:404)
	at org.glassfish.admin.rest.resources.admin.CommandResource.execCommandSimpInMultOut(CommandResource.java:234)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory$1.invoke(ResourceMethodInvocationHandlerFactory.java:81)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:144)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:161)
	at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:160)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:99)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:389)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:347)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:102)
	at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:309)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:315)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:297)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:267)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139)
	at org.glassfish.jersey.grizzly2.httpserver.GrizzlyHttpContainer.service(GrizzlyHttpContainer.java:375)
	at org.glassfish.admin.rest.adapter.JerseyContainerCommandService$3.service(JerseyContainerCommandService.java:173)
	at org.glassfish.admin.rest.adapter.RestAdapter.service(RestAdapter.java:179)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:283)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:200)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:132)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:111)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:536)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571)
	at java.lang.Thread.run(Thread.java:748)
]]

[2018-10-02T12:13:02.599+0200] [glassfish 4.1] [INFO] [] [org.eclipse.persistence.session./file:/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/applications/ConnectionModule/WEB-INF/classes/_com.mycompany_frogsssa_war_1.0-SNAPSHOTPU] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475182599] [levelValue: 800] [[
  EclipseLink, version: Eclipse Persistence Services - 2.6.1.v20150605-31e8258]]

[2018-10-02T12:13:03.178+0200] [glassfish 4.1] [INFO] [] [org.eclipse.persistence.session./file:/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/applications/ConnectionModule/WEB-INF/classes/_com.mycompany_frogsssa_war_1.0-SNAPSHOTPU.connection] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475183178] [levelValue: 800] [[
  /file:/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/applications/ConnectionModule/WEB-INF/classes/_com.mycompany_frogsssa_war_1.0-SNAPSHOTPU login successful]]

[2018-10-02T12:13:03.249+0200] [glassfish 4.1] [WARNING] [] [org.eclipse.persistence.session./file:/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/applications/ConnectionModule/WEB-INF/classes/_com.mycompany_frogsssa_war_1.0-SNAPSHOTPU] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475183249] [levelValue: 900] [[
  
Local Exception Stack: 
Exception [EclipseLink-4002] (Eclipse Persistence Services - 2.6.1.v20150605-31e8258): org.eclipse.persistence.exceptions.DatabaseException
Internal Exception: java.sql.SQLSyntaxErrorException: Errore di sintassi: Encountered "VALUES" at line 1, column 108.
Error Code: 30000
Call: CREATE TABLE RESOURCES (ID VARCHAR(255) NOT NULL, CORRESPONDENCE BLOB(2147483647), DATAMODEL VARCHAR(255), VALUES BLOB(2147483647), PRIMARY KEY (ID))
Query: DataModifyQuery(sql="CREATE TABLE RESOURCES (ID VARCHAR(255) NOT NULL, CORRESPONDENCE BLOB(2147483647), DATAMODEL VARCHAR(255), VALUES BLOB(2147483647), PRIMARY KEY (ID))")
	at org.eclipse.persistence.exceptions.DatabaseException.sqlException(DatabaseException.java:340)
	at org.eclipse.persistence.internal.databaseaccess.DatabaseAccessor.basicExecuteCall(DatabaseAccessor.java:684)
	at org.eclipse.persistence.internal.databaseaccess.DatabaseAccessor.executeCall(DatabaseAccessor.java:560)
	at org.eclipse.persistence.internal.sessions.AbstractSession.basicExecuteCall(AbstractSession.java:2055)
	at org.eclipse.persistence.sessions.server.ServerSession.executeCall(ServerSession.java:570)
	at org.eclipse.persistence.internal.queries.DatasourceCallQueryMechanism.executeCall(DatasourceCallQueryMechanism.java:242)
	at org.eclipse.persistence.internal.queries.DatasourceCallQueryMechanism.executeCall(DatasourceCallQueryMechanism.java:228)
	at org.eclipse.persistence.internal.queries.DatasourceCallQueryMechanism.executeNoSelectCall(DatasourceCallQueryMechanism.java:271)
	at org.eclipse.persistence.internal.queries.DatasourceCallQueryMechanism.executeNoSelect(DatasourceCallQueryMechanism.java:251)
	at org.eclipse.persistence.queries.DataModifyQuery.executeDatabaseQuery(DataModifyQuery.java:85)
	at org.eclipse.persistence.queries.DatabaseQuery.execute(DatabaseQuery.java:904)
	at org.eclipse.persistence.internal.sessions.AbstractSession.internalExecuteQuery(AbstractSession.java:3267)
	at org.eclipse.persistence.internal.sessions.AbstractSession.executeQuery(AbstractSession.java:1857)
	at org.eclipse.persistence.internal.sessions.AbstractSession.executeQuery(AbstractSession.java:1839)
	at org.eclipse.persistence.internal.sessions.AbstractSession.executeQuery(AbstractSession.java:1790)
	at org.eclipse.persistence.internal.sessions.AbstractSession.priviledgedExecuteNonSelectingCall(AbstractSession.java:5075)
	at org.eclipse.persistence.tools.schemaframework.DatabaseObjectDefinition.createOnDatabase(DatabaseObjectDefinition.java:202)
	at org.eclipse.persistence.tools.schemaframework.SchemaManager.createObject(SchemaManager.java:223)
	at org.eclipse.persistence.tools.schemaframework.TableCreator.createTables(TableCreator.java:165)
	at org.eclipse.persistence.tools.schemaframework.TableCreator.createTables(TableCreator.java:142)
	at org.eclipse.persistence.tools.schemaframework.TableCreator.createTables(TableCreator.java:134)
	at org.eclipse.persistence.tools.schemaframework.SchemaManager.createDefaultTables(SchemaManager.java:1032)
	at org.eclipse.persistence.internal.jpa.EntityManagerFactoryProvider.generateDefaultTables(EntityManagerFactoryProvider.java:109)
	at org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl.writeDDLToDatabase(EntityManagerSetupImpl.java:4215)
	at org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl.writeMetadataDDLToDatabase(EntityManagerSetupImpl.java:4281)
	at org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl.writeDDL(EntityManagerSetupImpl.java:4181)
	at org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl.writeDDL(EntityManagerSetupImpl.java:4054)
	at org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl.deploy(EntityManagerSetupImpl.java:777)
	at org.eclipse.persistence.internal.jpa.EntityManagerFactoryDelegate.getAbstractSession(EntityManagerFactoryDelegate.java:205)
	at org.eclipse.persistence.internal.jpa.EntityManagerFactoryDelegate.getDatabaseSession(EntityManagerFactoryDelegate.java:183)
	at org.eclipse.persistence.internal.jpa.EntityManagerFactoryImpl.getDatabaseSession(EntityManagerFactoryImpl.java:528)
	at org.eclipse.persistence.jpa.PersistenceProvider.createContainerEntityManagerFactoryImpl(PersistenceProvider.java:385)
	at org.eclipse.persistence.jpa.PersistenceProvider.createContainerEntityManagerFactory(PersistenceProvider.java:313)
	at org.glassfish.persistence.jpa.PersistenceUnitLoader.loadPU(PersistenceUnitLoader.java:199)
	at org.glassfish.persistence.jpa.PersistenceUnitLoader.<init>(PersistenceUnitLoader.java:107)
	at org.glassfish.persistence.jpa.JPADeployer$1.visitPUD(JPADeployer.java:223)
	at org.glassfish.persistence.jpa.JPADeployer$PersistenceUnitDescriptorIterator.iteratePUDs(JPADeployer.java:510)
	at org.glassfish.persistence.jpa.JPADeployer.createEMFs(JPADeployer.java:230)
	at org.glassfish.persistence.jpa.JPADeployer.prepare(JPADeployer.java:168)
	at com.sun.enterprise.v3.server.ApplicationLifecycle.prepareModule(ApplicationLifecycle.java:925)
	at com.sun.enterprise.v3.server.ApplicationLifecycle.deploy(ApplicationLifecycle.java:434)
	at com.sun.enterprise.v3.server.ApplicationLifecycle.deploy(ApplicationLifecycle.java:219)
	at org.glassfish.deployment.admin.DeployCommand.execute(DeployCommand.java:491)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$2$1.run(CommandRunnerImpl.java:539)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$2$1.run(CommandRunnerImpl.java:535)
	at java.security.AccessController.doPrivileged(Native Method)
	at javax.security.auth.Subject.doAs(Subject.java:360)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$2.execute(CommandRunnerImpl.java:534)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$3.run(CommandRunnerImpl.java:565)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$3.run(CommandRunnerImpl.java:557)
	at java.security.AccessController.doPrivileged(Native Method)
	at javax.security.auth.Subject.doAs(Subject.java:360)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl.doCommand(CommandRunnerImpl.java:556)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl.doCommand(CommandRunnerImpl.java:1464)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl.access$1300(CommandRunnerImpl.java:109)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$ExecutionContext.execute(CommandRunnerImpl.java:1846)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$ExecutionContext.execute(CommandRunnerImpl.java:1722)
	at org.glassfish.admin.rest.resources.admin.CommandResource.executeCommand(CommandResource.java:404)
	at org.glassfish.admin.rest.resources.admin.CommandResource.execCommandSimpInMultOut(CommandResource.java:234)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory$1.invoke(ResourceMethodInvocationHandlerFactory.java:81)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:144)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:161)
	at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:160)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:99)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:389)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:347)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:102)
	at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:309)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:315)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:297)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:267)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139)
	at org.glassfish.jersey.grizzly2.httpserver.GrizzlyHttpContainer.service(GrizzlyHttpContainer.java:375)
	at org.glassfish.admin.rest.adapter.JerseyContainerCommandService$3.service(JerseyContainerCommandService.java:173)
	at org.glassfish.admin.rest.adapter.RestAdapter.service(RestAdapter.java:179)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:283)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:200)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:132)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:111)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:536)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.sql.SQLSyntaxErrorException: Errore di sintassi: Encountered "VALUES" at line 1, column 108.
	at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(Unknown Source)
	at org.apache.derby.client.am.SqlException.getSQLException(Unknown Source)
	at org.apache.derby.client.am.Connection.prepareStatement(Unknown Source)
	at com.sun.gjc.spi.base.ConnectionHolder.prepareStatement(ConnectionHolder.java:586)
	at com.sun.gjc.spi.jdbc40.ConnectionWrapper40.prepareCachedStatement(ConnectionWrapper40.java:255)
	at com.sun.gjc.spi.jdbc40.ConnectionWrapper40.prepareCachedStatement(ConnectionWrapper40.java:52)
	at com.sun.gjc.spi.ManagedConnectionImpl.prepareCachedStatement(ManagedConnectionImpl.java:992)
	at com.sun.gjc.spi.jdbc40.ConnectionWrapper40.prepareStatement(ConnectionWrapper40.java:173)
	at org.eclipse.persistence.internal.databaseaccess.DatabaseAccessor.prepareStatement(DatabaseAccessor.java:1565)
	at org.eclipse.persistence.internal.databaseaccess.DatabaseAccessor.prepareStatement(DatabaseAccessor.java:1514)
	at org.eclipse.persistence.internal.databaseaccess.DatabaseCall.prepareStatement(DatabaseCall.java:778)
	at org.eclipse.persistence.internal.databaseaccess.DatabaseAccessor.basicExecuteCall(DatabaseAccessor.java:621)
	... 100 more
Caused by: org.apache.derby.client.am.SqlException: Errore di sintassi: Encountered "VALUES" at line 1, column 108.
	at org.apache.derby.client.am.Statement.completeSqlca(Unknown Source)
	at org.apache.derby.client.net.NetStatementReply.parsePrepareError(Unknown Source)
	at org.apache.derby.client.net.NetStatementReply.parsePRPSQLSTTreply(Unknown Source)
	at org.apache.derby.client.net.NetStatementReply.readPrepareDescribeOutput(Unknown Source)
	at org.apache.derby.client.net.StatementReply.readPrepareDescribeOutput(Unknown Source)
	at org.apache.derby.client.net.NetStatement.readPrepareDescribeOutput_(Unknown Source)
	at org.apache.derby.client.am.Statement.readPrepareDescribeOutput(Unknown Source)
	at org.apache.derby.client.am.PreparedStatement.readPrepareDescribeInputOutput(Unknown Source)
	at org.apache.derby.client.am.PreparedStatement.flowPrepareDescribeInputOutput(Unknown Source)
	at org.apache.derby.client.am.PreparedStatement.prepare(Unknown Source)
	at org.apache.derby.client.am.Connection.prepareStatementX(Unknown Source)
	... 110 more
]]

[2018-10-02T12:13:03.388+0200] [glassfish 4.1] [INFO] [AS-EJB-00054] [javax.enterprise.ejb.container] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475183388] [levelValue: 800] [[
  Portable JNDI names for EJB ConnectionModule: [java:global/ConnectionModule/ConnectionModule!com.mycompany.frogsssa.service.ConnectionModule, java:global/ConnectionModule/ConnectionModule]]]

[2018-10-02T12:13:03.413+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=43 _ThreadName=Thread-8] [timeMillis: 1538475183413] [levelValue: 800] [[
  ---PATH---/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/applications/ConnectionModule/WEB-INF/classes/files/keys.json]]

[2018-10-02T12:13:03.878+0200] [glassfish 4.1] [INFO] [] [org.jboss.weld.Version] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475183878] [levelValue: 800] [[
  WELD-000900: 2.2.13 (Final)]]

[2018-10-02T12:13:03.931+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=97 _ThreadName=Thread-8] [timeMillis: 1538475183931] [levelValue: 800] [[
  DD: Registered, cookie: [B@72218a26]]

[2018-10-02T12:13:03.931+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=97 _ThreadName=Thread-8] [timeMillis: 1538475183931] [levelValue: 800] [[
  Test DD registered: tcp://127.0.0.1:5555]]

[2018-10-02T12:13:04.316+0200] [glassfish 4.1] [WARN] [] [org.jboss.weld.Interceptor] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475184316] [levelValue: 900] [[
  WELD-001700: Interceptor annotation class javax.ejb.PostActivate not found, interception based on it is not enabled]]

[2018-10-02T12:13:04.316+0200] [glassfish 4.1] [WARN] [] [org.jboss.weld.Interceptor] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475184316] [levelValue: 900] [[
  WELD-001700: Interceptor annotation class javax.ejb.PrePassivate not found, interception based on it is not enabled]]

[2018-10-02T12:13:04.476+0200] [glassfish 4.1] [WARN] [] [org.jboss.weld.Event] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475184476] [levelValue: 900] [[
  WELD-000411: Observer method [BackedAnnotatedMethod] org.glassfish.sse.impl.ServerSentEventCdiExtension.processAnnotatedType(@Observes ProcessAnnotatedType<Object>, BeanManager) receives events for all annotated types. Consider restricting events using @WithAnnotations or a generic type with bounds.]]

[2018-10-02T12:13:04.488+0200] [glassfish 4.1] [WARN] [] [org.jboss.weld.Event] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475184488] [levelValue: 900] [[
  WELD-000411: Observer method [BackedAnnotatedMethod] private org.glassfish.jersey.ext.cdi1x.internal.CdiComponentProvider.processAnnotatedType(@Observes ProcessAnnotatedType<Object>) receives events for all annotated types. Consider restricting events using @WithAnnotations or a generic type with bounds.]]

[2018-10-02T12:13:04.492+0200] [glassfish 4.1] [WARN] [] [org.jboss.weld.Event] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475184492] [levelValue: 900] [[
  WELD-000411: Observer method [BackedAnnotatedMethod] public org.glassfish.jms.injection.JMSCDIExtension.processAnnotatedType(@Observes ProcessAnnotatedType<Object>) receives events for all annotated types. Consider restricting events using @WithAnnotations or a generic type with bounds.]]

[2018-10-02T12:13:05.223+0200] [glassfish 4.1] [SEVERE] [] [] [tid: _ThreadID=43 _ThreadName=Thread-9] [timeMillis: 1538475185223] [levelValue: 1000] [[
  SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".]]

[2018-10-02T12:13:05.223+0200] [glassfish 4.1] [SEVERE] [] [] [tid: _ThreadID=43 _ThreadName=Thread-9] [timeMillis: 1538475185223] [levelValue: 1000] [[
  SLF4J: Defaulting to no-operation (NOP) logger implementation]]

[2018-10-02T12:13:05.223+0200] [glassfish 4.1] [SEVERE] [] [] [tid: _ThreadID=43 _ThreadName=Thread-9] [timeMillis: 1538475185223] [levelValue: 1000] [[
  SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.]]

[2018-10-02T12:13:05.367+0200] [glassfish 4.1] [INFO] [AS-WEB-GLUE-00172] [javax.enterprise.web] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475185367] [levelValue: 800] [[
  Loading application [ConnectionModule] at [/ConnectionModule-1.0-SNAPSHOT]]]

[2018-10-02T12:13:05.450+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.core] [tid: _ThreadID=43 _ThreadName=admin-listener(2)] [timeMillis: 1538475185450] [levelValue: 800] [[
  ConnectionModule was successfully deployed in 5.827 milliseconds.]]

[2018-10-02T12:13:09.903+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538475189903] [levelValue: 800] [[
  Setted DM for sssaLara module orchestrator{	namespace "urn:sssa:orchestrator";	prefix "orchestrator";	extension advertise{		argument advertise{			yin-element false;		}	}	extension period{		argument period{			yin-element false;		}	}	extension minthreshold{		argument minthreshold{			yin-element false;		}	}	extension maxthreshold{		argument maxthreshold{			yin-element false;		}	}	list switches{		key id;		leaf id{			type string;			orchestrator:advertise onchange;		}		leaf ip{			type string;			orchestrator:advertise onchange;		}		leaf mac{			type string;			orchestrator:advertise onchange;		}	}	list load{		key id;		leaf id{			type string;		}		leaf tp{			type int32;			orchestrator:advertise onthreshold;			orchestrator:minthreshold 500;		}	}	container a {		leaf l1 {			type int32;			orchestrator:advertise onchange;		}		leaf l2 {			type string;			orchestrator:advertise onchange;		}		container b {			leaf l1 {				type int32;				orchestrator:advertise onchange;			}			leaf l2 {				type string;				orchestrator:advertise onchange;			}			container c {				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				leaf l3 {					type string;					orchestrator:advertise onchange;				}			}			list l {				key l1;				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }				container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;]]

[2018-10-02T12:13:09.903+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538475189903] [levelValue: 800] [[
  orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }			}		}		container c {			leaf l1 {				type int32;				orchestrator:advertise onchange;			}			leaf l2 {				type string;				orchestrator:advertise onchange;			}			leaf l3 {				type string;				orchestrator:advertise onchange;			}			container a {				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				container b {					leaf l1 {						type int32;						orchestrator:advertise onchange;					}					leaf l2 {						type string;						orchestrator:advertise onchange;					}					container c {						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						leaf l3 {							type string;							orchestrator:advertise onchange;						}						container a {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}					}					list l {						key l1;						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						container b {							leaf l1 {								type int32;								orchestrator:advertise onchange;							}							leaf l2 {								type string;								orchestrator:advertise onchange;							}							list l {								key l1;								leaf l1 {									type int32;									orchestrator:advertise onchange;								}								leaf l2 {									type string;									orchestrator:advertise onchange;								}								container c {									leaf l1 {										type int32;										orchestrator:advertise onchange;									}									leaf l2 {										type string;										orchestrator:advertise onchange;									}									leaf l3 {										type string;										orchestrator:advertise onchange;									}								}							}						}						container c {							leaf l1 {								type int32;								orchestrator:advertise onchange;							}							leaf l2 {								type string;								orchestrator:advertise onchange;							}							leaf l3 {								type string;								orchestrator:advertise onchange;							}							container a {								leaf l1 {									type int32;									orchestrator:advertise onchange;								}								leaf l2 {									type string;									orchestrator:advertise onchange;								}							}						}					}				}				container c {					leaf l1 {						type int32;						orchestrator:advertise onchange;					}					leaf l2 {						type string;						orchestrator:advertise onchange;					}					leaf l3 {						type string;						orchestrator:advertise onchange;					}					container a {						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						container b {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    ty]]

[2018-10-02T12:13:09.904+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538475189904] [levelValue: 800] [[
  pe string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}						container c {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}					}				}			}			container c {			    leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }			    container a {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container b {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        list l {                            key l1;                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1]]

[2018-10-02T12:13:09.904+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538475189904] [levelValue: 800] [[
  {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }			}		}	}	container a2 {        leaf l1 {            type int32;            orchestrator:advertise onchange;        }        leaf l2 {            type string;            orchestrator:advertise onchange;        }        container b {            leaf l1 {                type int32;                orchestrator:advertise onchange;            }            leaf l2 {                type string;                orchestrator:advertise onchange;            }            container c {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }            }            list l {                key l1;                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2]]

[2018-10-02T12:13:09.904+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538475189904] [levelValue: 800] [[
  {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }            }        }        container c {            leaf l1 {                type int32;                orchestrator:advertise onchange;            }            leaf l2 {                type string;                orchestrator:advertise onchange;            }            leaf l3 {                type string;                orchestrator:advertise onchange;            }            container a {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container c {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }]]

[2018-10-02T12:13:09.904+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538475189904] [levelValue: 800] [[
  leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    leaf l3 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }            }            container c {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }                container a {                    leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container a {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type]]

[2018-10-02T12:13:09.904+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538475189904] [levelValue: 800] [[
  string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container b {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    list l {                                        key l1;                                        leaf l1 {                                            type int32;                                            orchestrator:advertise onchange;                                        }                                        leaf l2 {                                            type string;                                            orchestrator:advertise onchange;                                        }                                    }                                }                            }                        }                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                                container c {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    leaf l3 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container a {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                    }    			}    		}    	}}]]

[2018-10-02T12:13:12.516+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538475192516] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T12:14:32.893+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538475272893] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T12:18:53.719+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538475533719] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T12:19:39.914+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538475579914] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T12:20:57.601+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538475657601] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T12:22:11.114+0200] [glassfish 4.1] [INFO] [] [org.eclipse.persistence.session./file:/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/applications/ConnectionModule/WEB-INF/classes/_com.mycompany_frogsssa_war_1.0-SNAPSHOTPU.connection] [tid: _ThreadID=45 _ThreadName=admin-listener(4)] [timeMillis: 1538475731114] [levelValue: 800] [[
  /file:/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/applications/ConnectionModule/WEB-INF/classes/_com.mycompany_frogsssa_war_1.0-SNAPSHOTPU logout successful]]

[2018-10-02T12:22:11.122+0200] [glassfish 4.1] [SEVERE] [] [javax.enterprise.web.util] [tid: _ThreadID=45 _ThreadName=admin-listener(4)] [timeMillis: 1538475731122] [levelValue: 1000] [[
  The web application [/ConnectionModule-1.0-SNAPSHOT] created a ThreadLocal with key of type [java.lang.ThreadLocal] (value [java.lang.ThreadLocal@7425f996]) and a value of type [zmq.ZMQ.PollSelector] (value [zmq.ZMQ$PollSelector@75fee43c]) but failed to remove it when the web application was stopped. Threads are going to be renewed over time to try and avoid a probable memory leak.]]

[2018-10-02T12:22:13.335+0200] [glassfish 4.1] [INFO] [NCLS-CORE-00092] [javax.enterprise.system.core] [tid: _ThreadID=140 _ThreadName=Thread-45] [timeMillis: 1538475733335] [levelValue: 800] [[
  Server shutdown initiated]]

[2018-10-02T12:22:13.340+0200] [glassfish 4.1] [INFO] [NCLS-BOOTSTRAP-00028] [javax.enterprise.bootstrap] [tid: _ThreadID=140 _ThreadName=Thread-45] [timeMillis: 1538475733340] [levelValue: 800] [[
  Unregistered com.sun.enterprise.glassfish.bootstrap.osgi.EmbeddedOSGiGlassFishImpl@7c3ebc6b from service registry.]]

[2018-10-02T12:22:13.341+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=140 _ThreadName=Thread-8] [timeMillis: 1538475733341] [levelValue: 800] [[
  FileMonitoring shutdown]]

[2018-10-02T12:22:13.344+0200] [glassfish 4.1] [INFO] [NCLS-JMX-00002] [javax.enterprise.system.jmx] [tid: _ThreadID=140 _ThreadName=Thread-45] [timeMillis: 1538475733344] [levelValue: 800] [[
  JMXStartupService: Stopped JMXConnectorServer: null]]

[2018-10-02T12:22:13.344+0200] [glassfish 4.1] [INFO] [NCLS-JMX-00001] [javax.enterprise.system.jmx] [tid: _ThreadID=140 _ThreadName=Thread-45] [timeMillis: 1538475733344] [levelValue: 800] [[
  JMXStartupService and JMXConnectors have been shut down.]]

[2018-10-02T12:22:13.363+0200] [glassfish 4.1] [WARNING] [] [javax.enterprise.web] [tid: _ThreadID=30 _ThreadName=http-listener-1(3)] [timeMillis: 1538475733363] [levelValue: 900] [[
  StandardWrapperValve[com.mycompany.frogsssa.service.ApplicationConfig]: Servlet.service() for servlet com.mycompany.frogsssa.service.ApplicationConfig threw exception
java.lang.IllegalStateException: ServiceLocatorImpl(__HK2_Generated_3,5,1760352990) has been shut down
	at org.jvnet.hk2.internal.ServiceLocatorImpl.checkState(ServiceLocatorImpl.java:2270)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandleImpl(ServiceLocatorImpl.java:639)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandle(ServiceLocatorImpl.java:632)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandle(ServiceLocatorImpl.java:650)
	at org.jvnet.hk2.internal.FactoryCreator.getFactoryHandle(FactoryCreator.java:103)
	at org.jvnet.hk2.internal.FactoryCreator.dispose(FactoryCreator.java:173)
	at org.jvnet.hk2.internal.SystemDescriptor.dispose(SystemDescriptor.java:526)
	at org.glassfish.jersey.process.internal.RequestScope$Instance.remove(RequestScope.java:532)
	at org.glassfish.jersey.process.internal.RequestScope$Instance.release(RequestScope.java:549)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:319)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139)
	at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:460)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:386)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:334)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:221)
	at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1682)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:318)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:160)
	at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:734)
	at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:673)
	at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:99)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:174)
	at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:416)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:283)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:283)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:200)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:132)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:111)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:536)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571)
	at java.lang.Thread.run(Thread.java:748)
]]

[2018-10-02T12:22:13.367+0200] [glassfish 4.1] [WARNING] [] [javax.enterprise.web] [tid: _ThreadID=28 _ThreadName=http-listener-1(1)] [timeMillis: 1538475733367] [levelValue: 900] [[
  StandardWrapperValve[com.mycompany.frogsssa.service.ApplicationConfig]: Servlet.service() for servlet com.mycompany.frogsssa.service.ApplicationConfig threw exception
java.lang.IllegalStateException: ServiceLocatorImpl(__HK2_Generated_3,5,1760352990) has been shut down
	at org.jvnet.hk2.internal.ServiceLocatorImpl.checkState(ServiceLocatorImpl.java:2270)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandleImpl(ServiceLocatorImpl.java:639)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandle(ServiceLocatorImpl.java:632)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandle(ServiceLocatorImpl.java:650)
	at org.jvnet.hk2.internal.FactoryCreator.getFactoryHandle(FactoryCreator.java:103)
	at org.jvnet.hk2.internal.FactoryCreator.dispose(FactoryCreator.java:173)
	at org.jvnet.hk2.internal.SystemDescriptor.dispose(SystemDescriptor.java:526)
	at org.glassfish.jersey.process.internal.RequestScope$Instance.remove(RequestScope.java:532)
	at org.glassfish.jersey.process.internal.RequestScope$Instance.release(RequestScope.java:549)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:319)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139)
	at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:460)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:386)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:334)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:221)
	at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1682)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:318)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:160)
	at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:734)
	at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:673)
	at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:99)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:174)
	at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:416)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:283)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:283)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:200)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:132)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:111)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:536)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571)
	at java.lang.Thread.run(Thread.java:748)
]]

[2018-10-02T12:22:13.369+0200] [glassfish 4.1] [WARNING] [] [javax.enterprise.web] [tid: _ThreadID=32 _ThreadName=http-listener-1(5)] [timeMillis: 1538475733369] [levelValue: 900] [[
  StandardWrapperValve[com.mycompany.frogsssa.service.ApplicationConfig]: Servlet.service() for servlet com.mycompany.frogsssa.service.ApplicationConfig threw exception
java.lang.IllegalStateException: ServiceLocatorImpl(__HK2_Generated_3,5,1760352990) has been shut down
	at org.jvnet.hk2.internal.ServiceLocatorImpl.checkState(ServiceLocatorImpl.java:2270)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandleImpl(ServiceLocatorImpl.java:639)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandle(ServiceLocatorImpl.java:632)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandle(ServiceLocatorImpl.java:650)
	at org.jvnet.hk2.internal.FactoryCreator.getFactoryHandle(FactoryCreator.java:103)
	at org.jvnet.hk2.internal.FactoryCreator.dispose(FactoryCreator.java:173)
	at org.jvnet.hk2.internal.SystemDescriptor.dispose(SystemDescriptor.java:526)
	at org.glassfish.jersey.process.internal.RequestScope$Instance.remove(RequestScope.java:532)
	at org.glassfish.jersey.process.internal.RequestScope$Instance.release(RequestScope.java:549)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:319)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139)
	at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:460)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:386)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:334)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:221)
	at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1682)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:318)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:160)
	at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:734)
	at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:673)
	at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:99)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:174)
	at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:416)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:283)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:283)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:200)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:132)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:111)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:536)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571)
	at java.lang.Thread.run(Thread.java:748)
]]

[2018-10-02T12:22:13.370+0200] [glassfish 4.1] [WARNING] [] [javax.enterprise.web] [tid: _ThreadID=29 _ThreadName=http-listener-1(2)] [timeMillis: 1538475733370] [levelValue: 900] [[
  StandardWrapperValve[com.mycompany.frogsssa.service.ApplicationConfig]: Servlet.service() for servlet com.mycompany.frogsssa.service.ApplicationConfig threw exception
java.lang.IllegalStateException: ServiceLocatorImpl(__HK2_Generated_3,5,1760352990) has been shut down
	at org.jvnet.hk2.internal.ServiceLocatorImpl.checkState(ServiceLocatorImpl.java:2270)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandleImpl(ServiceLocatorImpl.java:639)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandle(ServiceLocatorImpl.java:632)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandle(ServiceLocatorImpl.java:650)
	at org.jvnet.hk2.internal.FactoryCreator.getFactoryHandle(FactoryCreator.java:103)
	at org.jvnet.hk2.internal.FactoryCreator.dispose(FactoryCreator.java:173)
	at org.jvnet.hk2.internal.SystemDescriptor.dispose(SystemDescriptor.java:526)
	at org.glassfish.jersey.process.internal.RequestScope$Instance.remove(RequestScope.java:532)
	at org.glassfish.jersey.process.internal.RequestScope$Instance.release(RequestScope.java:549)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:319)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139)
	at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:460)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:386)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:334)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:221)
	at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1682)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:318)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:160)
	at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:734)
	at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:673)
	at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:99)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:174)
	at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:416)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:283)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:283)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:200)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:132)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:111)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:536)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571)
	at java.lang.Thread.run(Thread.java:748)
]]

[2018-10-02T12:22:13.369+0200] [glassfish 4.1] [WARNING] [] [javax.enterprise.web] [tid: _ThreadID=31 _ThreadName=http-listener-1(4)] [timeMillis: 1538475733369] [levelValue: 900] [[
  StandardWrapperValve[com.mycompany.frogsssa.service.ApplicationConfig]: Servlet.service() for servlet com.mycompany.frogsssa.service.ApplicationConfig threw exception
java.lang.IllegalStateException: ServiceLocatorImpl(__HK2_Generated_3,5,1760352990) has been shut down
	at org.jvnet.hk2.internal.ServiceLocatorImpl.checkState(ServiceLocatorImpl.java:2270)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandleImpl(ServiceLocatorImpl.java:639)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandle(ServiceLocatorImpl.java:632)
	at org.jvnet.hk2.internal.ServiceLocatorImpl.getServiceHandle(ServiceLocatorImpl.java:650)
	at org.jvnet.hk2.internal.FactoryCreator.getFactoryHandle(FactoryCreator.java:103)
	at org.jvnet.hk2.internal.FactoryCreator.dispose(FactoryCreator.java:173)
	at org.jvnet.hk2.internal.SystemDescriptor.dispose(SystemDescriptor.java:526)
	at org.glassfish.jersey.process.internal.RequestScope$Instance.remove(RequestScope.java:532)
	at org.glassfish.jersey.process.internal.RequestScope$Instance.release(RequestScope.java:549)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:319)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139)
	at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:460)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:386)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:334)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:221)
	at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1682)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:318)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:160)
	at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:734)
	at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:673)
	at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:99)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:174)
	at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:416)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:283)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:283)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:200)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:132)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:111)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:536)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571)
	at java.lang.Thread.run(Thread.java:748)
]]

[2018-10-02T12:22:13.388+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=146 _ThreadName=Thread-8] [timeMillis: 1538475733388] [levelValue: 800] [[
  JdbcRuntimeExtension,  getAllSystemRAResourcesAndPools = [GlassFishConfigBean.org.glassfish.jdbc.config.JdbcResource, GlassFishConfigBean.org.glassfish.jdbc.config.JdbcResource, GlassFishConfigBean.org.glassfish.jdbc.config.JdbcConnectionPool, GlassFishConfigBean.org.glassfish.jdbc.config.JdbcConnectionPool]]]

[2018-10-02T12:22:13.398+0200] [glassfish 4.1] [INFO] [ra.stop-successful] [javax.enterprise.resource.resourceadapter.com.sun.enterprise.connectors.service] [tid: _ThreadID=149 _ThreadName=Thread-53] [timeMillis: 1538475733398] [levelValue: 800] [[
  RAR7094: __ds_jdbc_ra shutdown successful.]]

[2018-10-02T12:22:26.932+0200] [] [INFO] [NCLS-GFLAUNCHER-00005] [javax.enterprise.launcher] [tid: _ThreadID=1 _ThreadName=main] [timeMillis: 1538475746932] [levelValue: 800] [[
  JVM invocation command line:
/usr/lib/jvm/java-8-oracle/bin/java
-cp
/home/gabriele/Applications/glassfish4/glassfish/modules/glassfish.jar
-XX:+UnlockDiagnosticVMOptions
-XX:NewRatio=2
-XX:MaxPermSize=192m
-Xmx512m
-javaagent:/home/gabriele/Applications/glassfish4/glassfish/lib/monitor/flashlight-agent.jar
-client
-Djavax.xml.accessExternalSchema=all
-Djavax.net.ssl.trustStore=/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/config/cacerts.jks
-Djdk.corba.allowOutputStreamSubclass=true
-Dfelix.fileinstall.dir=/home/gabriele/Applications/glassfish4/glassfish/modules/autostart/
-Dorg.glassfish.additionalOSGiBundlesToStart=org.apache.felix.shell,org.apache.felix.gogo.runtime,org.apache.felix.gogo.shell,org.apache.felix.gogo.command,org.apache.felix.shell.remote,org.apache.felix.fileinstall
-Dcom.sun.aas.installRoot=/home/gabriele/Applications/glassfish4/glassfish
-Dfelix.fileinstall.poll=5000
-Djava.endorsed.dirs=/home/gabriele/Applications/glassfish4/glassfish/modules/endorsed:/home/gabriele/Applications/glassfish4/glassfish/lib/endorsed
-Djava.security.policy=/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/config/server.policy
-Dosgi.shell.telnet.maxconn=1
-Dfelix.fileinstall.bundles.startTransient=true
-Dcom.sun.enterprise.config.config_environment_factory_class=com.sun.enterprise.config.serverbeans.AppserverConfigEnvironmentFactory
-Dfelix.fileinstall.log.level=2
-Djavax.net.ssl.keyStore=/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/config/keystore.jks
-Djava.security.auth.login.config=/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/config/login.conf
-Dfelix.fileinstall.disableConfigSave=false
-Dfelix.fileinstall.bundles.new.start=true
-Dcom.sun.aas.instanceRoot=/home/gabriele/Applications/glassfish4/glassfish/domains/domain1
-Dosgi.shell.telnet.port=6666
-Dgosh.args=--nointeractive
-Dcom.sun.enterprise.security.httpsOutboundKeyAlias=s1as
-Dosgi.shell.telnet.ip=127.0.0.1
-DANTLR_USE_DIRECT_CLASS_LOADING=true
-Djava.awt.headless=true
-Dcom.ctc.wstx.returnNullForDefaultNamespace=true
-Djava.ext.dirs=/usr/lib/jvm/java-8-oracle/lib/ext:/usr/lib/jvm/java-8-oracle/jre/lib/ext:/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/lib/ext
-Djdbc.drivers=org.apache.derby.jdbc.ClientDriver
-Djava.library.path=/home/gabriele/Applications/glassfish4/glassfish/lib:/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib
com.sun.enterprise.glassfish.bootstrap.ASMain
-upgrade
false
-domaindir
/home/gabriele/Applications/glassfish4/glassfish/domains/domain1
-read-stdin
true
-asadmin-args
--host,,,localhost,,,--port,,,4848,,,--secure=false,,,--terse=false,,,--echo=false,,,--interactive=true,,,start-domain,,,--verbose=false,,,--watchdog=false,,,--debug=false,,,--domaindir,,,/home/gabriele/Applications/glassfish4/glassfish/domains,,,domain1
-domainname
domain1
-instancename
server
-type
DAS
-verbose
false
-asadmin-classpath
/home/gabriele/Applications/glassfish4/glassfish/lib/client/appserver-cli.jar
-debug
false
-asadmin-classname
com.sun.enterprise.admin.cli.AdminMain]]

[2018-10-02T12:22:28.301+0200] [glassfish 4.1] [INFO] [NCLS-LOGGING-00009] [javax.enterprise.logging] [tid: _ThreadID=17 _ThreadName=RunLevelControllerThread-1538475748227] [timeMillis: 1538475748301] [levelValue: 800] [[
  Running GlassFish Version: GlassFish Server Open Source Edition  4.1.1  (build 3)]]

[2018-10-02T12:22:28.303+0200] [glassfish 4.1] [INFO] [NCLS-LOGGING-00010] [javax.enterprise.logging] [tid: _ThreadID=17 _ThreadName=RunLevelControllerThread-1538475748227] [timeMillis: 1538475748303] [levelValue: 800] [[
  Server log file is using Formatter class: com.sun.enterprise.server.logging.ODLLogFormatter]]

[2018-10-02T12:22:28.382+0200] [glassfish 4.1] [INFO] [NCLS-SECURITY-01115] [javax.enterprise.system.core.security] [tid: _ThreadID=18 _ThreadName=RunLevelControllerThread-1538475748232] [timeMillis: 1538475748382] [levelValue: 800] [[
  Realm [admin-realm] of classtype [com.sun.enterprise.security.auth.realm.file.FileRealm] successfully created.]]

[2018-10-02T12:22:28.382+0200] [glassfish 4.1] [INFO] [NCLS-SECURITY-01115] [javax.enterprise.system.core.security] [tid: _ThreadID=18 _ThreadName=RunLevelControllerThread-1538475748232] [timeMillis: 1538475748382] [levelValue: 800] [[
  Realm [file] of classtype [com.sun.enterprise.security.auth.realm.file.FileRealm] successfully created.]]

[2018-10-02T12:22:28.385+0200] [glassfish 4.1] [INFO] [NCLS-SECURITY-01115] [javax.enterprise.system.core.security] [tid: _ThreadID=18 _ThreadName=RunLevelControllerThread-1538475748232] [timeMillis: 1538475748385] [levelValue: 800] [[
  Realm [certificate] of classtype [com.sun.enterprise.security.auth.realm.certificate.CertificateRealm] successfully created.]]

[2018-10-02T12:22:28.478+0200] [glassfish 4.1] [INFO] [SEC-SVCS-00100] [javax.enterprise.security.services] [tid: _ThreadID=17 _ThreadName=RunLevelControllerThread-1538475748227] [timeMillis: 1538475748478] [levelValue: 800] [[
  Authorization Service has successfully initialized.]]

[2018-10-02T12:22:28.592+0200] [glassfish 4.1] [INFO] [] [org.glassfish.ha.store.spi.BackingStoreFactoryRegistry] [tid: _ThreadID=19 _ThreadName=RunLevelControllerThread-1538475748232] [timeMillis: 1538475748592] [levelValue: 800] [[
  Registered org.glassfish.ha.store.adapter.cache.ShoalBackingStoreProxy for persistence-type = replicated in BackingStoreFactoryRegistry]]

[2018-10-02T12:22:28.657+0200] [glassfish 4.1] [WARNING] [] [org.glassfish.grizzly.config.Utils] [tid: _ThreadID=16 _ThreadName=RunLevelControllerThread-1538475748226] [timeMillis: 1538475748657] [levelValue: 900] [[
  Instance could not be initialized. Class=interface org.glassfish.grizzly.http.server.AddOn, name=http-listener-1, realClassName=org.glassfish.grizzly.http2.Http2AddOn]]

[2018-10-02T12:22:28.693+0200] [glassfish 4.1] [INFO] [NCLS-CORE-00087] [javax.enterprise.system.core] [tid: _ThreadID=16 _ThreadName=RunLevelControllerThread-1538475748226] [timeMillis: 1538475748693] [levelValue: 800] [[
  Grizzly Framework 2.3.23 started in: 13ms - bound to [/0.0.0.0:9090]]]

[2018-10-02T12:22:28.704+0200] [glassfish 4.1] [WARNING] [] [org.glassfish.grizzly.config.Utils] [tid: _ThreadID=16 _ThreadName=RunLevelControllerThread-1538475748226] [timeMillis: 1538475748704] [levelValue: 900] [[
  Instance could not be initialized. Class=interface org.glassfish.grizzly.http.server.AddOn, name=http-listener-2, realClassName=org.glassfish.grizzly.http2.Http2AddOn]]

[2018-10-02T12:22:28.711+0200] [glassfish 4.1] [INFO] [NCLS-CORE-00087] [javax.enterprise.system.core] [tid: _ThreadID=16 _ThreadName=RunLevelControllerThread-1538475748226] [timeMillis: 1538475748711] [levelValue: 800] [[
  Grizzly Framework 2.3.23 started in: 4ms - bound to [/0.0.0.0:8181]]]

[2018-10-02T12:22:28.713+0200] [glassfish 4.1] [WARNING] [] [org.glassfish.grizzly.config.Utils] [tid: _ThreadID=16 _ThreadName=RunLevelControllerThread-1538475748226] [timeMillis: 1538475748713] [levelValue: 900] [[
  Instance could not be initialized. Class=interface org.glassfish.grizzly.http.server.AddOn, name=admin-listener, realClassName=org.glassfish.grizzly.http2.Http2AddOn]]

[2018-10-02T12:22:28.718+0200] [glassfish 4.1] [INFO] [NCLS-CORE-00087] [javax.enterprise.system.core] [tid: _ThreadID=16 _ThreadName=RunLevelControllerThread-1538475748226] [timeMillis: 1538475748718] [levelValue: 800] [[
  Grizzly Framework 2.3.23 started in: 1ms - bound to [/0.0.0.0:4848]]]

[2018-10-02T12:22:28.746+0200] [glassfish 4.1] [INFO] [NCLS-CORE-00087] [javax.enterprise.system.core] [tid: _ThreadID=18 _ThreadName=RunLevelControllerThread-1538475748232] [timeMillis: 1538475748746] [levelValue: 800] [[
  Grizzly Framework 2.3.23 started in: 3ms - bound to [/0.0.0.0:3700]]]

[2018-10-02T12:22:28.747+0200] [glassfish 4.1] [INFO] [NCLS-CORE-00017] [javax.enterprise.system.core] [tid: _ThreadID=1 _ThreadName=main] [timeMillis: 1538475748747] [levelValue: 800] [[
  GlassFish Server Open Source Edition  4.1.1  (3) startup time : Felix (1.153ms), startup services(525ms), total(1.678ms)]]

[2018-10-02T12:22:28.825+0200] [glassfish 4.1] [INFO] [jts.startup_msg] [javax.enterprise.system.core.transaction.com.sun.jts.CosTransactions] [tid: _ThreadID=16 _ThreadName=RunLevelControllerThread-1538475748226] [timeMillis: 1538475748825] [levelValue: 800] [[
  JTS5014: Recoverable JTS instance, serverId = [100]]]

[2018-10-02T12:22:28.874+0200] [glassfish 4.1] [INFO] [NCLS-CORE-00087] [javax.enterprise.system.core] [tid: _ThreadID=18 _ThreadName=RunLevelControllerThread-1538475748232] [timeMillis: 1538475748874] [levelValue: 800] [[
  Grizzly Framework 2.3.23 started in: 0ms - bound to [/0.0.0.0:7676]]]

[2018-10-02T12:22:28.875+0200] [glassfish 4.1] [INFO] [NCLS-BOOTSTRAP-00027] [javax.enterprise.bootstrap] [tid: _ThreadID=1 _ThreadName=main] [timeMillis: 1538475748875] [levelValue: 800] [[
  Registered com.sun.enterprise.glassfish.bootstrap.osgi.EmbeddedOSGiGlassFishImpl@7c3ebc6b as OSGi service registration: org.apache.felix.framework.ServiceRegistrationImpl@5da7cee2.]]

[2018-10-02T12:22:28.894+0200] [glassfish 4.1] [INFO] [NCLS-JMX-00005] [javax.enterprise.system.jmx] [tid: _ThreadID=52 _ThreadName=Thread-13] [timeMillis: 1538475748894] [levelValue: 800] [[
  JMXStartupService has started JMXConnector on JMXService URL service:jmx:rmi://debian-gabriele-hp:8686/jndi/rmi://debian-gabriele-hp:8686/jmxrmi]]

[2018-10-02T12:22:33.288+0200] [glassfish 4.1] [INFO] [NCLS-REST-00001] [javax.enterprise.admin.rest] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475753288] [levelValue: 800] [[
  Listening to REST requests at context: /command/domain.]]

[2018-10-02T12:22:33.361+0200] [glassfish 4.1] [INFO] [] [org.hibernate.validator.internal.util.Version] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475753361] [levelValue: 800] [[
  HV000001: Hibernate Validator 5.1.2.Final]]

[2018-10-02T12:22:33.988+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475753988] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:22:34.322+0200] [glassfish 4.1] [SEVERE] [NCLS-SECURITY-05054] [javax.enterprise.system.security.ssl] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475754322] [levelValue: 1000] [[
  The SSL certificate has expired: [
[
  Version: V3
  Subject: OU=Equifax Secure Certificate Authority, O=Equifax, C=US
  Signature Algorithm: SHA1withRSA, OID = 1.2.840.113549.1.1.5

  Key:  Sun RSA public key, 1024 bits
  modulus: 135786214035069526348186531221551781468391756233528066061569654028671100866720352830303278016129003918213826297308054231261658522889438712013757624116391437358730449661353175673177742307421061340003741057138887918110217006515773038453829253517076741780039735595086881329494037450587568122088113584549069375417
  public exponent: 65537
  Validity: [From: Sat Aug 22 18:41:51 CEST 1998,
               To: Wed Aug 22 18:41:51 CEST 2018]
  Issuer: OU=Equifax Secure Certificate Authority, O=Equifax, C=US
  SerialNumber: [    35def4cf]

Certificate Extensions: 7
[1]: ObjectId: 1.2.840.113533.7.65.0 Criticality=false
Extension unknown: DER encoded OCTET string =
0000: 04 0D 30 0B 1B 05 56 33   2E 30 63 03 02 06 C0     ..0...V3.0c....


[2]: ObjectId: 2.5.29.35 Criticality=false
AuthorityKeyIdentifier [
KeyIdentifier [
0000: 48 E6 68 F9 2B D2 B2 95   D7 47 D8 23 20 10 4F 33  H.h.+....G.# .O3
0010: 98 90 9F D4                                        ....
]
]

[3]: ObjectId: 2.5.29.19 Criticality=false
BasicConstraints:[
  CA:true
  PathLen:2147483647
]

[4]: ObjectId: 2.5.29.31 Criticality=false
CRLDistributionPoints [
  [DistributionPoint:
     [CN=CRL1, OU=Equifax Secure Certificate Authority, O=Equifax, C=US]
]]

[5]: ObjectId: 2.5.29.15 Criticality=false
KeyUsage [
  Key_CertSign
  Crl_Sign
]

[6]: ObjectId: 2.5.29.16 Criticality=false
PrivateKeyUsage: [
To: Wed Aug 22 18:41:51 CEST 2018]

[7]: ObjectId: 2.5.29.14 Criticality=false
SubjectKeyIdentifier [
KeyIdentifier [
0000: 48 E6 68 F9 2B D2 B2 95   D7 47 D8 23 20 10 4F 33  H.h.+....G.# .O3
0010: 98 90 9F D4                                        ....
]
]

]
  Algorithm: [SHA1withRSA]
  Signature:
0000: 58 CE 29 EA FC F7 DE B5   CE 02 B9 17 B5 85 D1 B9  X.).............
0010: E3 E0 95 CC 25 31 0D 00   A6 92 6E 7F B6 92 63 9E  ....%1....n...c.
0020: 50 95 D1 9A 6F E4 11 DE   63 85 6E 98 EE A8 FF 5A  P...o...c.n....Z
0030: C8 D3 55 B2 66 71 57 DE   C0 21 EB 3D 2A A7 23 49  ..U.fqW..!.=*.#I
0040: 01 04 86 42 7B FC EE 7F   A2 16 52 B5 67 67 D3 40  ...B......R.gg.@
0050: DB 3B 26 58 B2 28 77 3D   AE 14 77 61 D6 FA 2A 66  .;&X.(w=..wa..*f
0060: 27 A0 0D FA A7 73 5C EA   70 F1 94 21 65 44 5F FA  '....s\.p..!eD_.
0070: FC EF 29 68 A9 A2 87 79   EF 79 EF 4F AC 07 77 38  ..)h...y.y.O..w8

]]]

[2018-10-02T12:22:34.328+0200] [glassfish 4.1] [SEVERE] [NCLS-SECURITY-05054] [javax.enterprise.system.security.ssl] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475754328] [levelValue: 1000] [[
  The SSL certificate has expired: [
[
  Version: V1
  Subject: CN=GTE CyberTrust Global Root, OU="GTE CyberTrust Solutions, Inc.", O=GTE Corporation, C=US
  Signature Algorithm: MD5withRSA, OID = 1.2.840.113549.1.1.4

  Key:  Sun RSA public key, 1024 bits
  modulus: 104674226241368487598835828377585222181792546532354327780214427055917513664449991602803276678454577364904540367827644455215731003386468752240014232146814457308076052176227490263634768927290191763858631579785604655038492469791381988347440106477066514204303723029602991655085187937840556671697442212352844587673
  public exponent: 65537
  Validity: [From: Thu Aug 13 02:29:00 CEST 1998,
               To: Tue Aug 14 01:59:00 CEST 2018]
  Issuer: CN=GTE CyberTrust Global Root, OU="GTE CyberTrust Solutions, Inc.", O=GTE Corporation, C=US
  SerialNumber: [    01a5]

]
  Algorithm: [MD5withRSA]
  Signature:
0000: 6D EB 1B 09 E9 5E D9 51   DB 67 22 61 A4 2A 3C 48  m....^.Q.g"a.*<H
0010: 77 E3 A0 7C A6 DE 73 A2   14 03 85 3D FB AB 0E 30  w.....s....=...0
0020: C5 83 16 33 81 13 08 9E   7B 34 4E DF 40 C8 74 D7  ...3.....4N.@.t.
0030: B9 7D DC F4 76 55 7D 9B   63 54 18 E9 F0 EA F3 5C  ....vU..cT.....\
0040: B1 D9 8B 42 1E B9 C0 95   4E BA FA D5 E2 7C F5 68  ...B....N......h
0050: 61 BF 8E EC 05 97 5F 5B   B0 D7 A3 85 34 C4 24 A7  a....._[....4.$.
0060: 0D 0F 95 93 EF CB 94 D8   9E 1F 9D 5C 85 6D C7 AA  ...........\.m..
0070: AE 4F 1F 22 B5 CD 95 AD   BA A7 CC F9 AB 0B 7A 7F  .O."..........z.

]]]

[2018-10-02T12:22:34.337+0200] [glassfish 4.1] [INFO] [NCLS-SECURITY-01002] [javax.enterprise.system.core.security] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475754337] [levelValue: 800] [[
  Java security manager is disabled.]]

[2018-10-02T12:22:34.337+0200] [glassfish 4.1] [INFO] [NCLS-SECURITY-01010] [javax.enterprise.system.core.security] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475754337] [levelValue: 800] [[
  Entering Security Startup Service.]]

[2018-10-02T12:22:34.339+0200] [glassfish 4.1] [INFO] [NCLS-SECURITY-01143] [javax.enterprise.system.core.security] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475754339] [levelValue: 800] [[
  Loading policy provider com.sun.enterprise.security.provider.PolicyWrapper.]]

[2018-10-02T12:22:34.359+0200] [glassfish 4.1] [INFO] [NCLS-SECURITY-01011] [javax.enterprise.system.core.security] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475754359] [levelValue: 800] [[
  Security Service(s) started successfully.]]

[2018-10-02T12:22:34.485+0200] [glassfish 4.1] [INFO] [AS-WEB-GLUE-00198] [javax.enterprise.web] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475754485] [levelValue: 800] [[
  Created HTTP listener http-listener-1 on host/port 0.0.0.0:9090]]

[2018-10-02T12:22:34.489+0200] [glassfish 4.1] [INFO] [AS-WEB-GLUE-00198] [javax.enterprise.web] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475754489] [levelValue: 800] [[
  Created HTTP listener http-listener-2 on host/port 0.0.0.0:8181]]

[2018-10-02T12:22:34.491+0200] [glassfish 4.1] [INFO] [AS-WEB-GLUE-00198] [javax.enterprise.web] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475754491] [levelValue: 800] [[
  Created HTTP listener admin-listener on host/port 0.0.0.0:4848]]

[2018-10-02T12:22:34.507+0200] [glassfish 4.1] [INFO] [AS-WEB-GLUE-00200] [javax.enterprise.web] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475754507] [levelValue: 800] [[
  Created virtual server server]]

[2018-10-02T12:22:34.509+0200] [glassfish 4.1] [INFO] [AS-WEB-GLUE-00200] [javax.enterprise.web] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475754509] [levelValue: 800] [[
  Created virtual server __asadmin]]

[2018-10-02T12:22:34.631+0200] [glassfish 4.1] [INFO] [AS-WEB-CORE-00306] [javax.enterprise.web.core] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475754631] [levelValue: 800] [[
  Setting JAAS app name glassfish-web]]

[2018-10-02T12:22:34.631+0200] [glassfish 4.1] [INFO] [AS-WEB-GLUE-00201] [javax.enterprise.web] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475754631] [levelValue: 800] [[
  Virtual server server loaded default web module ]]

[2018-10-02T12:22:34.998+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475754998] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:22:35.090+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475755090] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:22:35.102+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475755102] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:22:35.102+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475755102] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:22:35.103+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475755103] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:22:35.103+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475755103] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:22:35.104+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475755104] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:22:35.104+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475755104] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:22:35.105+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475755105] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:22:35.105+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475755105] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:22:35.106+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475755106] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:22:35.106+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475755106] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:22:35.106+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475755106] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:22:35.107+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475755107] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:22:35.107+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475755107] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:22:35.108+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475755108] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:22:35.109+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475755109] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:22:35.109+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475755109] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:22:35.110+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475755110] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:22:35.110+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475755110] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:22:35.111+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475755111] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:22:35.111+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475755111] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:22:35.112+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475755112] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:22:35.112+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475755112] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:22:35.113+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475755113] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:22:35.113+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475755113] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:22:35.114+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475755114] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:22:35.114+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475755114] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:22:35.114+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475755114] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:22:35.115+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475755115] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:22:35.116+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475755116] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:22:35.116+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.common] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475755116] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:22:35.231+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.tools.deployment.dol] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475755231] [levelValue: 800] [[
  visiting unvisited references]]

[2018-10-02T12:22:36.195+0200] [glassfish 4.1] [WARNING] [] [org.eclipse.persistence.default] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475756195] [levelValue: 900] [[
  
java.lang.NullPointerException
	at org.eclipse.persistence.platform.server.ServerPlatformUtils.createServerPlatform(ServerPlatformUtils.java:99)
	at org.eclipse.persistence.sessions.factories.SessionManager.init(SessionManager.java:77)
	at org.eclipse.persistence.sessions.factories.SessionManager.<clinit>(SessionManager.java:71)
	at org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl.addSessionToGlobalSessionManager(EntityManagerSetupImpl.java:907)
	at org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl.initSession(EntityManagerSetupImpl.java:2671)
	at org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl.deploy(EntityManagerSetupImpl.java:675)
	at org.eclipse.persistence.internal.jpa.EntityManagerFactoryDelegate.getAbstractSession(EntityManagerFactoryDelegate.java:205)
	at org.eclipse.persistence.internal.jpa.EntityManagerFactoryDelegate.getDatabaseSession(EntityManagerFactoryDelegate.java:183)
	at org.eclipse.persistence.internal.jpa.EntityManagerFactoryImpl.getDatabaseSession(EntityManagerFactoryImpl.java:528)
	at org.eclipse.persistence.jpa.PersistenceProvider.createContainerEntityManagerFactoryImpl(PersistenceProvider.java:385)
	at org.eclipse.persistence.jpa.PersistenceProvider.createContainerEntityManagerFactory(PersistenceProvider.java:313)
	at org.glassfish.persistence.jpa.PersistenceUnitLoader.loadPU(PersistenceUnitLoader.java:199)
	at org.glassfish.persistence.jpa.PersistenceUnitLoader.<init>(PersistenceUnitLoader.java:107)
	at org.glassfish.persistence.jpa.JPADeployer$1.visitPUD(JPADeployer.java:223)
	at org.glassfish.persistence.jpa.JPADeployer$PersistenceUnitDescriptorIterator.iteratePUDs(JPADeployer.java:510)
	at org.glassfish.persistence.jpa.JPADeployer.createEMFs(JPADeployer.java:230)
	at org.glassfish.persistence.jpa.JPADeployer.prepare(JPADeployer.java:168)
	at com.sun.enterprise.v3.server.ApplicationLifecycle.prepareModule(ApplicationLifecycle.java:925)
	at com.sun.enterprise.v3.server.ApplicationLifecycle.deploy(ApplicationLifecycle.java:434)
	at com.sun.enterprise.v3.server.ApplicationLifecycle.deploy(ApplicationLifecycle.java:219)
	at org.glassfish.deployment.admin.DeployCommand.execute(DeployCommand.java:491)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$2$1.run(CommandRunnerImpl.java:539)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$2$1.run(CommandRunnerImpl.java:535)
	at java.security.AccessController.doPrivileged(Native Method)
	at javax.security.auth.Subject.doAs(Subject.java:360)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$2.execute(CommandRunnerImpl.java:534)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$3.run(CommandRunnerImpl.java:565)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$3.run(CommandRunnerImpl.java:557)
	at java.security.AccessController.doPrivileged(Native Method)
	at javax.security.auth.Subject.doAs(Subject.java:360)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl.doCommand(CommandRunnerImpl.java:556)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl.doCommand(CommandRunnerImpl.java:1464)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl.access$1300(CommandRunnerImpl.java:109)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$ExecutionContext.execute(CommandRunnerImpl.java:1846)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$ExecutionContext.execute(CommandRunnerImpl.java:1722)
	at org.glassfish.admin.rest.resources.admin.CommandResource.executeCommand(CommandResource.java:404)
	at org.glassfish.admin.rest.resources.admin.CommandResource.execCommandSimpInMultOut(CommandResource.java:234)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory$1.invoke(ResourceMethodInvocationHandlerFactory.java:81)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:144)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:161)
	at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:160)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:99)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:389)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:347)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:102)
	at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:309)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:315)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:297)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:267)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139)
	at org.glassfish.jersey.grizzly2.httpserver.GrizzlyHttpContainer.service(GrizzlyHttpContainer.java:375)
	at org.glassfish.admin.rest.adapter.JerseyContainerCommandService$3.service(JerseyContainerCommandService.java:173)
	at org.glassfish.admin.rest.adapter.RestAdapter.service(RestAdapter.java:179)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:283)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:200)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:132)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:111)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:536)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571)
	at java.lang.Thread.run(Thread.java:748)
]]

[2018-10-02T12:22:36.213+0200] [glassfish 4.1] [INFO] [] [org.eclipse.persistence.session./file:/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/applications/ConnectionModule/WEB-INF/classes/_com.mycompany_frogsssa_war_1.0-SNAPSHOTPU] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475756213] [levelValue: 800] [[
  EclipseLink, version: Eclipse Persistence Services - 2.6.1.v20150605-31e8258]]

[2018-10-02T12:22:36.792+0200] [glassfish 4.1] [INFO] [] [org.eclipse.persistence.session./file:/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/applications/ConnectionModule/WEB-INF/classes/_com.mycompany_frogsssa_war_1.0-SNAPSHOTPU.connection] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475756792] [levelValue: 800] [[
  /file:/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/applications/ConnectionModule/WEB-INF/classes/_com.mycompany_frogsssa_war_1.0-SNAPSHOTPU login successful]]

[2018-10-02T12:22:36.858+0200] [glassfish 4.1] [WARNING] [] [org.eclipse.persistence.session./file:/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/applications/ConnectionModule/WEB-INF/classes/_com.mycompany_frogsssa_war_1.0-SNAPSHOTPU] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475756858] [levelValue: 900] [[
  
Local Exception Stack: 
Exception [EclipseLink-4002] (Eclipse Persistence Services - 2.6.1.v20150605-31e8258): org.eclipse.persistence.exceptions.DatabaseException
Internal Exception: java.sql.SQLSyntaxErrorException: Errore di sintassi: Encountered "VALUES" at line 1, column 108.
Error Code: 30000
Call: CREATE TABLE RESOURCES (ID VARCHAR(255) NOT NULL, CORRESPONDENCE BLOB(2147483647), DATAMODEL VARCHAR(255), VALUES BLOB(2147483647), PRIMARY KEY (ID))
Query: DataModifyQuery(sql="CREATE TABLE RESOURCES (ID VARCHAR(255) NOT NULL, CORRESPONDENCE BLOB(2147483647), DATAMODEL VARCHAR(255), VALUES BLOB(2147483647), PRIMARY KEY (ID))")
	at org.eclipse.persistence.exceptions.DatabaseException.sqlException(DatabaseException.java:340)
	at org.eclipse.persistence.internal.databaseaccess.DatabaseAccessor.basicExecuteCall(DatabaseAccessor.java:684)
	at org.eclipse.persistence.internal.databaseaccess.DatabaseAccessor.executeCall(DatabaseAccessor.java:560)
	at org.eclipse.persistence.internal.sessions.AbstractSession.basicExecuteCall(AbstractSession.java:2055)
	at org.eclipse.persistence.sessions.server.ServerSession.executeCall(ServerSession.java:570)
	at org.eclipse.persistence.internal.queries.DatasourceCallQueryMechanism.executeCall(DatasourceCallQueryMechanism.java:242)
	at org.eclipse.persistence.internal.queries.DatasourceCallQueryMechanism.executeCall(DatasourceCallQueryMechanism.java:228)
	at org.eclipse.persistence.internal.queries.DatasourceCallQueryMechanism.executeNoSelectCall(DatasourceCallQueryMechanism.java:271)
	at org.eclipse.persistence.internal.queries.DatasourceCallQueryMechanism.executeNoSelect(DatasourceCallQueryMechanism.java:251)
	at org.eclipse.persistence.queries.DataModifyQuery.executeDatabaseQuery(DataModifyQuery.java:85)
	at org.eclipse.persistence.queries.DatabaseQuery.execute(DatabaseQuery.java:904)
	at org.eclipse.persistence.internal.sessions.AbstractSession.internalExecuteQuery(AbstractSession.java:3267)
	at org.eclipse.persistence.internal.sessions.AbstractSession.executeQuery(AbstractSession.java:1857)
	at org.eclipse.persistence.internal.sessions.AbstractSession.executeQuery(AbstractSession.java:1839)
	at org.eclipse.persistence.internal.sessions.AbstractSession.executeQuery(AbstractSession.java:1790)
	at org.eclipse.persistence.internal.sessions.AbstractSession.priviledgedExecuteNonSelectingCall(AbstractSession.java:5075)
	at org.eclipse.persistence.tools.schemaframework.DatabaseObjectDefinition.createOnDatabase(DatabaseObjectDefinition.java:202)
	at org.eclipse.persistence.tools.schemaframework.SchemaManager.createObject(SchemaManager.java:223)
	at org.eclipse.persistence.tools.schemaframework.TableCreator.createTables(TableCreator.java:165)
	at org.eclipse.persistence.tools.schemaframework.TableCreator.createTables(TableCreator.java:142)
	at org.eclipse.persistence.tools.schemaframework.TableCreator.createTables(TableCreator.java:134)
	at org.eclipse.persistence.tools.schemaframework.SchemaManager.createDefaultTables(SchemaManager.java:1032)
	at org.eclipse.persistence.internal.jpa.EntityManagerFactoryProvider.generateDefaultTables(EntityManagerFactoryProvider.java:109)
	at org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl.writeDDLToDatabase(EntityManagerSetupImpl.java:4215)
	at org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl.writeMetadataDDLToDatabase(EntityManagerSetupImpl.java:4281)
	at org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl.writeDDL(EntityManagerSetupImpl.java:4181)
	at org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl.writeDDL(EntityManagerSetupImpl.java:4054)
	at org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl.deploy(EntityManagerSetupImpl.java:777)
	at org.eclipse.persistence.internal.jpa.EntityManagerFactoryDelegate.getAbstractSession(EntityManagerFactoryDelegate.java:205)
	at org.eclipse.persistence.internal.jpa.EntityManagerFactoryDelegate.getDatabaseSession(EntityManagerFactoryDelegate.java:183)
	at org.eclipse.persistence.internal.jpa.EntityManagerFactoryImpl.getDatabaseSession(EntityManagerFactoryImpl.java:528)
	at org.eclipse.persistence.jpa.PersistenceProvider.createContainerEntityManagerFactoryImpl(PersistenceProvider.java:385)
	at org.eclipse.persistence.jpa.PersistenceProvider.createContainerEntityManagerFactory(PersistenceProvider.java:313)
	at org.glassfish.persistence.jpa.PersistenceUnitLoader.loadPU(PersistenceUnitLoader.java:199)
	at org.glassfish.persistence.jpa.PersistenceUnitLoader.<init>(PersistenceUnitLoader.java:107)
	at org.glassfish.persistence.jpa.JPADeployer$1.visitPUD(JPADeployer.java:223)
	at org.glassfish.persistence.jpa.JPADeployer$PersistenceUnitDescriptorIterator.iteratePUDs(JPADeployer.java:510)
	at org.glassfish.persistence.jpa.JPADeployer.createEMFs(JPADeployer.java:230)
	at org.glassfish.persistence.jpa.JPADeployer.prepare(JPADeployer.java:168)
	at com.sun.enterprise.v3.server.ApplicationLifecycle.prepareModule(ApplicationLifecycle.java:925)
	at com.sun.enterprise.v3.server.ApplicationLifecycle.deploy(ApplicationLifecycle.java:434)
	at com.sun.enterprise.v3.server.ApplicationLifecycle.deploy(ApplicationLifecycle.java:219)
	at org.glassfish.deployment.admin.DeployCommand.execute(DeployCommand.java:491)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$2$1.run(CommandRunnerImpl.java:539)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$2$1.run(CommandRunnerImpl.java:535)
	at java.security.AccessController.doPrivileged(Native Method)
	at javax.security.auth.Subject.doAs(Subject.java:360)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$2.execute(CommandRunnerImpl.java:534)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$3.run(CommandRunnerImpl.java:565)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$3.run(CommandRunnerImpl.java:557)
	at java.security.AccessController.doPrivileged(Native Method)
	at javax.security.auth.Subject.doAs(Subject.java:360)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl.doCommand(CommandRunnerImpl.java:556)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl.doCommand(CommandRunnerImpl.java:1464)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl.access$1300(CommandRunnerImpl.java:109)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$ExecutionContext.execute(CommandRunnerImpl.java:1846)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$ExecutionContext.execute(CommandRunnerImpl.java:1722)
	at org.glassfish.admin.rest.resources.admin.CommandResource.executeCommand(CommandResource.java:404)
	at org.glassfish.admin.rest.resources.admin.CommandResource.execCommandSimpInMultOut(CommandResource.java:234)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory$1.invoke(ResourceMethodInvocationHandlerFactory.java:81)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:144)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:161)
	at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:160)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:99)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:389)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:347)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:102)
	at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:309)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:315)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:297)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:267)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139)
	at org.glassfish.jersey.grizzly2.httpserver.GrizzlyHttpContainer.service(GrizzlyHttpContainer.java:375)
	at org.glassfish.admin.rest.adapter.JerseyContainerCommandService$3.service(JerseyContainerCommandService.java:173)
	at org.glassfish.admin.rest.adapter.RestAdapter.service(RestAdapter.java:179)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:283)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:200)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:132)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:111)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:536)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.sql.SQLSyntaxErrorException: Errore di sintassi: Encountered "VALUES" at line 1, column 108.
	at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(Unknown Source)
	at org.apache.derby.client.am.SqlException.getSQLException(Unknown Source)
	at org.apache.derby.client.am.Connection.prepareStatement(Unknown Source)
	at com.sun.gjc.spi.base.ConnectionHolder.prepareStatement(ConnectionHolder.java:586)
	at com.sun.gjc.spi.jdbc40.ConnectionWrapper40.prepareCachedStatement(ConnectionWrapper40.java:255)
	at com.sun.gjc.spi.jdbc40.ConnectionWrapper40.prepareCachedStatement(ConnectionWrapper40.java:52)
	at com.sun.gjc.spi.ManagedConnectionImpl.prepareCachedStatement(ManagedConnectionImpl.java:992)
	at com.sun.gjc.spi.jdbc40.ConnectionWrapper40.prepareStatement(ConnectionWrapper40.java:173)
	at org.eclipse.persistence.internal.databaseaccess.DatabaseAccessor.prepareStatement(DatabaseAccessor.java:1565)
	at org.eclipse.persistence.internal.databaseaccess.DatabaseAccessor.prepareStatement(DatabaseAccessor.java:1514)
	at org.eclipse.persistence.internal.databaseaccess.DatabaseCall.prepareStatement(DatabaseCall.java:778)
	at org.eclipse.persistence.internal.databaseaccess.DatabaseAccessor.basicExecuteCall(DatabaseAccessor.java:621)
	... 100 more
Caused by: org.apache.derby.client.am.SqlException: Errore di sintassi: Encountered "VALUES" at line 1, column 108.
	at org.apache.derby.client.am.Statement.completeSqlca(Unknown Source)
	at org.apache.derby.client.net.NetStatementReply.parsePrepareError(Unknown Source)
	at org.apache.derby.client.net.NetStatementReply.parsePRPSQLSTTreply(Unknown Source)
	at org.apache.derby.client.net.NetStatementReply.readPrepareDescribeOutput(Unknown Source)
	at org.apache.derby.client.net.StatementReply.readPrepareDescribeOutput(Unknown Source)
	at org.apache.derby.client.net.NetStatement.readPrepareDescribeOutput_(Unknown Source)
	at org.apache.derby.client.am.Statement.readPrepareDescribeOutput(Unknown Source)
	at org.apache.derby.client.am.PreparedStatement.readPrepareDescribeInputOutput(Unknown Source)
	at org.apache.derby.client.am.PreparedStatement.flowPrepareDescribeInputOutput(Unknown Source)
	at org.apache.derby.client.am.PreparedStatement.prepare(Unknown Source)
	at org.apache.derby.client.am.Connection.prepareStatementX(Unknown Source)
	... 110 more
]]

[2018-10-02T12:22:37.005+0200] [glassfish 4.1] [INFO] [AS-EJB-00054] [javax.enterprise.ejb.container] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475757005] [levelValue: 800] [[
  Portable JNDI names for EJB ConnectionModule: [java:global/ConnectionModule/ConnectionModule!com.mycompany.frogsssa.service.ConnectionModule, java:global/ConnectionModule/ConnectionModule]]]

[2018-10-02T12:22:37.028+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=44 _ThreadName=Thread-8] [timeMillis: 1538475757028] [levelValue: 800] [[
  ---PATH---/home/gabriele/Applications/glassfish4/glassfish/domains/domain1/applications/ConnectionModule/WEB-INF/classes/files/keys.json]]

[2018-10-02T12:22:37.465+0200] [glassfish 4.1] [INFO] [] [org.jboss.weld.Version] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475757465] [levelValue: 800] [[
  WELD-000900: 2.2.13 (Final)]]

[2018-10-02T12:22:37.532+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=97 _ThreadName=Thread-8] [timeMillis: 1538475757532] [levelValue: 800] [[
  DD: Registered, cookie: [B@6ec33a6]]

[2018-10-02T12:22:37.532+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=97 _ThreadName=Thread-8] [timeMillis: 1538475757532] [levelValue: 800] [[
  Test DD registered: tcp://127.0.0.1:5555]]

[2018-10-02T12:22:38.016+0200] [glassfish 4.1] [WARN] [] [org.jboss.weld.Interceptor] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475758016] [levelValue: 900] [[
  WELD-001700: Interceptor annotation class javax.ejb.PostActivate not found, interception based on it is not enabled]]

[2018-10-02T12:22:38.016+0200] [glassfish 4.1] [WARN] [] [org.jboss.weld.Interceptor] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475758016] [levelValue: 900] [[
  WELD-001700: Interceptor annotation class javax.ejb.PrePassivate not found, interception based on it is not enabled]]

[2018-10-02T12:22:38.193+0200] [glassfish 4.1] [WARN] [] [org.jboss.weld.Event] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475758193] [levelValue: 900] [[
  WELD-000411: Observer method [BackedAnnotatedMethod] private org.glassfish.jersey.ext.cdi1x.internal.CdiComponentProvider.processAnnotatedType(@Observes ProcessAnnotatedType<Object>) receives events for all annotated types. Consider restricting events using @WithAnnotations or a generic type with bounds.]]

[2018-10-02T12:22:38.197+0200] [glassfish 4.1] [WARN] [] [org.jboss.weld.Event] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475758197] [levelValue: 900] [[
  WELD-000411: Observer method [BackedAnnotatedMethod] org.glassfish.sse.impl.ServerSentEventCdiExtension.processAnnotatedType(@Observes ProcessAnnotatedType<Object>, BeanManager) receives events for all annotated types. Consider restricting events using @WithAnnotations or a generic type with bounds.]]

[2018-10-02T12:22:38.203+0200] [glassfish 4.1] [WARN] [] [org.jboss.weld.Event] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475758203] [levelValue: 900] [[
  WELD-000411: Observer method [BackedAnnotatedMethod] public org.glassfish.jms.injection.JMSCDIExtension.processAnnotatedType(@Observes ProcessAnnotatedType<Object>) receives events for all annotated types. Consider restricting events using @WithAnnotations or a generic type with bounds.]]

[2018-10-02T12:22:38.956+0200] [glassfish 4.1] [SEVERE] [] [] [tid: _ThreadID=44 _ThreadName=Thread-9] [timeMillis: 1538475758956] [levelValue: 1000] [[
  SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".]]

[2018-10-02T12:22:38.956+0200] [glassfish 4.1] [SEVERE] [] [] [tid: _ThreadID=44 _ThreadName=Thread-9] [timeMillis: 1538475758956] [levelValue: 1000] [[
  SLF4J: Defaulting to no-operation (NOP) logger implementation]]

[2018-10-02T12:22:38.956+0200] [glassfish 4.1] [SEVERE] [] [] [tid: _ThreadID=44 _ThreadName=Thread-9] [timeMillis: 1538475758956] [levelValue: 1000] [[
  SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.]]

[2018-10-02T12:22:39.099+0200] [glassfish 4.1] [INFO] [AS-WEB-GLUE-00172] [javax.enterprise.web] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475759099] [levelValue: 800] [[
  Loading application [ConnectionModule] at [/ConnectionModule-1.0-SNAPSHOT]]]

[2018-10-02T12:22:39.187+0200] [glassfish 4.1] [INFO] [] [javax.enterprise.system.core] [tid: _ThreadID=44 _ThreadName=admin-listener(3)] [timeMillis: 1538475759187] [levelValue: 800] [[
  ConnectionModule was successfully deployed in 5.761 milliseconds.]]

[2018-10-02T12:22:44.481+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538475764481] [levelValue: 800] [[
  Setted DM for sssaLara module orchestrator{	namespace "urn:sssa:orchestrator";	prefix "orchestrator";	extension advertise{		argument advertise{			yin-element false;		}	}	extension period{		argument period{			yin-element false;		}	}	extension minthreshold{		argument minthreshold{			yin-element false;		}	}	extension maxthreshold{		argument maxthreshold{			yin-element false;		}	}	list switches{		key id;		leaf id{			type string;			orchestrator:advertise onchange;		}		leaf ip{			type string;			orchestrator:advertise onchange;		}		leaf mac{			type string;			orchestrator:advertise onchange;		}	}	list load{		key id;		leaf id{			type string;		}		leaf tp{			type int32;			orchestrator:advertise onthreshold;			orchestrator:minthreshold 500;		}	}	container a {		leaf l1 {			type int32;			orchestrator:advertise onchange;		}		leaf l2 {			type string;			orchestrator:advertise onchange;		}		container b {			leaf l1 {				type int32;				orchestrator:advertise onchange;			}			leaf l2 {				type string;				orchestrator:advertise onchange;			}			container c {				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				leaf l3 {					type string;					orchestrator:advertise onchange;				}			}			list l {				key l1;				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }				container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;]]

[2018-10-02T12:22:44.481+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538475764481] [levelValue: 800] [[
  orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }			}		}		container c {			leaf l1 {				type int32;				orchestrator:advertise onchange;			}			leaf l2 {				type string;				orchestrator:advertise onchange;			}			leaf l3 {				type string;				orchestrator:advertise onchange;			}			container a {				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				container b {					leaf l1 {						type int32;						orchestrator:advertise onchange;					}					leaf l2 {						type string;						orchestrator:advertise onchange;					}					container c {						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						leaf l3 {							type string;							orchestrator:advertise onchange;						}						container a {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}					}					list l {						key l1;						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						container b {							leaf l1 {								type int32;								orchestrator:advertise onchange;							}							leaf l2 {								type string;								orchestrator:advertise onchange;							}							list l {								key l1;								leaf l1 {									type int32;									orchestrator:advertise onchange;								}								leaf l2 {									type string;									orchestrator:advertise onchange;								}								container c {									leaf l1 {										type int32;										orchestrator:advertise onchange;									}									leaf l2 {										type string;										orchestrator:advertise onchange;									}									leaf l3 {										type string;										orchestrator:advertise onchange;									}								}							}						}						container c {							leaf l1 {								type int32;								orchestrator:advertise onchange;							}							leaf l2 {								type string;								orchestrator:advertise onchange;							}							leaf l3 {								type string;								orchestrator:advertise onchange;							}							container a {								leaf l1 {									type int32;									orchestrator:advertise onchange;								}								leaf l2 {									type string;									orchestrator:advertise onchange;								}							}						}					}				}				container c {					leaf l1 {						type int32;						orchestrator:advertise onchange;					}					leaf l2 {						type string;						orchestrator:advertise onchange;					}					leaf l3 {						type string;						orchestrator:advertise onchange;					}					container a {						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						container b {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    ty]]

[2018-10-02T12:22:44.481+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538475764481] [levelValue: 800] [[
  pe string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}						container c {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}					}				}			}			container c {			    leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }			    container a {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container b {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        list l {                            key l1;                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1]]

[2018-10-02T12:22:44.482+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538475764482] [levelValue: 800] [[
  {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }			}		}	}	container a2 {        leaf l1 {            type int32;            orchestrator:advertise onchange;        }        leaf l2 {            type string;            orchestrator:advertise onchange;        }        container b {            leaf l1 {                type int32;                orchestrator:advertise onchange;            }            leaf l2 {                type string;                orchestrator:advertise onchange;            }            container c {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }            }            list l {                key l1;                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2]]

[2018-10-02T12:22:44.482+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538475764482] [levelValue: 800] [[
  {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }            }        }        container c {            leaf l1 {                type int32;                orchestrator:advertise onchange;            }            leaf l2 {                type string;                orchestrator:advertise onchange;            }            leaf l3 {                type string;                orchestrator:advertise onchange;            }            container a {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container c {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }]]

[2018-10-02T12:22:44.482+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538475764482] [levelValue: 800] [[
  leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    leaf l3 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }            }            container c {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }                container a {                    leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container a {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type]]

[2018-10-02T12:22:44.482+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538475764482] [levelValue: 800] [[
  string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container b {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    list l {                                        key l1;                                        leaf l1 {                                            type int32;                                            orchestrator:advertise onchange;                                        }                                        leaf l2 {                                            type string;                                            orchestrator:advertise onchange;                                        }                                    }                                }                            }                        }                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                                container c {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    leaf l3 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container a {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                    }    			}    		}    	}}]]

[2018-10-02T12:22:48.205+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538475768205] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T12:23:56.574+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538475836574] [levelValue: 800] [[
  {"res":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}],"time":68226.074335}]]

[2018-10-02T12:24:18.022+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538475858022] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b']]

[2018-10-02T12:24:18.044+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538475858044] [levelValue: 800] [[
  {"res":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"time":11.724082}]]

[2018-10-02T12:24:30.037+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538475870037] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a']]

[2018-10-02T12:24:30.062+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538475870062] [levelValue: 800] [[
  {"res":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"time":12.206496}]]

[2018-10-02T12:24:34.763+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538475874763] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a']]

[2018-10-02T12:24:34.785+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538475874785] [levelValue: 800] [[
  {"res":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"time":11.781308}]]

[2018-10-02T12:24:35.721+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538475875721] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a']]

[2018-10-02T12:24:35.737+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538475875737] [levelValue: 800] [[
  {"res":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"time":6.901267}]]

[2018-10-02T12:24:36.536+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538475876536] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a']]

[2018-10-02T12:24:36.553+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538475876553] [levelValue: 800] [[
  {"res":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"time":5.936735}]]

[2018-10-02T12:24:37.207+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538475877207] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a']]

[2018-10-02T12:24:37.222+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538475877222] [levelValue: 800] [[
  {"res":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"time":6.928842}]]

[2018-10-02T12:24:37.907+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538475877907] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a']]

[2018-10-02T12:24:37.918+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538475877918] [levelValue: 800] [[
  {"res":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"time":3.397559}]]

[2018-10-02T12:24:38.560+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538475878560] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a']]

[2018-10-02T12:24:38.571+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538475878571] [levelValue: 800] [[
  {"res":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"time":3.217164}]]

[2018-10-02T12:24:38.790+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538475878790] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a']]

[2018-10-02T12:24:38.800+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538475878800] [levelValue: 800] [[
  {"res":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"time":2.771923}]]

[2018-10-02T12:24:39.087+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538475879087] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a']]

[2018-10-02T12:24:39.098+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538475879098] [levelValue: 800] [[
  {"res":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"time":3.734414}]]

[2018-10-02T12:24:39.548+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538475879548] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a']]

[2018-10-02T12:24:39.559+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538475879559] [levelValue: 800] [[
  {"res":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"time":2.819015}]]

[2018-10-02T12:24:40.161+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538475880161] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a']]

[2018-10-02T12:24:40.173+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538475880173] [levelValue: 800] [[
  {"res":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"time":4.315787}]]

[2018-10-02T12:24:40.771+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538475880771] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a']]

[2018-10-02T12:24:40.780+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538475880780] [levelValue: 800] [[
  {"res":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"time":2.359232}]]

[2018-10-02T12:24:41.359+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538475881359] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a']]

[2018-10-02T12:24:41.369+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538475881369] [levelValue: 800] [[
  {"res":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"time":2.368551}]]

[2018-10-02T12:24:43.509+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538475883509] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c']]

[2018-10-02T12:24:43.524+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538475883524] [levelValue: 800] [[
  {"res":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"96","l2":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"time":4.114321}]]

[2018-10-02T12:24:48.486+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538475888486] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a']]

[2018-10-02T12:24:48.521+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538475888521] [levelValue: 800] [[
  {"res":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"c":{"a":{},"l1":77,"l2":"list1"},"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]}},{"c":{"a":{},"l1":11,"l2":"liss"},"b":{"c":{},"l":[]}},{"c":{"a":{},"l1":1,"l2":"Str3"},"b":{"c":{},"l":[]}}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"c":{"a":{},"l1":77,"l2":"list1"},"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]}},{"c":{"a":{},"l1":11,"l2":"liss"},"b":{"c":{},"l":[]}},{"c":{"a":{},"l1":1,"l2":"Str3"},"b":{"c":{},"l":[]}}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"96","l2":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"time":27.334668}]]

[2018-10-02T12:24:52.370+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538475892370] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a']]

[2018-10-02T12:24:52.399+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538475892399] [levelValue: 800] [[
  {"res":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"c":{"a":{},"l1":77,"l2":"list1"},"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]}},{"c":{"a":{},"l1":11,"l2":"liss"},"b":{"c":{},"l":[]}},{"c":{"a":{},"l1":1,"l2":"Str3"},"b":{"c":{},"l":[]}}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"c":{"a":{},"l1":77,"l2":"list1"},"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]}},{"c":{"a":{},"l1":11,"l2":"liss"},"b":{"c":{},"l":[]}},{"c":{"a":{},"l1":1,"l2":"Str3"},"b":{"c":{},"l":[]}}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"96","l2":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"time":21.492813}]]

[2018-10-02T12:24:53.198+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538475893198] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a']]

[2018-10-02T12:24:53.219+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538475893219] [levelValue: 800] [[
  {"res":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"c":{"a":{},"l1":77,"l2":"list1"},"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]}},{"c":{"a":{},"l1":11,"l2":"liss"},"b":{"c":{},"l":[]}},{"c":{"a":{},"l1":1,"l2":"Str3"},"b":{"c":{},"l":[]}}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"c":{"a":{},"l1":77,"l2":"list1"},"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]}},{"c":{"a":{},"l1":11,"l2":"liss"},"b":{"c":{},"l":[]}},{"c":{"a":{},"l1":1,"l2":"Str3"},"b":{"c":{},"l":[]}}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"96","l2":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"time":13.05806}]]

[2018-10-02T12:24:53.967+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538475893967] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a']]

[2018-10-02T12:24:53.989+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538475893989] [levelValue: 800] [[
  {"res":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"c":{"a":{},"l1":77,"l2":"list1"},"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]}},{"c":{"a":{},"l1":11,"l2":"liss"},"b":{"c":{},"l":[]}},{"c":{"a":{},"l1":1,"l2":"Str3"},"b":{"c":{},"l":[]}}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"c":{"a":{},"l1":77,"l2":"list1"},"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]}},{"c":{"a":{},"l1":11,"l2":"liss"},"b":{"c":{},"l":[]}},{"c":{"a":{},"l1":1,"l2":"Str3"},"b":{"c":{},"l":[]}}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"96","l2":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"time":14.873689}]]

[2018-10-02T12:24:54.770+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538475894770] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a']]

[2018-10-02T12:24:54.793+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538475894793] [levelValue: 800] [[
  {"res":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"c":{"a":{},"l1":77,"l2":"list1"},"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]}},{"c":{"a":{},"l1":11,"l2":"liss"},"b":{"c":{},"l":[]}},{"c":{"a":{},"l1":1,"l2":"Str3"},"b":{"c":{},"l":[]}}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"c":{"a":{},"l1":77,"l2":"list1"},"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]}},{"c":{"a":{},"l1":11,"l2":"liss"},"b":{"c":{},"l":[]}},{"c":{"a":{},"l1":1,"l2":"Str3"},"b":{"c":{},"l":[]}}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"96","l2":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"time":15.982889}]]

[2018-10-02T12:24:55.535+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538475895535] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a']]

[2018-10-02T12:24:55.553+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538475895553] [levelValue: 800] [[
  {"res":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"c":{"a":{},"l1":77,"l2":"list1"},"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]}},{"c":{"a":{},"l1":11,"l2":"liss"},"b":{"c":{},"l":[]}},{"c":{"a":{},"l1":1,"l2":"Str3"},"b":{"c":{},"l":[]}}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"c":{"a":{},"l1":77,"l2":"list1"},"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]}},{"c":{"a":{},"l1":11,"l2":"liss"},"b":{"c":{},"l":[]}},{"c":{"a":{},"l1":1,"l2":"Str3"},"b":{"c":{},"l":[]}}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"96","l2":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"time":10.816713}]]

[2018-10-02T12:24:56.211+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538475896211] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a']]

[2018-10-02T12:24:56.231+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538475896231] [levelValue: 800] [[
  {"res":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"c":{"a":{},"l1":77,"l2":"list1"},"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]}},{"c":{"a":{},"l1":11,"l2":"liss"},"b":{"c":{},"l":[]}},{"c":{"a":{},"l1":1,"l2":"Str3"},"b":{"c":{},"l":[]}}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"c":{"a":{},"l1":77,"l2":"list1"},"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]}},{"c":{"a":{},"l1":11,"l2":"liss"},"b":{"c":{},"l":[]}},{"c":{"a":{},"l1":1,"l2":"Str3"},"b":{"c":{},"l":[]}}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"96","l2":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"time":13.320656}]]

[2018-10-02T12:24:56.911+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538475896911] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a']]

[2018-10-02T12:24:56.929+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538475896929] [levelValue: 800] [[
  {"res":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"c":{"a":{},"l1":77,"l2":"list1"},"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]}},{"c":{"a":{},"l1":11,"l2":"liss"},"b":{"c":{},"l":[]}},{"c":{"a":{},"l1":1,"l2":"Str3"},"b":{"c":{},"l":[]}}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"c":{"a":{},"l1":77,"l2":"list1"},"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]}},{"c":{"a":{},"l1":11,"l2":"liss"},"b":{"c":{},"l":[]}},{"c":{"a":{},"l1":1,"l2":"Str3"},"b":{"c":{},"l":[]}}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"96","l2":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"time":12.117516}]]

[2018-10-02T12:24:57.722+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538475897722] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a']]

[2018-10-02T12:24:57.751+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538475897751] [levelValue: 800] [[
  {"res":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"c":{"a":{},"l1":77,"l2":"list1"},"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]}},{"c":{"a":{},"l1":11,"l2":"liss"},"b":{"c":{},"l":[]}},{"c":{"a":{},"l1":1,"l2":"Str3"},"b":{"c":{},"l":[]}}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"c":{"a":{},"l1":77,"l2":"list1"},"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]}},{"c":{"a":{},"l1":11,"l2":"liss"},"b":{"c":{},"l":[]}},{"c":{"a":{},"l1":1,"l2":"Str3"},"b":{"c":{},"l":[]}}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"96","l2":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"time":21.270938}]]

[2018-10-02T12:25:00.153+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538475900153] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator']]

[2018-10-02T12:25:46.883+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538475946883] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T12:25:46.891+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538475946891] [levelValue: 800] [[
  {"res":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}],"time":1.587964}]]

[2018-10-02T12:25:56.838+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538475956838] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b']]

[2018-10-02T12:25:56.847+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538475956847] [levelValue: 800] [[
  {"res":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"time":1.845161}]]

[2018-10-02T12:26:03.714+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538475963714] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a']]

[2018-10-02T12:26:03.725+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538475963725] [levelValue: 800] [[
  {"res":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"time":2.646415}]]

[2018-10-02T12:26:08.983+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538475968983] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c']]

[2018-10-02T12:26:08.996+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538475968996] [levelValue: 800] [[
  {"res":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"96","l2":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"time":5.482404}]]

[2018-10-02T12:26:22.582+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538475982582] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a']]

[2018-10-02T12:26:22.614+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538475982614] [levelValue: 800] [[
  {"res":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"c":{"a":{},"l1":77,"l2":"list1"},"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]}},{"c":{"a":{},"l1":11,"l2":"liss"},"b":{"c":{},"l":[]}},{"c":{"a":{},"l1":1,"l2":"Str3"},"b":{"c":{},"l":[]}}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"c":{"a":{},"l1":77,"l2":"list1"},"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]}},{"c":{"a":{},"l1":11,"l2":"liss"},"b":{"c":{},"l":[]}},{"c":{"a":{},"l1":1,"l2":"Str3"},"b":{"c":{},"l":[]}}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"96","l2":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"time":23.965082}]]

[2018-10-02T12:28:08.772+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538476088772] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a']]

[2018-10-02T12:38:23.041+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538476703041] [levelValue: 800] [[
  Setted DM for sssaLara module orchestrator{	namespace "urn:sssa:orchestrator";	prefix "orchestrator";	extension advertise{		argument advertise{			yin-element false;		}	}	extension period{		argument period{			yin-element false;		}	}	extension minthreshold{		argument minthreshold{			yin-element false;		}	}	extension maxthreshold{		argument maxthreshold{			yin-element false;		}	}	list switches{		key id;		leaf id{			type string;			orchestrator:advertise onchange;		}		leaf ip{			type string;			orchestrator:advertise onchange;		}		leaf mac{			type string;			orchestrator:advertise onchange;		}	}	list load{		key id;		leaf id{			type string;		}		leaf tp{			type int32;			orchestrator:advertise onthreshold;			orchestrator:minthreshold 500;		}	}	container a {		leaf l1 {			type int32;			orchestrator:advertise onchange;		}		leaf l2 {			type string;			orchestrator:advertise onchange;		}		container b {			leaf l1 {				type int32;				orchestrator:advertise onchange;			}			leaf l2 {				type string;				orchestrator:advertise onchange;			}			container c {				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				leaf l3 {					type string;					orchestrator:advertise onchange;				}			}			list l {				key l1;				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }				container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;]]

[2018-10-02T12:38:23.041+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538476703041] [levelValue: 800] [[
  orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }			}		}		container c {			leaf l1 {				type int32;				orchestrator:advertise onchange;			}			leaf l2 {				type string;				orchestrator:advertise onchange;			}			leaf l3 {				type string;				orchestrator:advertise onchange;			}			container a {				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				container b {					leaf l1 {						type int32;						orchestrator:advertise onchange;					}					leaf l2 {						type string;						orchestrator:advertise onchange;					}					container c {						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						leaf l3 {							type string;							orchestrator:advertise onchange;						}						container a {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}					}					list l {						key l1;						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						container b {							leaf l1 {								type int32;								orchestrator:advertise onchange;							}							leaf l2 {								type string;								orchestrator:advertise onchange;							}							list l {								key l1;								leaf l1 {									type int32;									orchestrator:advertise onchange;								}								leaf l2 {									type string;									orchestrator:advertise onchange;								}								container c {									leaf l1 {										type int32;										orchestrator:advertise onchange;									}									leaf l2 {										type string;										orchestrator:advertise onchange;									}									leaf l3 {										type string;										orchestrator:advertise onchange;									}								}							}						}						container c {							leaf l1 {								type int32;								orchestrator:advertise onchange;							}							leaf l2 {								type string;								orchestrator:advertise onchange;							}							leaf l3 {								type string;								orchestrator:advertise onchange;							}							container a {								leaf l1 {									type int32;									orchestrator:advertise onchange;								}								leaf l2 {									type string;									orchestrator:advertise onchange;								}							}						}					}				}				container c {					leaf l1 {						type int32;						orchestrator:advertise onchange;					}					leaf l2 {						type string;						orchestrator:advertise onchange;					}					leaf l3 {						type string;						orchestrator:advertise onchange;					}					container a {						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						container b {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    ty]]

[2018-10-02T12:38:23.041+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538476703041] [levelValue: 800] [[
  pe string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}						container c {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}					}				}			}			container c {			    leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }			    container a {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container b {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        list l {                            key l1;                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1]]

[2018-10-02T12:38:23.042+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538476703042] [levelValue: 800] [[
  {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }			}		}	}	container a2 {        leaf l1 {            type int32;            orchestrator:advertise onchange;        }        leaf l2 {            type string;            orchestrator:advertise onchange;        }        container b {            leaf l1 {                type int32;                orchestrator:advertise onchange;            }            leaf l2 {                type string;                orchestrator:advertise onchange;            }            container c {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }            }            list l {                key l1;                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2]]

[2018-10-02T12:38:23.042+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538476703042] [levelValue: 800] [[
  {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }            }        }        container c {            leaf l1 {                type int32;                orchestrator:advertise onchange;            }            leaf l2 {                type string;                orchestrator:advertise onchange;            }            leaf l3 {                type string;                orchestrator:advertise onchange;            }            container a {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container c {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }]]

[2018-10-02T12:38:23.042+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538476703042] [levelValue: 800] [[
  leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    leaf l3 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }            }            container c {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }                container a {                    leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container a {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type]]

[2018-10-02T12:38:23.042+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538476703042] [levelValue: 800] [[
  string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container b {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    list l {                                        key l1;                                        leaf l1 {                                            type int32;                                            orchestrator:advertise onchange;                                        }                                        leaf l2 {                                            type string;                                            orchestrator:advertise onchange;                                        }                                    }                                }                            }                        }                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                                container c {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    leaf l3 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container a {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                    }    			}    		}    	}}]]

[2018-10-02T12:38:31.730+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538476711730] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a']]

[2018-10-02T12:38:35.518+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538476715518] [levelValue: 800] [[
  {"res":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":77,"l2":"list1"}},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":11,"l2":"liss"}},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":1,"l2":"Str3"}}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":77,"l2":"list1"}},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":11,"l2":"liss"}},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":1,"l2":"Str3"}}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"96","l2":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"time":3750.688747}]]

[2018-10-02T12:39:11.024+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538476751024] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a']]

[2018-10-02T12:40:00.796+0200] [glassfish 4.1] [SEVERE] [] [com.mycompany.frogsssa.service.ConnectionModule] [tid: _ThreadID=28 _ThreadName=http-listener-1(1)] [timeMillis: 1538476800796] [levelValue: 1000] [[
  
java.lang.InterruptedException
	at java.lang.Object.wait(Native Method)
	at java.lang.Object.wait(Object.java:502)
	at com.mycompany.frogsssa.service.ConnectionModule.getValue(ConnectionModule.java:127)
	at com.mycompany.frogsssa.service.serviceLayerService.getResources(serviceLayerService.java:102)
	at sun.reflect.GeneratedMethodAccessor49.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory$1.invoke(ResourceMethodInvocationHandlerFactory.java:81)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:144)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:161)
	at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:160)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:99)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:389)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:347)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:102)
	at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:309)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:315)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:297)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:267)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139)
	at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:460)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:386)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:334)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:221)
	at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1682)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:318)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:160)
	at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:734)
	at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:673)
	at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:99)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:174)
	at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:416)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:283)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:283)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:200)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:132)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:111)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:536)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571)
	at java.lang.Thread.run(Thread.java:748)
]]

[2018-10-02T12:40:00.799+0200] [glassfish 4.1] [WARNING] [] [javax.enterprise.web] [tid: _ThreadID=28 _ThreadName=http-listener-1(1)] [timeMillis: 1538476800799] [levelValue: 900] [[
  StandardWrapperValve[com.mycompany.frogsssa.service.ApplicationConfig]: Servlet.service() for servlet com.mycompany.frogsssa.service.ApplicationConfig threw exception
java.lang.NullPointerException
	at com.sun.common.util.logging.LoggingOutputStream$LoggingPrintStream.println(LoggingOutputStream.java:228)
	at org.apache.felix.gogo.runtime.threadio.ThreadPrintStream.println(ThreadPrintStream.java:205)
	at com.mycompany.frogsssa.service.serviceLayerService.getResources(serviceLayerService.java:103)
	at sun.reflect.GeneratedMethodAccessor49.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory$1.invoke(ResourceMethodInvocationHandlerFactory.java:81)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:144)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:161)
	at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:160)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:99)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:389)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:347)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:102)
	at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:309)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:315)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:297)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:267)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139)
	at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:460)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:386)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:334)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:221)
	at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1682)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:318)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:160)
	at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:734)
	at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:673)
	at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:99)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:174)
	at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:416)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:283)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:283)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:200)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:132)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:111)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:536)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571)
	at java.lang.Thread.run(Thread.java:748)
]]

[2018-10-02T12:42:00.021+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538476920021] [levelValue: 800] [[
  {"res":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":77,"l2":"list1"}},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":11,"l2":"liss"}},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":1,"l2":"Str3"}}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":77,"l2":"list1"}},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":11,"l2":"liss"}},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":1,"l2":"Str3"}}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"96","l2":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"time":168990.013589}]]

[2018-10-02T12:43:00.476+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538476980476] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a']]

[2018-10-02T12:43:08.817+0200] [glassfish 4.1] [SEVERE] [] [com.mycompany.frogsssa.service.ConnectionModule] [tid: _ThreadID=31 _ThreadName=http-listener-1(4)] [timeMillis: 1538476988817] [levelValue: 1000] [[
  
java.lang.InterruptedException
	at java.lang.Object.wait(Native Method)
	at java.lang.Object.wait(Object.java:502)
	at com.mycompany.frogsssa.service.ConnectionModule.getValue(ConnectionModule.java:127)
	at com.mycompany.frogsssa.service.serviceLayerService.getResources(serviceLayerService.java:102)
	at sun.reflect.GeneratedMethodAccessor49.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory$1.invoke(ResourceMethodInvocationHandlerFactory.java:81)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:144)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:161)
	at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:160)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:99)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:389)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:347)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:102)
	at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:309)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:315)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:297)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:267)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139)
	at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:460)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:386)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:334)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:221)
	at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1682)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:318)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:160)
	at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:734)
	at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:673)
	at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:99)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:174)
	at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:416)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:283)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:283)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:200)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:132)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:111)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:536)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571)
	at java.lang.Thread.run(Thread.java:748)
]]

[2018-10-02T12:43:08.818+0200] [glassfish 4.1] [WARNING] [] [javax.enterprise.web] [tid: _ThreadID=31 _ThreadName=http-listener-1(4)] [timeMillis: 1538476988818] [levelValue: 900] [[
  StandardWrapperValve[com.mycompany.frogsssa.service.ApplicationConfig]: Servlet.service() for servlet com.mycompany.frogsssa.service.ApplicationConfig threw exception
java.lang.NullPointerException
	at com.sun.common.util.logging.LoggingOutputStream$LoggingPrintStream.println(LoggingOutputStream.java:228)
	at org.apache.felix.gogo.runtime.threadio.ThreadPrintStream.println(ThreadPrintStream.java:205)
	at com.mycompany.frogsssa.service.serviceLayerService.getResources(serviceLayerService.java:103)
	at sun.reflect.GeneratedMethodAccessor49.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory$1.invoke(ResourceMethodInvocationHandlerFactory.java:81)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:144)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:161)
	at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:160)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:99)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:389)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:347)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:102)
	at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:309)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:315)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:297)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:267)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139)
	at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:460)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:386)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:334)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:221)
	at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1682)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:318)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:160)
	at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:734)
	at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:673)
	at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:99)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:174)
	at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:416)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:283)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:283)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:200)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:132)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:111)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:536)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571)
	at java.lang.Thread.run(Thread.java:748)
]]

[2018-10-02T12:45:39.897+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538477139897] [levelValue: 800] [[
  {"res":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":77,"l2":"list1"}},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":11,"l2":"liss"}},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":1,"l2":"Str3"}}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":77,"l2":"list1"}},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":11,"l2":"liss"}},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":1,"l2":"Str3"}}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"96","l2":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"time":159409.489605}]]

[2018-10-02T12:45:46.379+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538477146379] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a']]

[2018-10-02T12:46:34.622+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538477194622] [levelValue: 800] [[
  {"res":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":77,"l2":"list1"}},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":11,"l2":"liss"}},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":1,"l2":"Str3"}}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":77,"l2":"list1"}},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":11,"l2":"liss"}},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":1,"l2":"Str3"}}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"96","l2":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"time":48232.765478}]]

[2018-10-02T12:47:07.805+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538477227805] [levelValue: 800] [[
  Setted DM for sssaLara module orchestrator{	namespace "urn:sssa:orchestrator";	prefix "orchestrator";	extension advertise{		argument advertise{			yin-element false;		}	}	extension period{		argument period{			yin-element false;		}	}	extension minthreshold{		argument minthreshold{			yin-element false;		}	}	extension maxthreshold{		argument maxthreshold{			yin-element false;		}	}	list switches{		key id;		leaf id{			type string;			orchestrator:advertise onchange;		}		leaf ip{			type string;			orchestrator:advertise onchange;		}		leaf mac{			type string;			orchestrator:advertise onchange;		}	}	list load{		key id;		leaf id{			type string;		}		leaf tp{			type int32;			orchestrator:advertise onthreshold;			orchestrator:minthreshold 500;		}	}	container a {		leaf l1 {			type int32;			orchestrator:advertise onchange;		}		leaf l2 {			type string;			orchestrator:advertise onchange;		}		container b {			leaf l1 {				type int32;				orchestrator:advertise onchange;			}			leaf l2 {				type string;				orchestrator:advertise onchange;			}			container c {				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				leaf l3 {					type string;					orchestrator:advertise onchange;				}			}			list l {				key l1;				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }				container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;]]

[2018-10-02T12:47:07.805+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538477227805] [levelValue: 800] [[
  orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }			}		}		container c {			leaf l1 {				type int32;				orchestrator:advertise onchange;			}			leaf l2 {				type string;				orchestrator:advertise onchange;			}			leaf l3 {				type string;				orchestrator:advertise onchange;			}			container a {				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				container b {					leaf l1 {						type int32;						orchestrator:advertise onchange;					}					leaf l2 {						type string;						orchestrator:advertise onchange;					}					container c {						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						leaf l3 {							type string;							orchestrator:advertise onchange;						}						container a {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}					}					list l {						key l1;						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						container b {							leaf l1 {								type int32;								orchestrator:advertise onchange;							}							leaf l2 {								type string;								orchestrator:advertise onchange;							}							list l {								key l1;								leaf l1 {									type int32;									orchestrator:advertise onchange;								}								leaf l2 {									type string;									orchestrator:advertise onchange;								}								container c {									leaf l1 {										type int32;										orchestrator:advertise onchange;									}									leaf l2 {										type string;										orchestrator:advertise onchange;									}									leaf l3 {										type string;										orchestrator:advertise onchange;									}								}							}						}						container c {							leaf l1 {								type int32;								orchestrator:advertise onchange;							}							leaf l2 {								type string;								orchestrator:advertise onchange;							}							leaf l3 {								type string;								orchestrator:advertise onchange;							}							container a {								leaf l1 {									type int32;									orchestrator:advertise onchange;								}								leaf l2 {									type string;									orchestrator:advertise onchange;								}							}						}					}				}				container c {					leaf l1 {						type int32;						orchestrator:advertise onchange;					}					leaf l2 {						type string;						orchestrator:advertise onchange;					}					leaf l3 {						type string;						orchestrator:advertise onchange;					}					container a {						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						container b {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    ty]]

[2018-10-02T12:47:07.805+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538477227805] [levelValue: 800] [[
  pe string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}						container c {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}					}				}			}			container c {			    leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }			    container a {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container b {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        list l {                            key l1;                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1]]

[2018-10-02T12:47:07.805+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538477227805] [levelValue: 800] [[
  {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }			}		}	}	container a2 {        leaf l1 {            type int32;            orchestrator:advertise onchange;        }        leaf l2 {            type string;            orchestrator:advertise onchange;        }        container b {            leaf l1 {                type int32;                orchestrator:advertise onchange;            }            leaf l2 {                type string;                orchestrator:advertise onchange;            }            container c {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }            }            list l {                key l1;                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2]]

[2018-10-02T12:47:07.805+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538477227805] [levelValue: 800] [[
  {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }            }        }        container c {            leaf l1 {                type int32;                orchestrator:advertise onchange;            }            leaf l2 {                type string;                orchestrator:advertise onchange;            }            leaf l3 {                type string;                orchestrator:advertise onchange;            }            container a {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container c {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }]]

[2018-10-02T12:47:07.805+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538477227805] [levelValue: 800] [[
  leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    leaf l3 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }            }            container c {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }                container a {                    leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container a {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type]]

[2018-10-02T12:47:07.805+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538477227805] [levelValue: 800] [[
  string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container b {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    list l {                                        key l1;                                        leaf l1 {                                            type int32;                                            orchestrator:advertise onchange;                                        }                                        leaf l2 {                                            type string;                                            orchestrator:advertise onchange;                                        }                                    }                                }                            }                        }                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                                container c {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    leaf l3 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container a {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                    }    			}    		}    	}}]]

[2018-10-02T12:47:12.333+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538477232333] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a']]

[2018-10-02T12:47:12.431+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538477232431] [levelValue: 800] [[
  {"res":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"96","l2":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"time":69.709783}]]

[2018-10-02T12:47:21.605+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538477241605] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a']]

[2018-10-02T12:47:21.639+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538477241639] [levelValue: 800] [[
  {"res":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"96","l2":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"time":25.221289}]]

[2018-10-02T12:47:22.538+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538477242538] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a']]

[2018-10-02T12:47:22.566+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538477242566] [levelValue: 800] [[
  {"res":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"96","l2":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"time":18.224569}]]

[2018-10-02T12:47:23.342+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538477243342] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a']]

[2018-10-02T12:47:23.361+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538477243361] [levelValue: 800] [[
  {"res":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"96","l2":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"time":11.655237}]]

[2018-10-02T12:47:24.087+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538477244087] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a']]

[2018-10-02T12:47:24.108+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538477244108] [levelValue: 800] [[
  {"res":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"96","l2":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"time":13.886575}]]

[2018-10-02T12:47:24.806+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538477244806] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a']]

[2018-10-02T12:47:24.824+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538477244824] [levelValue: 800] [[
  {"res":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"96","l2":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"time":9.704189}]]

[2018-10-02T12:47:25.055+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538477245055] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a']]

[2018-10-02T12:47:25.071+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538477245071] [levelValue: 800] [[
  {"res":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"96","l2":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"time":8.585563}]]

[2018-10-02T12:47:25.314+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538477245314] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a']]

[2018-10-02T12:47:25.328+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538477245328] [levelValue: 800] [[
  {"res":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"96","l2":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"time":7.732869}]]

[2018-10-02T12:47:25.557+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538477245557] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a']]

[2018-10-02T12:47:25.574+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538477245574] [levelValue: 800] [[
  {"res":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"96","l2":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"time":8.771776}]]

[2018-10-02T12:47:25.864+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538477245864] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a']]

[2018-10-02T12:47:25.883+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538477245883] [levelValue: 800] [[
  {"res":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"96","l2":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"time":10.995099}]]

[2018-10-02T12:47:26.239+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538477246239] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a']]

[2018-10-02T12:47:26.256+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538477246256] [levelValue: 800] [[
  {"res":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"96","l2":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"time":10.178663}]]

[2018-10-02T12:47:26.368+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538477246368] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a']]

[2018-10-02T12:47:26.385+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538477246385] [levelValue: 800] [[
  {"res":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"96","l2":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"time":9.565762}]]

[2018-10-02T12:47:26.602+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538477246602] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a']]

[2018-10-02T12:47:26.616+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538477246616] [levelValue: 800] [[
  {"res":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"96","l2":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"time":8.365091}]]

[2018-10-02T12:47:27.294+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538477247294] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a']]

[2018-10-02T12:47:27.307+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538477247307] [levelValue: 800] [[
  {"res":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"96","l2":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"time":6.583177}]]

[2018-10-02T12:47:34.117+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538477254117] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator']]

[2018-10-02T12:49:17.196+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538477357196] [levelValue: 800] [[
  Setted DM for sssaLara module orchestrator{	namespace "urn:sssa:orchestrator";	prefix "orchestrator";	extension advertise{		argument advertise{			yin-element false;		}	}	extension period{		argument period{			yin-element false;		}	}	extension minthreshold{		argument minthreshold{			yin-element false;		}	}	extension maxthreshold{		argument maxthreshold{			yin-element false;		}	}	list switches{		key id;		leaf id{			type string;			orchestrator:advertise onchange;		}		leaf ip{			type string;			orchestrator:advertise onchange;		}		leaf mac{			type string;			orchestrator:advertise onchange;		}	}	list load{		key id;		leaf id{			type string;		}		leaf tp{			type int32;			orchestrator:advertise onthreshold;			orchestrator:minthreshold 500;		}	}	container a {		leaf l1 {			type int32;			orchestrator:advertise onchange;		}		leaf l2 {			type string;			orchestrator:advertise onchange;		}		container b {			leaf l1 {				type int32;				orchestrator:advertise onchange;			}			leaf l2 {				type string;				orchestrator:advertise onchange;			}			container c {				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				leaf l3 {					type string;					orchestrator:advertise onchange;				}			}			list l {				key l1;				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }				container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;]]

[2018-10-02T12:49:17.196+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538477357196] [levelValue: 800] [[
  orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }			}		}		container c {			leaf l1 {				type int32;				orchestrator:advertise onchange;			}			leaf l2 {				type string;				orchestrator:advertise onchange;			}			leaf l3 {				type string;				orchestrator:advertise onchange;			}			container a {				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				container b {					leaf l1 {						type int32;						orchestrator:advertise onchange;					}					leaf l2 {						type string;						orchestrator:advertise onchange;					}					container c {						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						leaf l3 {							type string;							orchestrator:advertise onchange;						}						container a {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}					}					list l {						key l1;						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						container b {							leaf l1 {								type int32;								orchestrator:advertise onchange;							}							leaf l2 {								type string;								orchestrator:advertise onchange;							}							list l {								key l1;								leaf l1 {									type int32;									orchestrator:advertise onchange;								}								leaf l2 {									type string;									orchestrator:advertise onchange;								}								container c {									leaf l1 {										type int32;										orchestrator:advertise onchange;									}									leaf l2 {										type string;										orchestrator:advertise onchange;									}									leaf l3 {										type string;										orchestrator:advertise onchange;									}								}							}						}						container c {							leaf l1 {								type int32;								orchestrator:advertise onchange;							}							leaf l2 {								type string;								orchestrator:advertise onchange;							}							leaf l3 {								type string;								orchestrator:advertise onchange;							}							container a {								leaf l1 {									type int32;									orchestrator:advertise onchange;								}								leaf l2 {									type string;									orchestrator:advertise onchange;								}							}						}					}				}				container c {					leaf l1 {						type int32;						orchestrator:advertise onchange;					}					leaf l2 {						type string;						orchestrator:advertise onchange;					}					leaf l3 {						type string;						orchestrator:advertise onchange;					}					container a {						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						container b {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    ty]]

[2018-10-02T12:49:17.196+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538477357196] [levelValue: 800] [[
  pe string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}						container c {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}					}				}			}			container c {			    leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }			    container a {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container b {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        list l {                            key l1;                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1]]

[2018-10-02T12:49:17.196+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538477357196] [levelValue: 800] [[
  {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }			}		}	}	container a2 {        leaf l1 {            type int32;            orchestrator:advertise onchange;        }        leaf l2 {            type string;            orchestrator:advertise onchange;        }        container b {            leaf l1 {                type int32;                orchestrator:advertise onchange;            }            leaf l2 {                type string;                orchestrator:advertise onchange;            }            container c {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }            }            list l {                key l1;                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2]]

[2018-10-02T12:49:17.196+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538477357196] [levelValue: 800] [[
  {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }            }        }        container c {            leaf l1 {                type int32;                orchestrator:advertise onchange;            }            leaf l2 {                type string;                orchestrator:advertise onchange;            }            leaf l3 {                type string;                orchestrator:advertise onchange;            }            container a {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container c {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }]]

[2018-10-02T12:49:17.196+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538477357196] [levelValue: 800] [[
  leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    leaf l3 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }            }            container c {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }                container a {                    leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container a {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type]]

[2018-10-02T12:49:17.196+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538477357196] [levelValue: 800] [[
  string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container b {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    list l {                                        key l1;                                        leaf l1 {                                            type int32;                                            orchestrator:advertise onchange;                                        }                                        leaf l2 {                                            type string;                                            orchestrator:advertise onchange;                                        }                                    }                                }                            }                        }                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                                container c {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    leaf l3 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container a {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                    }    			}    		}    	}}]]

[2018-10-02T12:49:20.572+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538477360572] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator']]

[2018-10-02T13:02:34.931+0200] [glassfish 4.1] [SEVERE] [] [com.mycompany.frogsssa.service.ConnectionModule] [tid: _ThreadID=29 _ThreadName=http-listener-1(2)] [timeMillis: 1538478154931] [levelValue: 1000] [[
  
java.lang.InterruptedException
	at java.lang.Object.wait(Native Method)
	at java.lang.Object.wait(Object.java:502)
	at com.mycompany.frogsssa.service.ConnectionModule.getValue(ConnectionModule.java:127)
	at com.mycompany.frogsssa.service.serviceLayerService.getResources(serviceLayerService.java:102)
	at sun.reflect.GeneratedMethodAccessor49.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory$1.invoke(ResourceMethodInvocationHandlerFactory.java:81)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:144)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:161)
	at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:160)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:99)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:389)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:347)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:102)
	at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:309)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:315)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:297)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:267)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139)
	at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:460)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:386)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:334)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:221)
	at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1682)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:318)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:160)
	at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:734)
	at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:673)
	at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:99)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:174)
	at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:416)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:283)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:283)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:200)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:132)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:111)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:536)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571)
	at java.lang.Thread.run(Thread.java:748)
]]

[2018-10-02T13:02:34.932+0200] [glassfish 4.1] [WARNING] [] [javax.enterprise.web] [tid: _ThreadID=29 _ThreadName=http-listener-1(2)] [timeMillis: 1538478154932] [levelValue: 900] [[
  StandardWrapperValve[com.mycompany.frogsssa.service.ApplicationConfig]: Servlet.service() for servlet com.mycompany.frogsssa.service.ApplicationConfig threw exception
java.lang.NullPointerException
	at com.sun.common.util.logging.LoggingOutputStream$LoggingPrintStream.println(LoggingOutputStream.java:228)
	at org.apache.felix.gogo.runtime.threadio.ThreadPrintStream.println(ThreadPrintStream.java:205)
	at com.mycompany.frogsssa.service.serviceLayerService.getResources(serviceLayerService.java:103)
	at sun.reflect.GeneratedMethodAccessor49.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory$1.invoke(ResourceMethodInvocationHandlerFactory.java:81)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:144)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:161)
	at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:160)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:99)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:389)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:347)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:102)
	at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:309)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:315)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:297)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:267)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139)
	at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:460)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:386)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:334)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:221)
	at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1682)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:318)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:160)
	at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:734)
	at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:673)
	at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:99)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:174)
	at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:416)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:283)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:283)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:200)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:132)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:111)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:536)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571)
	at java.lang.Thread.run(Thread.java:748)
]]

[2018-10-02T13:04:20.940+0200] [glassfish 4.1] [SEVERE] [] [com.mycompany.frogsssa.service.ConnectionModule] [tid: _ThreadID=30 _ThreadName=http-listener-1(3)] [timeMillis: 1538478260940] [levelValue: 1000] [[
  
java.lang.InterruptedException
	at java.lang.Object.wait(Native Method)
	at java.lang.Object.wait(Object.java:502)
	at com.mycompany.frogsssa.service.ConnectionModule.getValue(ConnectionModule.java:127)
	at com.mycompany.frogsssa.service.serviceLayerService.getResources(serviceLayerService.java:102)
	at sun.reflect.GeneratedMethodAccessor49.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory$1.invoke(ResourceMethodInvocationHandlerFactory.java:81)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:144)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:161)
	at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:160)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:99)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:389)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:347)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:102)
	at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:309)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:315)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:297)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:267)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139)
	at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:460)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:386)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:334)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:221)
	at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1682)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:318)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:160)
	at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:734)
	at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:673)
	at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:99)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:174)
	at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:416)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:283)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:283)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:200)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:132)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:111)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:536)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571)
	at java.lang.Thread.run(Thread.java:748)
]]

[2018-10-02T13:04:20.942+0200] [glassfish 4.1] [WARNING] [] [javax.enterprise.web] [tid: _ThreadID=30 _ThreadName=http-listener-1(3)] [timeMillis: 1538478260942] [levelValue: 900] [[
  StandardWrapperValve[com.mycompany.frogsssa.service.ApplicationConfig]: Servlet.service() for servlet com.mycompany.frogsssa.service.ApplicationConfig threw exception
java.lang.NullPointerException
	at com.sun.common.util.logging.LoggingOutputStream$LoggingPrintStream.println(LoggingOutputStream.java:228)
	at org.apache.felix.gogo.runtime.threadio.ThreadPrintStream.println(ThreadPrintStream.java:205)
	at com.mycompany.frogsssa.service.serviceLayerService.getResources(serviceLayerService.java:103)
	at sun.reflect.GeneratedMethodAccessor49.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory$1.invoke(ResourceMethodInvocationHandlerFactory.java:81)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:144)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:161)
	at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:160)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:99)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:389)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:347)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:102)
	at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:309)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:315)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:297)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:267)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139)
	at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:460)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:386)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:334)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:221)
	at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1682)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:318)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:160)
	at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:734)
	at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:673)
	at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:99)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:174)
	at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:416)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:283)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:283)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:200)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:132)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:111)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:536)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571)
	at java.lang.Thread.run(Thread.java:748)
]]

[2018-10-02T13:40:30.797+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538480430797] [levelValue: 800] [[
  Setted DM for sssaLara module orchestrator{	namespace "urn:sssa:orchestrator";	prefix "orchestrator";	extension advertise{		argument advertise{			yin-element false;		}	}	extension period{		argument period{			yin-element false;		}	}	extension minthreshold{		argument minthreshold{			yin-element false;		}	}	extension maxthreshold{		argument maxthreshold{			yin-element false;		}	}	list switches{		key id;		leaf id{			type string;			orchestrator:advertise onchange;		}		leaf ip{			type string;			orchestrator:advertise onchange;		}		leaf mac{			type string;			orchestrator:advertise onchange;		}	}	list load{		key id;		leaf id{			type string;		}		leaf tp{			type int32;			orchestrator:advertise onthreshold;			orchestrator:minthreshold 500;		}	}	container a {		leaf l1 {			type int32;			orchestrator:advertise onchange;		}		leaf l2 {			type string;			orchestrator:advertise onchange;		}		container b {			leaf l1 {				type int32;				orchestrator:advertise onchange;			}			leaf l2 {				type string;				orchestrator:advertise onchange;			}			container c {				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				leaf l3 {					type string;					orchestrator:advertise onchange;				}			}			list l {				key l1;				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }				container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;]]

[2018-10-02T13:40:30.797+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538480430797] [levelValue: 800] [[
  orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }			}		}		container c {			leaf l1 {				type int32;				orchestrator:advertise onchange;			}			leaf l2 {				type string;				orchestrator:advertise onchange;			}			leaf l3 {				type string;				orchestrator:advertise onchange;			}			container a {				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				container b {					leaf l1 {						type int32;						orchestrator:advertise onchange;					}					leaf l2 {						type string;						orchestrator:advertise onchange;					}					container c {						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						leaf l3 {							type string;							orchestrator:advertise onchange;						}						container a {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}					}					list l {						key l1;						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						container b {							leaf l1 {								type int32;								orchestrator:advertise onchange;							}							leaf l2 {								type string;								orchestrator:advertise onchange;							}							list l {								key l1;								leaf l1 {									type int32;									orchestrator:advertise onchange;								}								leaf l2 {									type string;									orchestrator:advertise onchange;								}								container c {									leaf l1 {										type int32;										orchestrator:advertise onchange;									}									leaf l2 {										type string;										orchestrator:advertise onchange;									}									leaf l3 {										type string;										orchestrator:advertise onchange;									}								}							}						}						container c {							leaf l1 {								type int32;								orchestrator:advertise onchange;							}							leaf l2 {								type string;								orchestrator:advertise onchange;							}							leaf l3 {								type string;								orchestrator:advertise onchange;							}							container a {								leaf l1 {									type int32;									orchestrator:advertise onchange;								}								leaf l2 {									type string;									orchestrator:advertise onchange;								}							}						}					}				}				container c {					leaf l1 {						type int32;						orchestrator:advertise onchange;					}					leaf l2 {						type string;						orchestrator:advertise onchange;					}					leaf l3 {						type string;						orchestrator:advertise onchange;					}					container a {						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						container b {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    ty]]

[2018-10-02T13:40:30.797+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538480430797] [levelValue: 800] [[
  pe string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}						container c {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}					}				}			}			container c {			    leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }			    container a {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container b {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        list l {                            key l1;                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1]]

[2018-10-02T13:40:30.797+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538480430797] [levelValue: 800] [[
  {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }			}		}	}	container a2 {        leaf l1 {            type int32;            orchestrator:advertise onchange;        }        leaf l2 {            type string;            orchestrator:advertise onchange;        }        container b {            leaf l1 {                type int32;                orchestrator:advertise onchange;            }            leaf l2 {                type string;                orchestrator:advertise onchange;            }            container c {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }            }            list l {                key l1;                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2]]

[2018-10-02T13:40:30.798+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538480430798] [levelValue: 800] [[
  {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }            }        }        container c {            leaf l1 {                type int32;                orchestrator:advertise onchange;            }            leaf l2 {                type string;                orchestrator:advertise onchange;            }            leaf l3 {                type string;                orchestrator:advertise onchange;            }            container a {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container c {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }]]

[2018-10-02T13:40:30.798+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538480430798] [levelValue: 800] [[
  leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    leaf l3 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }            }            container c {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }                container a {                    leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container a {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type]]

[2018-10-02T13:40:30.798+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538480430798] [levelValue: 800] [[
  string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container b {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    list l {                                        key l1;                                        leaf l1 {                                            type int32;                                            orchestrator:advertise onchange;                                        }                                        leaf l2 {                                            type string;                                            orchestrator:advertise onchange;                                        }                                    }                                }                            }                        }                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                                container c {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    leaf l3 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container a {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                    }    			}    		}    	}}]]

[2018-10-02T13:40:33.982+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538480433982] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator']]

[2018-10-02T13:48:29.903+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538480909903] [levelValue: 800] [[
  Setted DM for sssaLara module orchestrator{	namespace "urn:sssa:orchestrator";	prefix "orchestrator";	extension advertise{		argument advertise{			yin-element false;		}	}	extension period{		argument period{			yin-element false;		}	}	extension minthreshold{		argument minthreshold{			yin-element false;		}	}	extension maxthreshold{		argument maxthreshold{			yin-element false;		}	}	list switches{		key id;		leaf id{			type string;			orchestrator:advertise onchange;		}		leaf ip{			type string;			orchestrator:advertise onchange;		}		leaf mac{			type string;			orchestrator:advertise onchange;		}	}	list load{		key id;		leaf id{			type string;		}		leaf tp{			type int32;			orchestrator:advertise onthreshold;			orchestrator:minthreshold 500;		}	}	container a {		leaf l1 {			type int32;			orchestrator:advertise onchange;		}		leaf l2 {			type string;			orchestrator:advertise onchange;		}		container b {			leaf l1 {				type int32;				orchestrator:advertise onchange;			}			leaf l2 {				type string;				orchestrator:advertise onchange;			}			container c {				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				leaf l3 {					type string;					orchestrator:advertise onchange;				}			}			list l {				key l1;				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }				container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;]]

[2018-10-02T13:48:29.903+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538480909903] [levelValue: 800] [[
  orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }			}		}		container c {			leaf l1 {				type int32;				orchestrator:advertise onchange;			}			leaf l2 {				type string;				orchestrator:advertise onchange;			}			leaf l3 {				type string;				orchestrator:advertise onchange;			}			container a {				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				container b {					leaf l1 {						type int32;						orchestrator:advertise onchange;					}					leaf l2 {						type string;						orchestrator:advertise onchange;					}					container c {						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						leaf l3 {							type string;							orchestrator:advertise onchange;						}						container a {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}					}					list l {						key l1;						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						container b {							leaf l1 {								type int32;								orchestrator:advertise onchange;							}							leaf l2 {								type string;								orchestrator:advertise onchange;							}							list l {								key l1;								leaf l1 {									type int32;									orchestrator:advertise onchange;								}								leaf l2 {									type string;									orchestrator:advertise onchange;								}								container c {									leaf l1 {										type int32;										orchestrator:advertise onchange;									}									leaf l2 {										type string;										orchestrator:advertise onchange;									}									leaf l3 {										type string;										orchestrator:advertise onchange;									}								}							}						}						container c {							leaf l1 {								type int32;								orchestrator:advertise onchange;							}							leaf l2 {								type string;								orchestrator:advertise onchange;							}							leaf l3 {								type string;								orchestrator:advertise onchange;							}							container a {								leaf l1 {									type int32;									orchestrator:advertise onchange;								}								leaf l2 {									type string;									orchestrator:advertise onchange;								}							}						}					}				}				container c {					leaf l1 {						type int32;						orchestrator:advertise onchange;					}					leaf l2 {						type string;						orchestrator:advertise onchange;					}					leaf l3 {						type string;						orchestrator:advertise onchange;					}					container a {						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						container b {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    ty]]

[2018-10-02T13:48:29.903+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538480909903] [levelValue: 800] [[
  pe string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}						container c {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}					}				}			}			container c {			    leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }			    container a {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container b {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        list l {                            key l1;                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1]]

[2018-10-02T13:48:29.904+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538480909904] [levelValue: 800] [[
  {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }			}		}	}	container a2 {        leaf l1 {            type int32;            orchestrator:advertise onchange;        }        leaf l2 {            type string;            orchestrator:advertise onchange;        }        container b {            leaf l1 {                type int32;                orchestrator:advertise onchange;            }            leaf l2 {                type string;                orchestrator:advertise onchange;            }            container c {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }            }            list l {                key l1;                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2]]

[2018-10-02T13:48:29.904+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538480909904] [levelValue: 800] [[
  {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }            }        }        container c {            leaf l1 {                type int32;                orchestrator:advertise onchange;            }            leaf l2 {                type string;                orchestrator:advertise onchange;            }            leaf l3 {                type string;                orchestrator:advertise onchange;            }            container a {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container c {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }]]

[2018-10-02T13:48:29.904+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538480909904] [levelValue: 800] [[
  leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    leaf l3 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }            }            container c {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }                container a {                    leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container a {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type]]

[2018-10-02T13:48:29.904+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538480909904] [levelValue: 800] [[
  string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container b {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    list l {                                        key l1;                                        leaf l1 {                                            type int32;                                            orchestrator:advertise onchange;                                        }                                        leaf l2 {                                            type string;                                            orchestrator:advertise onchange;                                        }                                    }                                }                            }                        }                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                                container c {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    leaf l3 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container a {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                    }    			}    		}    	}}]]

[2018-10-02T13:48:32.748+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538480912748] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator']]

[2018-10-02T13:52:30.184+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538481150184] [levelValue: 800] [[
  Setted DM for sssaLara module orchestrator{	namespace "urn:sssa:orchestrator";	prefix "orchestrator";	extension advertise{		argument advertise{			yin-element false;		}	}	extension period{		argument period{			yin-element false;		}	}	extension minthreshold{		argument minthreshold{			yin-element false;		}	}	extension maxthreshold{		argument maxthreshold{			yin-element false;		}	}	list switches{		key id;		leaf id{			type string;			orchestrator:advertise onchange;		}		leaf ip{			type string;			orchestrator:advertise onchange;		}		leaf mac{			type string;			orchestrator:advertise onchange;		}	}	list load{		key id;		leaf id{			type string;		}		leaf tp{			type int32;			orchestrator:advertise onthreshold;			orchestrator:minthreshold 500;		}	}	container a {		leaf l1 {			type int32;			orchestrator:advertise onchange;		}		leaf l2 {			type string;			orchestrator:advertise onchange;		}		container b {			leaf l1 {				type int32;				orchestrator:advertise onchange;			}			leaf l2 {				type string;				orchestrator:advertise onchange;			}			container c {				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				leaf l3 {					type string;					orchestrator:advertise onchange;				}			}			list l {				key l1;				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }				container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;]]

[2018-10-02T13:52:30.184+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538481150184] [levelValue: 800] [[
  orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }			}		}		container c {			leaf l1 {				type int32;				orchestrator:advertise onchange;			}			leaf l2 {				type string;				orchestrator:advertise onchange;			}			leaf l3 {				type string;				orchestrator:advertise onchange;			}			container a {				leaf l1 {					type int32;					orchestrator:advertise onchange;				}				leaf l2 {					type string;					orchestrator:advertise onchange;				}				container b {					leaf l1 {						type int32;						orchestrator:advertise onchange;					}					leaf l2 {						type string;						orchestrator:advertise onchange;					}					container c {						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						leaf l3 {							type string;							orchestrator:advertise onchange;						}						container a {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}					}					list l {						key l1;						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						container b {							leaf l1 {								type int32;								orchestrator:advertise onchange;							}							leaf l2 {								type string;								orchestrator:advertise onchange;							}							list l {								key l1;								leaf l1 {									type int32;									orchestrator:advertise onchange;								}								leaf l2 {									type string;									orchestrator:advertise onchange;								}								container c {									leaf l1 {										type int32;										orchestrator:advertise onchange;									}									leaf l2 {										type string;										orchestrator:advertise onchange;									}									leaf l3 {										type string;										orchestrator:advertise onchange;									}								}							}						}						container c {							leaf l1 {								type int32;								orchestrator:advertise onchange;							}							leaf l2 {								type string;								orchestrator:advertise onchange;							}							leaf l3 {								type string;								orchestrator:advertise onchange;							}							container a {								leaf l1 {									type int32;									orchestrator:advertise onchange;								}								leaf l2 {									type string;									orchestrator:advertise onchange;								}							}						}					}				}				container c {					leaf l1 {						type int32;						orchestrator:advertise onchange;					}					leaf l2 {						type string;						orchestrator:advertise onchange;					}					leaf l3 {						type string;						orchestrator:advertise onchange;					}					container a {						leaf l1 {							type int32;							orchestrator:advertise onchange;						}						leaf l2 {							type string;							orchestrator:advertise onchange;						}						container b {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    ty]]

[2018-10-02T13:52:30.184+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538481150184] [levelValue: 800] [[
  pe string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}						container c {						    leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }						}					}				}			}			container c {			    leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }			    container a {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container b {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        list l {                            key l1;                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1]]

[2018-10-02T13:52:30.184+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538481150184] [levelValue: 800] [[
  {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }			}		}	}	container a2 {        leaf l1 {            type int32;            orchestrator:advertise onchange;        }        leaf l2 {            type string;            orchestrator:advertise onchange;        }        container b {            leaf l1 {                type int32;                orchestrator:advertise onchange;            }            leaf l2 {                type string;                orchestrator:advertise onchange;            }            container c {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }            }            list l {                key l1;                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2]]

[2018-10-02T13:52:30.184+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538481150184] [levelValue: 800] [[
  {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }            }        }        container c {            leaf l1 {                type int32;                orchestrator:advertise onchange;            }            leaf l2 {                type string;                orchestrator:advertise onchange;            }            leaf l3 {                type string;                orchestrator:advertise onchange;            }            container a {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                container b {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                    list l {                        key l1;                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container c {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }]]

[2018-10-02T13:52:30.184+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538481150184] [levelValue: 800] [[
  leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    leaf l3 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }                container c {                    leaf l1 {                        type int32;                        orchestrator:advertise onchange;                    }                    leaf l2 {                        type string;                        orchestrator:advertise onchange;                    }                    leaf l3 {                        type string;                        orchestrator:advertise onchange;                    }                    container a {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                        }                    }                }            }            container c {                leaf l1 {                    type int32;                    orchestrator:advertise onchange;                }                leaf l2 {                    type string;                    orchestrator:advertise onchange;                }                leaf l3 {                    type string;                    orchestrator:advertise onchange;                }                container a {                    leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        container b {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            list l {                                key l1;                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container a {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                        container c {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            leaf l3 {                                type]]

[2018-10-02T13:52:30.184+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538481150184] [levelValue: 800] [[
  string;                                orchestrator:advertise onchange;                            }                            container a {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container b {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    list l {                                        key l1;                                        leaf l1 {                                            type int32;                                            orchestrator:advertise onchange;                                        }                                        leaf l2 {                                            type string;                                            orchestrator:advertise onchange;                                        }                                    }                                }                            }                        }                    }                    container c {                        leaf l1 {                            type int32;                            orchestrator:advertise onchange;                        }                        leaf l2 {                            type string;                            orchestrator:advertise onchange;                        }                        leaf l3 {                            type string;                            orchestrator:advertise onchange;                        }                        container a {                            leaf l1 {                                type int32;                                orchestrator:advertise onchange;                            }                            leaf l2 {                                type string;                                orchestrator:advertise onchange;                            }                            container b {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                list l {                                    key l1;                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                                container c {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                    leaf l3 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                            container c {                                leaf l1 {                                    type int32;                                    orchestrator:advertise onchange;                                }                                leaf l2 {                                    type string;                                    orchestrator:advertise onchange;                                }                                leaf l3 {                                    type string;                                    orchestrator:advertise onchange;                                }                                container a {                                    leaf l1 {                                        type int32;                                        orchestrator:advertise onchange;                                    }                                    leaf l2 {                                        type string;                                        orchestrator:advertise onchange;                                    }                                }                            }                        }                    }    			}    		}    	}}]]

[2018-10-02T13:52:34.607+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538481154607] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator']]

[2018-10-02T13:52:34.738+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538481154738] [levelValue: 800] [[
  {"res":{"a":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"96","l2":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"a2":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"switches":[{"id":"1","ip":"10.0.0.1","mac":"00:00:00:00:00:11"},{"id":"2","ip":"10.0.0.2","mac":"00:00:00:00:00:22"},{"id":"3","ip":"10.0.0.3","mac":"00:00:00:00:00:33"},{"id":"4","ip":"10.0.0.4","mac":"00:00:00:00:00:44"},{"id":"5","ip":"10.0.0.5","mac":"00:00:00:00:00:55"},{"id":"6","ip":"10.0.0.6","mac":"00:00:00:00:00:66"},{"id":"7","ip":"10.0.0.7","mac":"00:00:00:00:00:77"},{"id":"8","ip":"167772168","mac":"8"},{"id":"9","ip":"167772169","mac":"9"},{"id":"10","ip":"167772170","mac":"10"},{"id":"11","ip":"167772171","mac":"11"},{"id":"12","ip":"167772172","mac":"12"},{"id":"13","ip":"167772173","mac":"13"},{"id":"14","ip":"167772174","mac":"14"}],"load":[{"id":"1","tp":823},{"id":"2","tp":655},{"id":"3","tp":830},{"id":"4","tp":634},{"id":"5","tp":533},{"id":"6","tp":596},{"id":"7","tp":802}]},"time":101.103465}]]

[2018-10-02T13:52:40.266+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538481160266] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator']]

[2018-10-02T13:52:40.312+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538481160312] [levelValue: 800] [[
  {"res":{"a":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"96","l2":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"a2":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"switches":[{"id":"1","ip":"10.0.0.1","mac":"00:00:00:00:00:11"},{"id":"2","ip":"10.0.0.2","mac":"00:00:00:00:00:22"},{"id":"3","ip":"10.0.0.3","mac":"00:00:00:00:00:33"},{"id":"4","ip":"10.0.0.4","mac":"00:00:00:00:00:44"},{"id":"5","ip":"10.0.0.5","mac":"00:00:00:00:00:55"},{"id":"6","ip":"10.0.0.6","mac":"00:00:00:00:00:66"},{"id":"7","ip":"10.0.0.7","mac":"00:00:00:00:00:77"},{"id":"8","ip":"167772168","mac":"8"},{"id":"9","ip":"167772169","mac":"9"},{"id":"10","ip":"167772170","mac":"10"},{"id":"11","ip":"167772171","mac":"11"},{"id":"12","ip":"167772172","mac":"12"},{"id":"13","ip":"167772173","mac":"13"},{"id":"14","ip":"167772174","mac":"14"}],"load":[{"id":"1","tp":823},{"id":"2","tp":655},{"id":"3","tp":830},{"id":"4","tp":634},{"id":"5","tp":533},{"id":"6","tp":596},{"id":"7","tp":802}]},"time":35.344078}]]

[2018-10-02T13:52:41.111+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538481161111] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator']]

[2018-10-02T13:52:41.152+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538481161152] [levelValue: 800] [[
  {"res":{"a":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"96","l2":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"a2":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"switches":[{"id":"1","ip":"10.0.0.1","mac":"00:00:00:00:00:11"},{"id":"2","ip":"10.0.0.2","mac":"00:00:00:00:00:22"},{"id":"3","ip":"10.0.0.3","mac":"00:00:00:00:00:33"},{"id":"4","ip":"10.0.0.4","mac":"00:00:00:00:00:44"},{"id":"5","ip":"10.0.0.5","mac":"00:00:00:00:00:55"},{"id":"6","ip":"10.0.0.6","mac":"00:00:00:00:00:66"},{"id":"7","ip":"10.0.0.7","mac":"00:00:00:00:00:77"},{"id":"8","ip":"167772168","mac":"8"},{"id":"9","ip":"167772169","mac":"9"},{"id":"10","ip":"167772170","mac":"10"},{"id":"11","ip":"167772171","mac":"11"},{"id":"12","ip":"167772172","mac":"12"},{"id":"13","ip":"167772173","mac":"13"},{"id":"14","ip":"167772174","mac":"14"}],"load":[{"id":"1","tp":823},{"id":"2","tp":655},{"id":"3","tp":830},{"id":"4","tp":634},{"id":"5","tp":533},{"id":"6","tp":596},{"id":"7","tp":802}]},"time":33.236498}]]

[2018-10-02T13:52:41.873+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538481161873] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator']]

[2018-10-02T13:52:41.899+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538481161899] [levelValue: 800] [[
  {"res":{"a":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"96","l2":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"a2":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"switches":[{"id":"1","ip":"10.0.0.1","mac":"00:00:00:00:00:11"},{"id":"2","ip":"10.0.0.2","mac":"00:00:00:00:00:22"},{"id":"3","ip":"10.0.0.3","mac":"00:00:00:00:00:33"},{"id":"4","ip":"10.0.0.4","mac":"00:00:00:00:00:44"},{"id":"5","ip":"10.0.0.5","mac":"00:00:00:00:00:55"},{"id":"6","ip":"10.0.0.6","mac":"00:00:00:00:00:66"},{"id":"7","ip":"10.0.0.7","mac":"00:00:00:00:00:77"},{"id":"8","ip":"167772168","mac":"8"},{"id":"9","ip":"167772169","mac":"9"},{"id":"10","ip":"167772170","mac":"10"},{"id":"11","ip":"167772171","mac":"11"},{"id":"12","ip":"167772172","mac":"12"},{"id":"13","ip":"167772173","mac":"13"},{"id":"14","ip":"167772174","mac":"14"}],"load":[{"id":"1","tp":823},{"id":"2","tp":655},{"id":"3","tp":830},{"id":"4","tp":634},{"id":"5","tp":533},{"id":"6","tp":596},{"id":"7","tp":802}]},"time":19.777036}]]

[2018-10-02T13:52:42.574+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538481162574] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator']]

[2018-10-02T13:52:42.602+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538481162602] [levelValue: 800] [[
  {"res":{"a":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"96","l2":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"a2":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"switches":[{"id":"1","ip":"10.0.0.1","mac":"00:00:00:00:00:11"},{"id":"2","ip":"10.0.0.2","mac":"00:00:00:00:00:22"},{"id":"3","ip":"10.0.0.3","mac":"00:00:00:00:00:33"},{"id":"4","ip":"10.0.0.4","mac":"00:00:00:00:00:44"},{"id":"5","ip":"10.0.0.5","mac":"00:00:00:00:00:55"},{"id":"6","ip":"10.0.0.6","mac":"00:00:00:00:00:66"},{"id":"7","ip":"10.0.0.7","mac":"00:00:00:00:00:77"},{"id":"8","ip":"167772168","mac":"8"},{"id":"9","ip":"167772169","mac":"9"},{"id":"10","ip":"167772170","mac":"10"},{"id":"11","ip":"167772171","mac":"11"},{"id":"12","ip":"167772172","mac":"12"},{"id":"13","ip":"167772173","mac":"13"},{"id":"14","ip":"167772174","mac":"14"}],"load":[{"id":"1","tp":823},{"id":"2","tp":655},{"id":"3","tp":830},{"id":"4","tp":634},{"id":"5","tp":533},{"id":"6","tp":596},{"id":"7","tp":802}]},"time":21.033779}]]

[2018-10-02T13:52:43.342+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538481163342] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator']]

[2018-10-02T13:52:43.365+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538481163365] [levelValue: 800] [[
  {"res":{"a":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"96","l2":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"a2":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"switches":[{"id":"1","ip":"10.0.0.1","mac":"00:00:00:00:00:11"},{"id":"2","ip":"10.0.0.2","mac":"00:00:00:00:00:22"},{"id":"3","ip":"10.0.0.3","mac":"00:00:00:00:00:33"},{"id":"4","ip":"10.0.0.4","mac":"00:00:00:00:00:44"},{"id":"5","ip":"10.0.0.5","mac":"00:00:00:00:00:55"},{"id":"6","ip":"10.0.0.6","mac":"00:00:00:00:00:66"},{"id":"7","ip":"10.0.0.7","mac":"00:00:00:00:00:77"},{"id":"8","ip":"167772168","mac":"8"},{"id":"9","ip":"167772169","mac":"9"},{"id":"10","ip":"167772170","mac":"10"},{"id":"11","ip":"167772171","mac":"11"},{"id":"12","ip":"167772172","mac":"12"},{"id":"13","ip":"167772173","mac":"13"},{"id":"14","ip":"167772174","mac":"14"}],"load":[{"id":"1","tp":823},{"id":"2","tp":655},{"id":"3","tp":830},{"id":"4","tp":634},{"id":"5","tp":533},{"id":"6","tp":596},{"id":"7","tp":802}]},"time":17.277738}]]

[2018-10-02T13:52:44.082+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538481164082] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator']]

[2018-10-02T13:52:44.106+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538481164106] [levelValue: 800] [[
  {"res":{"a":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"96","l2":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"a2":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"switches":[{"id":"1","ip":"10.0.0.1","mac":"00:00:00:00:00:11"},{"id":"2","ip":"10.0.0.2","mac":"00:00:00:00:00:22"},{"id":"3","ip":"10.0.0.3","mac":"00:00:00:00:00:33"},{"id":"4","ip":"10.0.0.4","mac":"00:00:00:00:00:44"},{"id":"5","ip":"10.0.0.5","mac":"00:00:00:00:00:55"},{"id":"6","ip":"10.0.0.6","mac":"00:00:00:00:00:66"},{"id":"7","ip":"10.0.0.7","mac":"00:00:00:00:00:77"},{"id":"8","ip":"167772168","mac":"8"},{"id":"9","ip":"167772169","mac":"9"},{"id":"10","ip":"167772170","mac":"10"},{"id":"11","ip":"167772171","mac":"11"},{"id":"12","ip":"167772172","mac":"12"},{"id":"13","ip":"167772173","mac":"13"},{"id":"14","ip":"167772174","mac":"14"}],"load":[{"id":"1","tp":823},{"id":"2","tp":655},{"id":"3","tp":830},{"id":"4","tp":634},{"id":"5","tp":533},{"id":"6","tp":596},{"id":"7","tp":802}]},"time":17.294792}]]

[2018-10-02T13:52:44.813+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538481164813] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator']]

[2018-10-02T13:52:44.840+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538481164840] [levelValue: 800] [[
  {"res":{"a":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"96","l2":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"a2":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"switches":[{"id":"1","ip":"10.0.0.1","mac":"00:00:00:00:00:11"},{"id":"2","ip":"10.0.0.2","mac":"00:00:00:00:00:22"},{"id":"3","ip":"10.0.0.3","mac":"00:00:00:00:00:33"},{"id":"4","ip":"10.0.0.4","mac":"00:00:00:00:00:44"},{"id":"5","ip":"10.0.0.5","mac":"00:00:00:00:00:55"},{"id":"6","ip":"10.0.0.6","mac":"00:00:00:00:00:66"},{"id":"7","ip":"10.0.0.7","mac":"00:00:00:00:00:77"},{"id":"8","ip":"167772168","mac":"8"},{"id":"9","ip":"167772169","mac":"9"},{"id":"10","ip":"167772170","mac":"10"},{"id":"11","ip":"167772171","mac":"11"},{"id":"12","ip":"167772172","mac":"12"},{"id":"13","ip":"167772173","mac":"13"},{"id":"14","ip":"167772174","mac":"14"}],"load":[{"id":"1","tp":823},{"id":"2","tp":655},{"id":"3","tp":830},{"id":"4","tp":634},{"id":"5","tp":533},{"id":"6","tp":596},{"id":"7","tp":802}]},"time":20.539613}]]

[2018-10-02T13:52:45.178+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538481165178] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator']]

[2018-10-02T13:52:45.217+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538481165217] [levelValue: 800] [[
  {"res":{"a":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"96","l2":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"a2":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"switches":[{"id":"1","ip":"10.0.0.1","mac":"00:00:00:00:00:11"},{"id":"2","ip":"10.0.0.2","mac":"00:00:00:00:00:22"},{"id":"3","ip":"10.0.0.3","mac":"00:00:00:00:00:33"},{"id":"4","ip":"10.0.0.4","mac":"00:00:00:00:00:44"},{"id":"5","ip":"10.0.0.5","mac":"00:00:00:00:00:55"},{"id":"6","ip":"10.0.0.6","mac":"00:00:00:00:00:66"},{"id":"7","ip":"10.0.0.7","mac":"00:00:00:00:00:77"},{"id":"8","ip":"167772168","mac":"8"},{"id":"9","ip":"167772169","mac":"9"},{"id":"10","ip":"167772170","mac":"10"},{"id":"11","ip":"167772171","mac":"11"},{"id":"12","ip":"167772172","mac":"12"},{"id":"13","ip":"167772173","mac":"13"},{"id":"14","ip":"167772174","mac":"14"}],"load":[{"id":"1","tp":823},{"id":"2","tp":655},{"id":"3","tp":830},{"id":"4","tp":634},{"id":"5","tp":533},{"id":"6","tp":596},{"id":"7","tp":802}]},"time":30.681522}]]

[2018-10-02T13:52:46.718+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538481166718] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator']]

[2018-10-02T13:52:46.742+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538481166742] [levelValue: 800] [[
  {"res":{"a":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"96","l2":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"a2":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"switches":[{"id":"1","ip":"10.0.0.1","mac":"00:00:00:00:00:11"},{"id":"2","ip":"10.0.0.2","mac":"00:00:00:00:00:22"},{"id":"3","ip":"10.0.0.3","mac":"00:00:00:00:00:33"},{"id":"4","ip":"10.0.0.4","mac":"00:00:00:00:00:44"},{"id":"5","ip":"10.0.0.5","mac":"00:00:00:00:00:55"},{"id":"6","ip":"10.0.0.6","mac":"00:00:00:00:00:66"},{"id":"7","ip":"10.0.0.7","mac":"00:00:00:00:00:77"},{"id":"8","ip":"167772168","mac":"8"},{"id":"9","ip":"167772169","mac":"9"},{"id":"10","ip":"167772170","mac":"10"},{"id":"11","ip":"167772171","mac":"11"},{"id":"12","ip":"167772172","mac":"12"},{"id":"13","ip":"167772173","mac":"13"},{"id":"14","ip":"167772174","mac":"14"}],"load":[{"id":"1","tp":823},{"id":"2","tp":655},{"id":"3","tp":830},{"id":"4","tp":634},{"id":"5","tp":533},{"id":"6","tp":596},{"id":"7","tp":802}]},"time":16.533057}]]

[2018-10-02T13:52:47.484+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538481167484] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator']]

[2018-10-02T13:52:47.504+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538481167504] [levelValue: 800] [[
  {"res":{"a":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"96","l2":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"a2":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"switches":[{"id":"1","ip":"10.0.0.1","mac":"00:00:00:00:00:11"},{"id":"2","ip":"10.0.0.2","mac":"00:00:00:00:00:22"},{"id":"3","ip":"10.0.0.3","mac":"00:00:00:00:00:33"},{"id":"4","ip":"10.0.0.4","mac":"00:00:00:00:00:44"},{"id":"5","ip":"10.0.0.5","mac":"00:00:00:00:00:55"},{"id":"6","ip":"10.0.0.6","mac":"00:00:00:00:00:66"},{"id":"7","ip":"10.0.0.7","mac":"00:00:00:00:00:77"},{"id":"8","ip":"167772168","mac":"8"},{"id":"9","ip":"167772169","mac":"9"},{"id":"10","ip":"167772170","mac":"10"},{"id":"11","ip":"167772171","mac":"11"},{"id":"12","ip":"167772172","mac":"12"},{"id":"13","ip":"167772173","mac":"13"},{"id":"14","ip":"167772174","mac":"14"}],"load":[{"id":"1","tp":823},{"id":"2","tp":655},{"id":"3","tp":830},{"id":"4","tp":634},{"id":"5","tp":533},{"id":"6","tp":596},{"id":"7","tp":802}]},"time":14.237235}]]

[2018-10-02T13:52:50.084+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538481170084] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator']]

[2018-10-02T13:52:50.107+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538481170107] [levelValue: 800] [[
  {"res":{"a":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"96","l2":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"a2":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"switches":[{"id":"1","ip":"10.0.0.1","mac":"00:00:00:00:00:11"},{"id":"2","ip":"10.0.0.2","mac":"00:00:00:00:00:22"},{"id":"3","ip":"10.0.0.3","mac":"00:00:00:00:00:33"},{"id":"4","ip":"10.0.0.4","mac":"00:00:00:00:00:44"},{"id":"5","ip":"10.0.0.5","mac":"00:00:00:00:00:55"},{"id":"6","ip":"10.0.0.6","mac":"00:00:00:00:00:66"},{"id":"7","ip":"10.0.0.7","mac":"00:00:00:00:00:77"},{"id":"8","ip":"167772168","mac":"8"},{"id":"9","ip":"167772169","mac":"9"},{"id":"10","ip":"167772170","mac":"10"},{"id":"11","ip":"167772171","mac":"11"},{"id":"12","ip":"167772172","mac":"12"},{"id":"13","ip":"167772173","mac":"13"},{"id":"14","ip":"167772174","mac":"14"}],"load":[{"id":"1","tp":823},{"id":"2","tp":655},{"id":"3","tp":830},{"id":"4","tp":634},{"id":"5","tp":533},{"id":"6","tp":596},{"id":"7","tp":802}]},"time":17.32987}]]

[2018-10-02T13:55:34.394+0200] [glassfish 4.1] [SEVERE] [] [com.mycompany.frogsssa.service.ConnectionModule] [tid: _ThreadID=29 _ThreadName=http-listener-1(2)] [timeMillis: 1538481334394] [levelValue: 1000] [[
  
java.lang.InterruptedException
	at java.lang.Object.wait(Native Method)
	at java.lang.Object.wait(Object.java:502)
	at com.mycompany.frogsssa.service.ConnectionModule.getValue(ConnectionModule.java:127)
	at com.mycompany.frogsssa.service.serviceLayerService.getResources(serviceLayerService.java:102)
	at sun.reflect.GeneratedMethodAccessor49.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory$1.invoke(ResourceMethodInvocationHandlerFactory.java:81)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:144)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:161)
	at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:160)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:99)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:389)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:347)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:102)
	at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:309)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:315)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:297)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:267)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139)
	at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:460)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:386)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:334)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:221)
	at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1682)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:318)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:160)
	at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:734)
	at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:673)
	at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:99)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:174)
	at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:416)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:283)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:283)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:200)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:132)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:111)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:536)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571)
	at java.lang.Thread.run(Thread.java:748)
]]

[2018-10-02T13:55:34.395+0200] [glassfish 4.1] [WARNING] [] [javax.enterprise.web] [tid: _ThreadID=29 _ThreadName=http-listener-1(2)] [timeMillis: 1538481334395] [levelValue: 900] [[
  StandardWrapperValve[com.mycompany.frogsssa.service.ApplicationConfig]: Servlet.service() for servlet com.mycompany.frogsssa.service.ApplicationConfig threw exception
java.lang.NullPointerException
	at com.sun.common.util.logging.LoggingOutputStream$LoggingPrintStream.println(LoggingOutputStream.java:228)
	at org.apache.felix.gogo.runtime.threadio.ThreadPrintStream.println(ThreadPrintStream.java:205)
	at com.mycompany.frogsssa.service.serviceLayerService.getResources(serviceLayerService.java:103)
	at sun.reflect.GeneratedMethodAccessor49.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory$1.invoke(ResourceMethodInvocationHandlerFactory.java:81)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:144)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:161)
	at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:160)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:99)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:389)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:347)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:102)
	at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:309)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:315)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:297)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:267)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139)
	at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:460)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:386)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:334)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:221)
	at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1682)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:318)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:160)
	at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:734)
	at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:673)
	at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:99)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:174)
	at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:416)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:283)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:283)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:200)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:132)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:111)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:536)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571)
	at java.lang.Thread.run(Thread.java:748)
]]

[2018-10-02T13:59:24.246+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538481564246] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]/b/c/l1']]

[2018-10-02T13:59:24.253+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538481564253] [levelValue: 800] [[
  {"res":96,"time":1.088682}]]

[2018-10-02T13:59:35.072+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538481575072] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]/b/c/l1']]

[2018-10-02T13:59:59.293+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538481599293] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]/b/c/l1']]

[2018-10-02T13:59:59.299+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538481599299] [levelValue: 800] [[
  {"res":1,"time":0.199303}]]

[2018-10-02T14:00:16.957+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538481616957] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]/b/c']]

[2018-10-02T14:00:21.880+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538481621880] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]/b/c']]

[2018-10-02T14:00:22.584+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538481622584] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]/b/c']]

[2018-10-02T14:00:28.701+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538481628701] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]/b/c']]

[2018-10-02T14:00:28.707+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538481628707] [levelValue: 800] [[
  {"res":{"l1":96,"l2":"96","l3":"lista3"},"time":0.45035}]]

[2018-10-02T14:00:29.788+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538481629788] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]/b/c']]

[2018-10-02T14:00:29.795+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538481629795] [levelValue: 800] [[
  {"res":{"l1":96,"l2":"96","l3":"lista3"},"time":0.590424}]]

[2018-10-02T14:00:30.463+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538481630463] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]/b/c']]

[2018-10-02T14:00:30.469+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538481630469] [levelValue: 800] [[
  {"res":{"l1":96,"l2":"96","l3":"lista3"},"time":0.260547}]]

[2018-10-02T14:00:30.973+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538481630973] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]/b/c']]

[2018-10-02T14:00:30.979+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538481630979] [levelValue: 800] [[
  {"res":{"l1":96,"l2":"96","l3":"lista3"},"time":0.292711}]]

[2018-10-02T14:00:31.688+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538481631688] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]/b/c']]

[2018-10-02T14:00:31.694+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538481631694] [levelValue: 800] [[
  {"res":{"l1":96,"l2":"96","l3":"lista3"},"time":0.410473}]]

[2018-10-02T14:00:33.381+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538481633381] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]/b/c']]

[2018-10-02T14:00:33.387+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538481633387] [levelValue: 800] [[
  {"res":{"l1":96,"l2":"96","l3":"lista3"},"time":0.237948}]]

[2018-10-02T14:00:42.794+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538481642794] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]/b']]

[2018-10-02T14:00:42.801+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538481642801] [levelValue: 800] [[
  {"res":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"time":0.795425}]]

[2018-10-02T14:00:45.682+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538481645682] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]/b']]

[2018-10-02T14:00:45.690+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538481645690] [levelValue: 800] [[
  {"res":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"time":0.915811}]]

[2018-10-02T14:00:46.276+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538481646276] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]/b']]

[2018-10-02T14:00:46.284+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538481646284] [levelValue: 800] [[
  {"res":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"time":0.867228}]]

[2018-10-02T14:00:51.369+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538481651369] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]/b']]

[2018-10-02T14:00:52.081+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538481652081] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]/b']]

[2018-10-02T14:00:52.333+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538481652333] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]/b']]

[2018-10-02T14:00:52.569+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538481652569] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]/b']]

[2018-10-02T14:00:56.830+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538481656830] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]/b']]

[2018-10-02T14:00:58.137+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538481658137] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]/b']]

[2018-10-02T14:00:58.368+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538481658368] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]/b']]

[2018-10-02T14:00:58.711+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538481658711] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]/b']]

[2018-10-02T14:01:00.645+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538481660645] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]/b']]

[2018-10-02T14:01:30.225+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538481690225] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T14:01:33.763+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538481693763] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T14:01:34.514+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538481694514] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T14:01:36.218+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538481696218] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T14:01:36.709+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538481696709] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T14:01:36.952+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538481696952] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T14:01:37.198+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538481697198] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T14:01:37.509+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538481697509] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T14:01:39.710+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538481699710] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T14:01:41.941+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538481701941] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T14:01:44.134+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538481704134] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T14:01:48.407+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538481708407] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T14:01:48.417+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538481708417] [levelValue: 800] [[
  {"res":[{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"},{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":77,"l2":"Str3"}],"time":3.292126}]]

[2018-10-02T14:01:50.185+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538481710185] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T14:01:50.192+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538481710192] [levelValue: 800] [[
  {"res":[{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"},{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":77,"l2":"Str3"}],"time":1.840651}]]

[2018-10-02T14:01:51.042+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538481711042] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T14:01:51.049+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538481711049] [levelValue: 800] [[
  {"res":[{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"},{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":77,"l2":"Str3"}],"time":1.94961}]]

[2018-10-02T14:01:51.763+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538481711763] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T14:01:51.771+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538481711771] [levelValue: 800] [[
  {"res":[{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"},{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":77,"l2":"Str3"}],"time":2.041632}]]

[2018-10-02T14:01:52.516+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538481712516] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T14:01:52.525+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538481712525] [levelValue: 800] [[
  {"res":[{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"},{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":77,"l2":"Str3"}],"time":3.440255}]]

[2018-10-02T14:01:53.184+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538481713184] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T14:01:53.192+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538481713192] [levelValue: 800] [[
  {"res":[{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"},{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":77,"l2":"Str3"}],"time":2.793375}]]

[2018-10-02T14:01:53.831+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538481713831] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T14:01:53.839+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538481713839] [levelValue: 800] [[
  {"res":[{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"},{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":77,"l2":"Str3"}],"time":1.914063}]]

[2018-10-02T14:01:54.453+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538481714453] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T14:01:54.462+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538481714462] [levelValue: 800] [[
  {"res":[{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"},{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":77,"l2":"Str3"}],"time":3.102603}]]

[2018-10-02T14:01:55.131+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538481715131] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T14:01:55.138+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538481715138] [levelValue: 800] [[
  {"res":[{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"},{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":77,"l2":"Str3"}],"time":1.726112}]]

[2018-10-02T14:01:55.825+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538481715825] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T14:01:55.832+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538481715832] [levelValue: 800] [[
  {"res":[{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"},{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":77,"l2":"Str3"}],"time":2.110459}]]

[2018-10-02T14:01:56.517+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538481716517] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T14:01:56.526+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538481716526] [levelValue: 800] [[
  {"res":[{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"},{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":77,"l2":"Str3"}],"time":2.733192}]]

[2018-10-02T14:01:57.219+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538481717219] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T14:01:57.245+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538481717245] [levelValue: 800] [[
  {"res":[{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"},{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":77,"l2":"Str3"}],"time":2.457712}]]

[2018-10-02T14:01:58.018+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538481718018] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T14:01:58.025+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538481718025] [levelValue: 800] [[
  {"res":[{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"},{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":77,"l2":"Str3"}],"time":1.872544}]]

[2018-10-02T14:01:58.300+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538481718300] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T14:01:58.306+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538481718306] [levelValue: 800] [[
  {"res":[{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"},{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":77,"l2":"Str3"}],"time":1.797415}]]

[2018-10-02T14:01:58.561+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538481718561] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T14:01:58.568+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538481718568] [levelValue: 800] [[
  {"res":[{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"},{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":77,"l2":"Str3"}],"time":1.7}]]

[2018-10-02T14:01:58.822+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538481718822] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T14:01:58.833+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538481718833] [levelValue: 800] [[
  {"res":[{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"},{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":77,"l2":"Str3"}],"time":2.399391}]]

[2018-10-02T14:01:59.173+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538481719173] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T14:01:59.180+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538481719180] [levelValue: 800] [[
  {"res":[{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"},{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":77,"l2":"Str3"}],"time":2.254696}]]

[2018-10-02T14:01:59.870+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538481719870] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T14:01:59.878+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538481719878] [levelValue: 800] [[
  {"res":[{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"},{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":77,"l2":"Str3"}],"time":1.656286}]]

[2018-10-02T14:02:04.304+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538481724304] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T14:02:06.276+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538481726276] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T14:02:06.891+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538481726891] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T14:02:07.445+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538481727445] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T14:02:07.904+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538481727904] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T14:02:08.367+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538481728367] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T14:02:08.676+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538481728676] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T14:02:09.296+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538481729296] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T14:02:09.986+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538481729986] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T14:02:10.778+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538481730778] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T14:02:11.599+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538481731599] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l']]

[2018-10-02T14:02:47.664+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538481767664] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]']]

[2018-10-02T14:02:47.669+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538481767669] [levelValue: 800] [[
  {"res":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},"time":1.021305}]]

[2018-10-02T14:02:48.640+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538481768640] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]']]

[2018-10-02T14:02:48.645+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538481768645] [levelValue: 800] [[
  {"res":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},"time":1.025692}]]

[2018-10-02T14:02:49.379+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538481769379] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]']]

[2018-10-02T14:02:49.385+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538481769385] [levelValue: 800] [[
  {"res":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},"time":1.375605}]]

[2018-10-02T14:02:50.023+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538481770023] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]']]

[2018-10-02T14:02:50.028+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538481770028] [levelValue: 800] [[
  {"res":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},"time":0.930875}]]

[2018-10-02T14:02:50.991+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538481770991] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]']]

[2018-10-02T14:02:50.998+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538481770998] [levelValue: 800] [[
  {"res":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},"time":1.131637}]]

[2018-10-02T14:03:03.451+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538481783451] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]']]

[2018-10-02T14:03:11.219+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538481791219] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]']]

[2018-10-02T14:03:33.165+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538481813165] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]']]

[2018-10-02T14:03:33.455+0200] [glassfish 4.1] [SEVERE] [] [com.mycompany.frogsssa.service.ConnectionModule] [tid: _ThreadID=30 _ThreadName=http-listener-1(3)] [timeMillis: 1538481813455] [levelValue: 1000] [[
  
java.lang.InterruptedException
	at java.lang.Object.wait(Native Method)
	at java.lang.Object.wait(Object.java:502)
	at com.mycompany.frogsssa.service.ConnectionModule.getValue(ConnectionModule.java:127)
	at com.mycompany.frogsssa.service.serviceLayerService.getResources(serviceLayerService.java:102)
	at sun.reflect.GeneratedMethodAccessor49.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory$1.invoke(ResourceMethodInvocationHandlerFactory.java:81)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:144)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:161)
	at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:160)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:99)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:389)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:347)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:102)
	at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:309)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:315)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:297)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:267)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139)
	at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:460)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:386)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:334)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:221)
	at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1682)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:318)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:160)
	at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:734)
	at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:673)
	at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:99)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:174)
	at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:416)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:283)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:283)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:200)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:132)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:111)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:536)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571)
	at java.lang.Thread.run(Thread.java:748)
]]

[2018-10-02T14:03:33.456+0200] [glassfish 4.1] [WARNING] [] [javax.enterprise.web] [tid: _ThreadID=30 _ThreadName=http-listener-1(3)] [timeMillis: 1538481813456] [levelValue: 900] [[
  StandardWrapperValve[com.mycompany.frogsssa.service.ApplicationConfig]: Servlet.service() for servlet com.mycompany.frogsssa.service.ApplicationConfig threw exception
java.lang.NullPointerException
	at com.sun.common.util.logging.LoggingOutputStream$LoggingPrintStream.println(LoggingOutputStream.java:228)
	at org.apache.felix.gogo.runtime.threadio.ThreadPrintStream.println(ThreadPrintStream.java:205)
	at com.mycompany.frogsssa.service.serviceLayerService.getResources(serviceLayerService.java:103)
	at sun.reflect.GeneratedMethodAccessor49.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory$1.invoke(ResourceMethodInvocationHandlerFactory.java:81)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:144)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:161)
	at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:160)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:99)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:389)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:347)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:102)
	at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:309)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:315)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:297)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:267)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139)
	at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:460)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:386)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:334)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:221)
	at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1682)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:318)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:160)
	at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:734)
	at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:673)
	at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:99)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:174)
	at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:416)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:283)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:283)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:200)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:132)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:111)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:536)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571)
	at java.lang.Thread.run(Thread.java:748)
]]

[2018-10-02T14:03:48.218+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538481828218] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]']]

[2018-10-02T14:04:22.134+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538481862134] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]']]

[2018-10-02T14:04:38.450+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538481878450] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]']]

[2018-10-02T14:04:41.755+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538481881755] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]']]

[2018-10-02T14:04:42.262+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538481882262] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]']]

[2018-10-02T14:04:42.520+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538481882520] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]']]

[2018-10-02T14:04:42.754+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538481882754] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b/l[1]']]

[2018-10-02T14:04:56.193+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538481896193] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b']]

[2018-10-02T14:04:56.201+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538481896201] [levelValue: 800] [[
  {"res":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":77,"l2":"Str3"},{"b":{"c":{},"l":[]},"c":{"a":{}},"l1":0,"l2":"Applyyyyy"}]},"time":2.770661}]]

[2018-10-02T14:05:00.057+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538481900057] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b']]

[2018-10-02T14:05:00.064+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538481900064] [levelValue: 800] [[
  {"res":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":77,"l2":"Str3"},{"b":{"c":{},"l":[]},"c":{"a":{}},"l1":0,"l2":"Applyyyyy"}]},"time":2.385476}]]

[2018-10-02T14:05:00.788+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538481900788] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b']]

[2018-10-02T14:05:00.796+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538481900796] [levelValue: 800] [[
  {"res":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":77,"l2":"Str3"},{"b":{"c":{},"l":[]},"c":{"a":{}},"l1":0,"l2":"Applyyyyy"}]},"time":2.083095}]]

[2018-10-02T14:05:01.490+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538481901490] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b']]

[2018-10-02T14:05:01.497+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538481901497] [levelValue: 800] [[
  {"res":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":77,"l2":"Str3"},{"b":{"c":{},"l":[]},"c":{"a":{}},"l1":0,"l2":"Applyyyyy"}]},"time":2.444176}]]

[2018-10-02T14:05:02.114+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538481902114] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b']]

[2018-10-02T14:05:02.121+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538481902121] [levelValue: 800] [[
  {"res":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":77,"l2":"Str3"},{"b":{"c":{},"l":[]},"c":{"a":{}},"l1":0,"l2":"Applyyyyy"}]},"time":1.928155}]]

[2018-10-02T14:05:02.745+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538481902745] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b']]

[2018-10-02T14:05:02.752+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538481902752] [levelValue: 800] [[
  {"res":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":77,"l2":"Str3"},{"b":{"c":{},"l":[]},"c":{"a":{}},"l1":0,"l2":"Applyyyyy"}]},"time":2.429177}]]

[2018-10-02T14:05:03.370+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538481903370] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b']]

[2018-10-02T14:05:03.375+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538481903375] [levelValue: 800] [[
  {"res":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":77,"l2":"Str3"},{"b":{"c":{},"l":[]},"c":{"a":{}},"l1":0,"l2":"Applyyyyy"}]},"time":1.702652}]]

[2018-10-02T14:05:21.888+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538481921888] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b']]

[2018-10-02T14:05:23.537+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538481923537] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b']]

[2018-10-02T14:05:24.365+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538481924365] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b']]

[2018-10-02T14:05:25.046+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538481925046] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b']]

[2018-10-02T14:05:25.688+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538481925688] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b']]

[2018-10-02T14:05:26.348+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538481926348] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b']]

[2018-10-02T14:05:26.989+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538481926989] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b']]

[2018-10-02T14:05:27.718+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538481927718] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b']]

[2018-10-02T14:05:28.526+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538481928526] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b']]

[2018-10-02T14:05:29.279+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538481929279] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b']]

[2018-10-02T14:05:30.011+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538481930011] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b']]

[2018-10-02T14:05:30.933+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538481930933] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a/b']]

[2018-10-02T14:05:54.123+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538481954123] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a']]

[2018-10-02T14:05:54.131+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538481954131] [levelValue: 800] [[
  {"res":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"},{"b":{"c":{},"l":[]},"c":{"a":{}},"l1":0,"l2":"Applyyyyy"},{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":77,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"time":3.25431}]]

[2018-10-02T14:05:56.697+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538481956697] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a']]

[2018-10-02T14:05:56.705+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538481956705] [levelValue: 800] [[
  {"res":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"},{"b":{"c":{},"l":[]},"c":{"a":{}},"l1":0,"l2":"Applyyyyy"},{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":77,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"time":2.967871}]]

[2018-10-02T14:05:57.378+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538481957378] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a']]

[2018-10-02T14:05:57.385+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538481957385] [levelValue: 800] [[
  {"res":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"},{"b":{"c":{},"l":[]},"c":{"a":{}},"l1":0,"l2":"Applyyyyy"},{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":77,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"time":3.742482}]]

[2018-10-02T14:05:58.058+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538481958058] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a']]

[2018-10-02T14:05:58.065+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538481958065] [levelValue: 800] [[
  {"res":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"},{"b":{"c":{},"l":[]},"c":{"a":{}},"l1":0,"l2":"Applyyyyy"},{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":77,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"time":2.981251}]]

[2018-10-02T14:05:58.711+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538481958711] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a']]

[2018-10-02T14:05:58.718+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538481958718] [levelValue: 800] [[
  {"res":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"},{"b":{"c":{},"l":[]},"c":{"a":{}},"l1":0,"l2":"Applyyyyy"},{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":77,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"time":3.152559}]]

[2018-10-02T14:05:59.441+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538481959441] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a']]

[2018-10-02T14:05:59.448+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538481959448] [levelValue: 800] [[
  {"res":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"},{"b":{"c":{},"l":[]},"c":{"a":{}},"l1":0,"l2":"Applyyyyy"},{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":77,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"time":2.852561}]]

[2018-10-02T14:06:13.553+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538481973553] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a']]

[2018-10-02T14:06:14.517+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538481974517] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a']]

[2018-10-02T14:06:15.777+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538481975777] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a']]

[2018-10-02T14:06:16.479+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538481976479] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a']]

[2018-10-02T14:06:17.350+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538481977350] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a']]

[2018-10-02T14:06:18.077+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538481978077] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a']]

[2018-10-02T14:06:18.799+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538481978799] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a']]

[2018-10-02T14:06:19.653+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538481979653] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a']]

[2018-10-02T14:06:20.448+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538481980448] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a']]

[2018-10-02T14:06:21.253+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538481981253] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a']]

[2018-10-02T14:06:22.021+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538481982021] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a']]

[2018-10-02T14:06:23.078+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538481983078] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a']]

[2018-10-02T14:06:24.591+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538481984591] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c/a']]

[2018-10-02T14:06:47.361+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538482007361] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c']]

[2018-10-02T14:06:47.371+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538482007371] [levelValue: 800] [[
  {"res":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"},{"b":{"c":{},"l":[]},"c":{"a":{}},"l1":0,"l2":"Applyyyyy"},{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":77,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"96","l2":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"time":4.815214}]]

[2018-10-02T14:06:49.124+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538482009124] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c']]

[2018-10-02T14:06:49.139+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538482009139] [levelValue: 800] [[
  {"res":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"},{"b":{"c":{},"l":[]},"c":{"a":{}},"l1":0,"l2":"Applyyyyy"},{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":77,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"96","l2":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"time":5.689508}]]

[2018-10-02T14:06:49.765+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538482009765] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c']]

[2018-10-02T14:06:49.773+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538482009773] [levelValue: 800] [[
  {"res":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"},{"b":{"c":{},"l":[]},"c":{"a":{}},"l1":0,"l2":"Applyyyyy"},{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":77,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"96","l2":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"time":4.123389}]]

[2018-10-02T14:06:50.319+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538482010319] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c']]

[2018-10-02T14:06:50.327+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538482010327] [levelValue: 800] [[
  {"res":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"},{"b":{"c":{},"l":[]},"c":{"a":{}},"l1":0,"l2":"Applyyyyy"},{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":77,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"96","l2":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"time":3.757385}]]

[2018-10-02T14:06:50.831+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538482010831] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a/c']]

[2018-10-02T14:06:50.841+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538482010841] [levelValue: 800] [[
  {"res":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"},{"b":{"c":{},"l":[]},"c":{"a":{}},"l1":0,"l2":"Applyyyyy"},{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":77,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"96","l2":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"time":5.540757}]]

[2018-10-02T14:06:59.611+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538482019611] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c']]

[2018-10-02T14:07:00.661+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538482020661] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c']]

[2018-10-02T14:07:01.291+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538482021291] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c']]

[2018-10-02T14:07:01.780+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538482021780] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c']]

[2018-10-02T14:07:02.317+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538482022317] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a/c']]

[2018-10-02T14:07:09.993+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538482029993] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a']]

[2018-10-02T14:07:10.007+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538482030007] [levelValue: 800] [[
  {"res":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"},{"b":{"c":{},"l":[]},"c":{"a":{}},"l1":0,"l2":"Applyyyyy"},{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":77,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"lista3","l2":"96"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"time":7.768767}]]

[2018-10-02T14:07:12.186+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538482032186] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a']]

[2018-10-02T14:07:12.198+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538482032198] [levelValue: 800] [[
  {"res":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"},{"b":{"c":{},"l":[]},"c":{"a":{}},"l1":0,"l2":"Applyyyyy"},{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":77,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"lista3","l2":"96"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"time":7.499381}]]

[2018-10-02T14:07:12.747+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538482032747] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a']]

[2018-10-02T14:07:12.761+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538482032761] [levelValue: 800] [[
  {"res":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"},{"b":{"c":{},"l":[]},"c":{"a":{}},"l1":0,"l2":"Applyyyyy"},{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":77,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"lista3","l2":"96"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"time":8.120949}]]

[2018-10-02T14:07:13.303+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538482033303] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a']]

[2018-10-02T14:07:13.318+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538482033318] [levelValue: 800] [[
  {"res":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"},{"b":{"c":{},"l":[]},"c":{"a":{}},"l1":0,"l2":"Applyyyyy"},{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":77,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"lista3","l2":"96"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"time":9.306984}]]

[2018-10-02T14:07:13.897+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538482033897] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a']]

[2018-10-02T14:07:13.909+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538482033909] [levelValue: 800] [[
  {"res":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"},{"b":{"c":{},"l":[]},"c":{"a":{}},"l1":0,"l2":"Applyyyyy"},{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":77,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"lista3","l2":"96"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"time":7.273552}]]

[2018-10-02T14:07:14.469+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538482034469] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a']]

[2018-10-02T14:07:14.483+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538482034483] [levelValue: 800] [[
  {"res":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"},{"b":{"c":{},"l":[]},"c":{"a":{}},"l1":0,"l2":"Applyyyyy"},{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":77,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"lista3","l2":"96"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"time":9.120472}]]

[2018-10-02T14:07:23.297+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538482043297] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a']]

[2018-10-02T14:07:41.656+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538482061656] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator/a']]

[2018-10-02T14:07:41.670+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538482061670] [levelValue: 800] [[
  {"res":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"},{"b":{"c":{},"l":[]},"c":{"a":{}},"l1":0,"l2":"Applyyyyy"},{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":77,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"lista3","l2":"96"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"time":9.891072}]]

[2018-10-02T14:07:57.931+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538482077931] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a']]

[2018-10-02T14:08:00.116+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538482080116] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a']]

[2018-10-02T14:08:00.912+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538482080912] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a']]

[2018-10-02T14:08:01.374+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=31 _ThreadName=Thread-8] [timeMillis: 1538482081374] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a']]

[2018-10-02T14:08:02.034+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1538482082034] [levelValue: 800] [[
  POST REQUEST - id:'sssaLara' - var:'orchestrator/a']]

[2018-10-02T14:08:49.661+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538482129661] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator']]

[2018-10-02T14:08:49.685+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538482129685] [levelValue: 800] [[
  {"res":{"a":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":0,"l2":"Applyyyyy"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"Applyyyyy"},{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":77,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"lista3","l2":"96"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"a2":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"switches":[{"id":"1","ip":"10.0.0.1","mac":"00:00:00:00:00:11"},{"id":"2","ip":"10.0.0.2","mac":"00:00:00:00:00:22"},{"id":"3","ip":"10.0.0.3","mac":"00:00:00:00:00:33"},{"id":"4","ip":"10.0.0.4","mac":"00:00:00:00:00:44"},{"id":"5","ip":"10.0.0.5","mac":"00:00:00:00:00:55"},{"id":"6","ip":"10.0.0.6","mac":"00:00:00:00:00:66"},{"id":"7","ip":"10.0.0.7","mac":"00:00:00:00:00:77"},{"id":"8","ip":"167772168","mac":"8"},{"id":"9","ip":"167772169","mac":"9"},{"id":"10","ip":"167772170","mac":"10"},{"id":"11","ip":"167772171","mac":"11"},{"id":"12","ip":"167772172","mac":"12"},{"id":"13","ip":"167772173","mac":"13"},{"id":"14","ip":"167772174","mac":"14"}],"load":[{"id":"1","tp":823},{"id":"2","tp":655},{"id":"3","tp":830},{"id":"4","tp":634},{"id":"5","tp":533},{"id":"6","tp":596},{"id":"7","tp":802}]},"time":18.662578}]]

[2018-10-02T14:08:52.545+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538482132545] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator']]

[2018-10-02T14:08:52.566+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538482132566] [levelValue: 800] [[
  {"res":{"a":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":0,"l2":"Applyyyyy"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"Applyyyyy"},{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":77,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"lista3","l2":"96"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"a2":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"switches":[{"id":"1","ip":"10.0.0.1","mac":"00:00:00:00:00:11"},{"id":"2","ip":"10.0.0.2","mac":"00:00:00:00:00:22"},{"id":"3","ip":"10.0.0.3","mac":"00:00:00:00:00:33"},{"id":"4","ip":"10.0.0.4","mac":"00:00:00:00:00:44"},{"id":"5","ip":"10.0.0.5","mac":"00:00:00:00:00:55"},{"id":"6","ip":"10.0.0.6","mac":"00:00:00:00:00:66"},{"id":"7","ip":"10.0.0.7","mac":"00:00:00:00:00:77"},{"id":"8","ip":"167772168","mac":"8"},{"id":"9","ip":"167772169","mac":"9"},{"id":"10","ip":"167772170","mac":"10"},{"id":"11","ip":"167772171","mac":"11"},{"id":"12","ip":"167772172","mac":"12"},{"id":"13","ip":"167772173","mac":"13"},{"id":"14","ip":"167772174","mac":"14"}],"load":[{"id":"1","tp":823},{"id":"2","tp":655},{"id":"3","tp":830},{"id":"4","tp":634},{"id":"5","tp":533},{"id":"6","tp":596},{"id":"7","tp":802}]},"time":16.002038}]]

[2018-10-02T14:08:53.142+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538482133142] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator']]

[2018-10-02T14:08:53.164+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538482133164] [levelValue: 800] [[
  {"res":{"a":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":0,"l2":"Applyyyyy"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"Applyyyyy"},{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":77,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"lista3","l2":"96"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"a2":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"switches":[{"id":"1","ip":"10.0.0.1","mac":"00:00:00:00:00:11"},{"id":"2","ip":"10.0.0.2","mac":"00:00:00:00:00:22"},{"id":"3","ip":"10.0.0.3","mac":"00:00:00:00:00:33"},{"id":"4","ip":"10.0.0.4","mac":"00:00:00:00:00:44"},{"id":"5","ip":"10.0.0.5","mac":"00:00:00:00:00:55"},{"id":"6","ip":"10.0.0.6","mac":"00:00:00:00:00:66"},{"id":"7","ip":"10.0.0.7","mac":"00:00:00:00:00:77"},{"id":"8","ip":"167772168","mac":"8"},{"id":"9","ip":"167772169","mac":"9"},{"id":"10","ip":"167772170","mac":"10"},{"id":"11","ip":"167772171","mac":"11"},{"id":"12","ip":"167772172","mac":"12"},{"id":"13","ip":"167772173","mac":"13"},{"id":"14","ip":"167772174","mac":"14"}],"load":[{"id":"1","tp":823},{"id":"2","tp":655},{"id":"3","tp":830},{"id":"4","tp":634},{"id":"5","tp":533},{"id":"6","tp":596},{"id":"7","tp":802}]},"time":17.858326}]]

[2018-10-02T14:08:53.739+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538482133739] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator']]

[2018-10-02T14:08:53.760+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538482133760] [levelValue: 800] [[
  {"res":{"a":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":0,"l2":"Applyyyyy"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"Applyyyyy"},{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":77,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"lista3","l2":"96"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"a2":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"switches":[{"id":"1","ip":"10.0.0.1","mac":"00:00:00:00:00:11"},{"id":"2","ip":"10.0.0.2","mac":"00:00:00:00:00:22"},{"id":"3","ip":"10.0.0.3","mac":"00:00:00:00:00:33"},{"id":"4","ip":"10.0.0.4","mac":"00:00:00:00:00:44"},{"id":"5","ip":"10.0.0.5","mac":"00:00:00:00:00:55"},{"id":"6","ip":"10.0.0.6","mac":"00:00:00:00:00:66"},{"id":"7","ip":"10.0.0.7","mac":"00:00:00:00:00:77"},{"id":"8","ip":"167772168","mac":"8"},{"id":"9","ip":"167772169","mac":"9"},{"id":"10","ip":"167772170","mac":"10"},{"id":"11","ip":"167772171","mac":"11"},{"id":"12","ip":"167772172","mac":"12"},{"id":"13","ip":"167772173","mac":"13"},{"id":"14","ip":"167772174","mac":"14"}],"load":[{"id":"1","tp":823},{"id":"2","tp":655},{"id":"3","tp":830},{"id":"4","tp":634},{"id":"5","tp":533},{"id":"6","tp":596},{"id":"7","tp":802}]},"time":15.594789}]]

[2018-10-02T14:08:54.338+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538482134338] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator']]

[2018-10-02T14:08:54.362+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538482134362] [levelValue: 800] [[
  {"res":{"a":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":0,"l2":"Applyyyyy"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"Applyyyyy"},{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":77,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"lista3","l2":"96"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"a2":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"switches":[{"id":"1","ip":"10.0.0.1","mac":"00:00:00:00:00:11"},{"id":"2","ip":"10.0.0.2","mac":"00:00:00:00:00:22"},{"id":"3","ip":"10.0.0.3","mac":"00:00:00:00:00:33"},{"id":"4","ip":"10.0.0.4","mac":"00:00:00:00:00:44"},{"id":"5","ip":"10.0.0.5","mac":"00:00:00:00:00:55"},{"id":"6","ip":"10.0.0.6","mac":"00:00:00:00:00:66"},{"id":"7","ip":"10.0.0.7","mac":"00:00:00:00:00:77"},{"id":"8","ip":"167772168","mac":"8"},{"id":"9","ip":"167772169","mac":"9"},{"id":"10","ip":"167772170","mac":"10"},{"id":"11","ip":"167772171","mac":"11"},{"id":"12","ip":"167772172","mac":"12"},{"id":"13","ip":"167772173","mac":"13"},{"id":"14","ip":"167772174","mac":"14"}],"load":[{"id":"1","tp":823},{"id":"2","tp":655},{"id":"3","tp":830},{"id":"4","tp":634},{"id":"5","tp":533},{"id":"6","tp":596},{"id":"7","tp":802}]},"time":19.415912}]]

[2018-10-02T14:08:54.948+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538482134948] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator']]

[2018-10-02T14:08:54.968+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538482134968] [levelValue: 800] [[
  {"res":{"a":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":0,"l2":"Applyyyyy"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"Applyyyyy"},{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":77,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"lista3","l2":"96"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"a2":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"switches":[{"id":"1","ip":"10.0.0.1","mac":"00:00:00:00:00:11"},{"id":"2","ip":"10.0.0.2","mac":"00:00:00:00:00:22"},{"id":"3","ip":"10.0.0.3","mac":"00:00:00:00:00:33"},{"id":"4","ip":"10.0.0.4","mac":"00:00:00:00:00:44"},{"id":"5","ip":"10.0.0.5","mac":"00:00:00:00:00:55"},{"id":"6","ip":"10.0.0.6","mac":"00:00:00:00:00:66"},{"id":"7","ip":"10.0.0.7","mac":"00:00:00:00:00:77"},{"id":"8","ip":"167772168","mac":"8"},{"id":"9","ip":"167772169","mac":"9"},{"id":"10","ip":"167772170","mac":"10"},{"id":"11","ip":"167772171","mac":"11"},{"id":"12","ip":"167772172","mac":"12"},{"id":"13","ip":"167772173","mac":"13"},{"id":"14","ip":"167772174","mac":"14"}],"load":[{"id":"1","tp":823},{"id":"2","tp":655},{"id":"3","tp":830},{"id":"4","tp":634},{"id":"5","tp":533},{"id":"6","tp":596},{"id":"7","tp":802}]},"time":14.776433}]]

[2018-10-02T14:08:55.633+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538482135633] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator']]

[2018-10-02T14:08:55.662+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538482135662] [levelValue: 800] [[
  {"res":{"a":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":0,"l2":"Applyyyyy"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"Applyyyyy"},{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":77,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"lista3","l2":"96"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"a2":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"switches":[{"id":"1","ip":"10.0.0.1","mac":"00:00:00:00:00:11"},{"id":"2","ip":"10.0.0.2","mac":"00:00:00:00:00:22"},{"id":"3","ip":"10.0.0.3","mac":"00:00:00:00:00:33"},{"id":"4","ip":"10.0.0.4","mac":"00:00:00:00:00:44"},{"id":"5","ip":"10.0.0.5","mac":"00:00:00:00:00:55"},{"id":"6","ip":"10.0.0.6","mac":"00:00:00:00:00:66"},{"id":"7","ip":"10.0.0.7","mac":"00:00:00:00:00:77"},{"id":"8","ip":"167772168","mac":"8"},{"id":"9","ip":"167772169","mac":"9"},{"id":"10","ip":"167772170","mac":"10"},{"id":"11","ip":"167772171","mac":"11"},{"id":"12","ip":"167772172","mac":"12"},{"id":"13","ip":"167772173","mac":"13"},{"id":"14","ip":"167772174","mac":"14"}],"load":[{"id":"1","tp":823},{"id":"2","tp":655},{"id":"3","tp":830},{"id":"4","tp":634},{"id":"5","tp":533},{"id":"6","tp":596},{"id":"7","tp":802}]},"time":21.46029}]]

[2018-10-02T14:08:56.437+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538482136437] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator']]

[2018-10-02T14:08:56.462+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=29 _ThreadName=Thread-8] [timeMillis: 1538482136462] [levelValue: 800] [[
  {"res":{"a":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":0,"l2":"Applyyyyy"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"Applyyyyy"},{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":77,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"lista3","l2":"96"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"a2":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"switches":[{"id":"1","ip":"10.0.0.1","mac":"00:00:00:00:00:11"},{"id":"2","ip":"10.0.0.2","mac":"00:00:00:00:00:22"},{"id":"3","ip":"10.0.0.3","mac":"00:00:00:00:00:33"},{"id":"4","ip":"10.0.0.4","mac":"00:00:00:00:00:44"},{"id":"5","ip":"10.0.0.5","mac":"00:00:00:00:00:55"},{"id":"6","ip":"10.0.0.6","mac":"00:00:00:00:00:66"},{"id":"7","ip":"10.0.0.7","mac":"00:00:00:00:00:77"},{"id":"8","ip":"167772168","mac":"8"},{"id":"9","ip":"167772169","mac":"9"},{"id":"10","ip":"167772170","mac":"10"},{"id":"11","ip":"167772171","mac":"11"},{"id":"12","ip":"167772172","mac":"12"},{"id":"13","ip":"167772173","mac":"13"},{"id":"14","ip":"167772174","mac":"14"}],"load":[{"id":"1","tp":823},{"id":"2","tp":655},{"id":"3","tp":830},{"id":"4","tp":634},{"id":"5","tp":533},{"id":"6","tp":596},{"id":"7","tp":802}]},"time":19.541901}]]

[2018-10-02T14:08:57.173+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538482137173] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator']]

[2018-10-02T14:08:57.192+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=28 _ThreadName=Thread-8] [timeMillis: 1538482137192] [levelValue: 800] [[
  {"res":{"a":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":0,"l2":"Applyyyyy"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"Applyyyyy"},{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":77,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"lista3","l2":"96"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"a2":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"switches":[{"id":"1","ip":"10.0.0.1","mac":"00:00:00:00:00:11"},{"id":"2","ip":"10.0.0.2","mac":"00:00:00:00:00:22"},{"id":"3","ip":"10.0.0.3","mac":"00:00:00:00:00:33"},{"id":"4","ip":"10.0.0.4","mac":"00:00:00:00:00:44"},{"id":"5","ip":"10.0.0.5","mac":"00:00:00:00:00:55"},{"id":"6","ip":"10.0.0.6","mac":"00:00:00:00:00:66"},{"id":"7","ip":"10.0.0.7","mac":"00:00:00:00:00:77"},{"id":"8","ip":"167772168","mac":"8"},{"id":"9","ip":"167772169","mac":"9"},{"id":"10","ip":"167772170","mac":"10"},{"id":"11","ip":"167772171","mac":"11"},{"id":"12","ip":"167772172","mac":"12"},{"id":"13","ip":"167772173","mac":"13"},{"id":"14","ip":"167772174","mac":"14"}],"load":[{"id":"1","tp":823},{"id":"2","tp":655},{"id":"3","tp":830},{"id":"4","tp":634},{"id":"5","tp":533},{"id":"6","tp":596},{"id":"7","tp":802}]},"time":14.228926}]]

[2018-10-02T14:08:57.929+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538482137929] [levelValue: 800] [[
  GET REQUEST - id:'sssaLara' - var:'orchestrator']]

[2018-10-02T14:08:57.949+0200] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=30 _ThreadName=Thread-8] [timeMillis: 1538482137949] [levelValue: 800] [[
  {"res":{"a":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":3,"l2":"Str3"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":0,"l2":"Applyyyyy"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"Applyyyyy"},{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":45,"l2":"lista111"},{"l1":46,"l2":"lista1"}]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":1,"l2":"list1"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{"l1":0,"l2":"lara","l3":"orchesrator"},"l1":0,"l2":"test","l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":77,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l3":"lista3","l2":"96"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"a2":{"b":{"c":{"c":{"a":{"b":{"c":{},"l":[]},"c":{"a":{}}}},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":50,"l2":"test","l":[{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"},{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"b":{"c":{},"l":[]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":50,"l2":"foll2","l":[{"c":{"a":{"l1":67,"l2":"tor"},"l1":58,"l2":"foglia","l3":"last"},"l1":77,"l2":"list1"},{"c":{"a":{"l1":67,"l2":"tor"},"l1":0,"l2":"lara","l3":"orchesrator"},"l1":11,"l2":"liss"},{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"}]},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"l1":30,"l2":"req","l3":"usr"},"l1":25,"l2":"Applic1"},"c":{"a":{"b":{"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"b":{"l1":54,"l2":"final","l":[]},"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"c":{"l1":96,"l2":"96","l3":"lista3"},"l1":54,"l2":"final","l":[{"l1":25,"l2":"Applic1"}]},"c":{"a":{"l1":25,"l2":"Applic1"},"l1":96,"l2":"96","l3":"lista3"},"l1":44,"l2":"foll1"},"c":{"a":{"b":{"l":[]},"c":{}}},"l1":30,"l2":"req","l3":"usr"},"l1":30,"l2":"req","l3":"usr"},"l1":20,"l2":"test4","l3":"orchestrator"},"l1":1,"l2":"Str3"},"switches":[{"id":"1","ip":"10.0.0.1","mac":"00:00:00:00:00:11"},{"id":"2","ip":"10.0.0.2","mac":"00:00:00:00:00:22"},{"id":"3","ip":"10.0.0.3","mac":"00:00:00:00:00:33"},{"id":"4","ip":"10.0.0.4","mac":"00:00:00:00:00:44"},{"id":"5","ip":"10.0.0.5","mac":"00:00:00:00:00:55"},{"id":"6","ip":"10.0.0.6","mac":"00:00:00:00:00:66"},{"id":"7","ip":"10.0.0.7","mac":"00:00:00:00:00:77"},{"id":"8","ip":"167772168","mac":"8"},{"id":"9","ip":"167772169","mac":"9"},{"id":"10","ip":"167772170","mac":"10"},{"id":"11","ip":"167772171","mac":"11"},{"id":"12","ip":"167772172","mac":"12"},{"id":"13","ip":"167772173","mac":"13"},{"id":"14","ip":"167772174","mac":"14"}],"load":[{"id":"1","tp":823},{"id":"2","tp":655},{"id":"3","tp":830},{"id":"4","tp":634},{"id":"5","tp":533},{"id":"6","tp":596},{"id":"7","tp":802}]},"time":15.277006}]]

